@namespace FluentUI.Blazor.Community.Components
@inherits FluentComponentBase

@if (SendingRenderMode == ChatMessageSendingRenderMode.Inline && IsSending)
{
    <FluentCard Height="180px" MinimalStyle>
        @if(SendingContent is not null)
        {
            @SendingContent
        }
        else
        {
            <FluentStack Orientation="Orientation.Vertical"
                         Style="height: 100%"
                         VerticalAlignment="VerticalAlignment.Center"
                         HorizontalAlignment="HorizontalAlignment.Center">
                <FluentProgress Width="340px" />
                <FluentLabel Style="font-size: var(--type-ramp-minus-2-font-size); line-height: 8px;">
                    @Labels.SendingMessageLabel
                </FluentLabel>
            </FluentStack>
        }   
    </FluentCard>
}
else
{
    <FluentStack Orientation="Orientation.Horizontal"
                 Style="width: 100%"
                 VerticalAlignment="VerticalAlignment.Bottom">
        @if (Orientation == Orientation.Horizontal)
        {
            @_toolbarFragment((Orientation.Vertical, "auto", 0))
        }

        <FluentStack Width="100%" Orientation="Orientation.Vertical">
            @if (IsReply)
            {
                <ChatMessageReply Text="@(Draft?.GetReplyText(Owner))"
                                  AllowDismiss=true
                                  OnDismiss="@(OnDismiss)" />
            }

            @if (!_isRecording && !IsAudioProcessing)
            {
                <FluentTextArea @bind-Value=Draft!.Text
                                Placeholder="@Labels.EnterMessage"
                                Rows="@(GetNumberOfRows())"
                                Autofocus
                                Immediate
                                Style="width: 100%" />
            }
            else if(_isRecording)
            {
                @if (AudioWaveVisualizerContent is not null)
                {
                    @AudioWaveVisualizerContent
                }
                else
                {
                    <FluentCard Height="180px" MinimalStyle>
                        <FluentStack HorizontalAlignment="HorizontalAlignment.Center"
                                     VerticalAlignment="VerticalAlignment.Center"
                                     Style="height: 100%">
                            <ChatAudioWaveVisualizer />
                        </FluentStack>
                    </FluentCard>
                }
            }
            else if (IsAudioProcessing)
            {
                @if (AudioProcessingContent is not null)
                {
                    @AudioProcessingContent
                }
                else
                {
                    <FluentCard Height="180px" MinimalStyle>
                        <FluentStack HorizontalAlignment="HorizontalAlignment.Center"
                                     VerticalAlignment="VerticalAlignment.Center"
                                     Style="height: 100%">
                            <ChatAudioProcessing AudioProcessingLabel="@Labels.AudioProcessingLabel" />
                        </FluentStack>
                    </FluentCard>
                }
            }

            @if (Orientation == Orientation.Vertical)
            {
                @_toolbarFragment((Orientation.Horizontal, "100%", -1))
            }
        </FluentStack>

        @if (Orientation == Orientation.Horizontal)
        {
            @_toolbarFragment((Orientation.Vertical, "auto", 1))
        }
    </FluentStack>
}


@code {
    public ChatMessageWriter()
    {
        Id = Identifier.NewId();
        _toolbarFragment = (e) => __builder =>
        {
            if(e.Item3 == 0)
            {
                <FluentStack Width="@e.Item2" Orientation="e.Item1">
                @if (!IsEdit && ShowLiveAudioRecordingButton)
                {
                    <FluentCounterBadge Count="@(Draft?.SelectedChatFiles.FindAll(x => x.IsRecordedAudio).Count)"
                                        Max="9"
                                        ShowWhen=@(c => ShowCounterBadge && c > 0)
                                        BackgroundColor="@Color.Error"
                                        Color="Color.Fill"
                                        Appearance="Appearance.Neutral">
                        <FluentButton Id="AudioRecording"
                                      Title="@Labels.LiveAudioRecording"
                                      OnClick="@(OnAudioRecordingClickAsync)"
                                      IconStart="@(!_isRecording ? MicroIcon : MicroOffIcon)"
                                      Style="border-radius: 20px" />
                    </FluentCounterBadge>
                }

                @if (!IsEdit && ShowMediaButton)
                {
                    <FluentCounterBadge Count="@(Draft?.SelectedChatFiles.FindAll(x => !x.IsRecordedAudio).Count)"
                                        Max="9"
                                        ShowWhen=@(c => ShowCounterBadge && c > 0)
                                        BackgroundColor="@Color.Error"
                                        Color="Color.Fill"
                                        Appearance="Appearance.Neutral">
                        <FluentButton Id="MediaImporterButton"
                                      OnClick="@(OnImportMedia)"
                                      Title="@Labels.InsertMedia"
                                      Style="border-radius: 20px"
                                      IconStart="@MediaIcon" />
                    </FluentCounterBadge>
                }

                @if (ShowEmojiButton && !IsMobile)
                {
                    <FluentButton Id="EmojiButton"
                                  Title="@Labels.InsertEmojis"
                                  OnClick="@(OnEmoji)"
                                  IconStart="@(EmojiIcon)"
                                  Style="border-radius: 20px" />
                }

                @if (!IsEdit && ShowGiftButton)
                {
                    <FluentButton Title="@Labels.InsertGift"
                                  OnClick="@OnGift"
                                  IconStart="@(GiftIcon)"
                                  Style="border-radius: 20px" />
                }
                </FluentStack>
            }
            else if(e.Item3 == 1)
            {
                <FluentStack Width="@e.Item2" Orientation="e.Item1">
                @if (!IsEdit)
                {
                    <FluentButton Title="@Labels.SendMessage"
                                  Disabled=@(string.IsNullOrEmpty(Draft?.Text) && (Draft?.SelectedChatFiles.Count == 0))
                                  OnClick="OnSendMessage"
                                  IconStart="@(SendIcon)"
                                  Style="border-radius: 20px" />
                }

                @if (IsEdit)
                {
                    <FluentButton Title="@Labels.DialogCancel"
                                  OnClick="@OnCancel"
                                  IconStart="@DismissIcon"
                                  Style="border-radius: 20px" />

                    <FluentButton Title="@Labels.DialogOk"
                                  OnClick="@OnEditMessage"
                                  IconStart="@CheckmarkIcon"
                                  Style="border-radius: 20px" />
                }
                </FluentStack>
            }
            else
            {
                <FluentStack Width="@e.Item2" Orientation="e.Item1">

                    @if (!IsEdit && ShowLiveAudioRecordingButton)
                    {
                        <FluentCounterBadge Count="@(Draft?.SelectedChatFiles.FindAll(x => x.IsRecordedAudio).Count)"
                                            Max="9"
                                            ShowWhen=@(c => ShowCounterBadge && c > 0)
                                            BackgroundColor="@Color.Error"
                                            Color="Color.Fill"
                                            Appearance="Appearance.Neutral">
                            <FluentButton Id="AudioRecording"
                                          Title="@Labels.LiveAudioRecording"
                                          OnClick="@(OnAudioRecordingClickAsync)"
                                          IconStart="@(!_isRecording ? MicroIcon : MicroOffIcon)"
                                          Style="border-radius: 20px" />
                        </FluentCounterBadge>
                    }

                    @if (!IsEdit && ShowMediaButton)
                    {
                        <FluentCounterBadge Count="@(Draft?.SelectedChatFiles.FindAll(x => !x.IsRecordedAudio).Count)"
                                            Max="9"
                                            ShowWhen=@(c => ShowCounterBadge && c > 0)
                                            BackgroundColor="@Color.Error"
                                            Color="Color.Fill"
                                            Appearance="Appearance.Neutral">
                            <FluentButton Id="MediaImporterButton"
                                          OnClick="@(OnImportMedia)"
                                          Title="@Labels.InsertMedia"
                                          Style="border-radius: 20px"
                                          IconStart="@MediaIcon" />
                        </FluentCounterBadge>
                    }

                    @if (ShowEmojiButton && !IsMobile)
                    {
                        <FluentButton Id="EmojiButton"
                                      Title="@Labels.InsertEmojis"
                                      OnClick="@(OnEmoji)"
                                      IconStart="@(EmojiIcon)"
                                      Style="border-radius: 20px" />
                    }

                    @if (!IsEdit && ShowGiftButton)
                    {
                        <FluentButton Title="@Labels.InsertGift"
                                      OnClick="@OnGift"
                                      IconStart="@(GiftIcon)"
                                      Style="border-radius: 20px" />
                    }

                    @if (!IsEdit)
                    {
                        @if (e.Item1 == Orientation.Horizontal)
                        {
                            <FluentSpacer />
                        }

                        <FluentButton Title="@Labels.SendMessage"
                                      Disabled=@(string.IsNullOrEmpty(Draft?.Text) && (Draft?.SelectedChatFiles.Count == 0))
                                      OnClick="OnSendMessage"
                                      IconStart="@(SendIcon)"
                                      Style="border-radius: 20px" />
                    }

                    @if (IsEdit)
                    {
                        @if (e.Item1 == Orientation.Horizontal)
                        {
                            <FluentSpacer />
                        }

                        <FluentButton Title="@Labels.DialogCancel"
                                      OnClick="@OnCancel"
                                      IconStart="@DismissIcon"
                                      Style="border-radius: 20px" />

                        <FluentButton Title="@Labels.DialogOk"
                                      OnClick="@OnEditMessage"
                                      IconStart="@CheckmarkIcon"
                                      Style="border-radius: 20px" />
                    }
                </FluentStack>
            }
        };
    }
}
