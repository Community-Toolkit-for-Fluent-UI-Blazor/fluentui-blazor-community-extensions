@namespace FluentUI.Blazor.Community.Components
@inherits FluentComponentBase

<FluentStack Style="height: 100%" Orientation="Orientation.Vertical">
    @if(Parent is not null)
{
    if(Parent.IsRequestProcessing)
    {
        <FluentCard Height="180px">
            <FluentStack Orientation="Orientation.Vertical">
                <FluentSkeleton Shape="SkeletonShape.Rect" Width="80%" Height="14px" Shimmer="true" />

                <FluentSkeleton Shape="SkeletonShape.Rect" Width="60%" Height="12px" Shimmer="true" />

                <FluentSkeleton Shape="SkeletonShape.Rect" Width="100%" Height="80px" Shimmer="true" />

                <FluentSkeleton Shape="SkeletonShape.Rect" Width="100%" Height="12px" Shimmer="true" />
            </FluentStack>
        </FluentCard>
    }

    @if (Parent.Results.Count > 0)
    {
        var results = Parent.Results;

        <FluentStack Orientation="Orientation.Vertical">
            @foreach(var result in results)
            {
                if (Parent.ResultItemTemplate is not null)
                {
                    @Parent.ResultItemTemplate(result)
                }
                else
                {
                    <FluentCard MinimalStyle>
                            <FluentStack Style="height: 100%" Orientation="Orientation.Vertical">
                                <FluentLabel Typo="Typography.Header">@result.Title</FluentLabel>
                                <FluentLabel Color=Color.Neutral
                                             Style="font-size: 14px; opacity: 0.75">
                                    @result.Prompt
                                </FluentLabel>

                                <FluentDivider Role="DividerRole.Separator" />

                                <FluentLabel Style="height: 100%">@((MarkupString)Format(result.Result?.Text))</FluentLabel>

                                <FluentStack>
                                    <FluentButton IconStart="@(new Regular.Size20.Copy())"
                                                  OnClick="@(()=>OnCopyAsync(result))">
                                        @Parent.Labels.CopyLabel
                                    </FluentButton>

                                    <FluentButton IconStart="@(new Regular.Size20.ArrowCounterclockwise())"
                                                  OnClick="@(()=>OnRetryAsync(result))">
                                        @Parent.Labels.RetryLabel
                                    </FluentButton>

                                    <FluentSpacer />

                                    <FluentButton Appearance="Appearance.Stealth" OnClick="@(() => OnChangeRatingAsync(result, AIPromptRating.Negative))">
                                        @if (result.Rating == AIPromptRating.Negative)
                                        {
                                            <FluentIcon Value="@(new IconsFilled.Size20.ThumbDislike())" />
                                        }
                                        else
                                        {
                                            <FluentIcon Value="@(new Regular.Size20.ThumbDislike())" />
                                        }
                                    </FluentButton>

                                    <FluentButton Appearance="Appearance.Stealth" OnClick="@(() => OnChangeRatingAsync(result, AIPromptRating.Positive))">
                                        @if (result.Rating == AIPromptRating.Positive)
                                        {
                                            <FluentIcon Value="@(new IconsFilled.Size20.ThumbLike())" />
                                        }
                                        else
                                        {
                                            <FluentIcon Value="@(new Regular.Size20.ThumbLike())" />
                                        }
                                    </FluentButton>
                                </FluentStack>
                            </FluentStack>
                        </FluentCard>
                }
            }
        </FluentStack>
    }
}
</FluentStack>
