@using Microsoft.FluentUI.AspNetCore.Components.Extensions
<div style="width:100%; height: 500px">
    <FluentStack Style="height: 100%">
        <FluentStack Orientation=Orientation.Vertical Style="margin-bottom: 20px">
            <FluentSlider Label="@GetSpacingLabel()"
                          @bind-Value=_spacing
                          @bind-Value:after="OnUpdateRequestedAsync"
                          Min="10"
                          Max="50"
                          Step="5" S
                          Style="width: 200px; margin-right: 20px" />

            <FluentSlider Label="@GetDurationLabel()"
                          @bind-Value=_duration
                          @bind-Value:after="OnUpdateRequestedAsync"
                          Min="500"
                          Max="2000"
                          Step="100"
                          Style="width: 200px; margin-right: 20px" />

            <FluentSelect Label="Easing Function"
                          TOption="EasingFunction"
                          Items="@(Enum.GetValues<EasingFunction>())"
                          OptionText="@(e => e.ToAttributeValue())"
                          @bind-SelectedOption=_easingFunction
                          @bind-SelectedOption:after="OnUpdateRequestedAsync"
                          Style="width: 200px; margin-right: 20px">
            </FluentSelect>

            <FluentSelect @bind-SelectedOption=_easingMode
                          TOption="EasingMode"
                          Items="@(Enum.GetValues<EasingMode>())"
                          Label="Easing mode"
                          @bind-SelectedOption:after="OnUpdateRequestedAsync"
                          Style="width: 200px; margin-right: 20px" />

            <FluentSwitch Label="Reversed"
                          @bind-Value=_reversed
                          @bind-Value:after="OnUpdateRequestedAsync"
                          Style="margin-right: 20px" />

            <FluentSlider @bind-Value=_variantOpacity
                          @bind-Value:after="OnUpdateRequestedAsync"
                          Style="width: 200px; margin-right: 20px"
                          Min="0.05"
                          Max="1"
                          Step="0.05"
                          Label="Variant opacity" />
        </FluentStack>

        <FluentStack Style="height: 100%" HorizontalAlignment="HorizontalAlignment.Center" VerticalAlignment="VerticalAlignment.Center">
            <FluentCxAnimation @ref=_animation>
                <ChildContent>
                    <AnimationItem Width="100" Height="100">
                        <img width="100" height="100" style="border-radius: 8px" src="./_content/FluentUI.Demo.Shared/slideshowimages/1.jpg" />
                    </AnimationItem>

                    <AnimationItem Width="100" Height="100">
                        <img width="100" height="100" style="border-radius: 8px" src="./_content/FluentUI.Demo.Shared/slideshowimages/2.jpg" />
                    </AnimationItem>

                    <AnimationItem Width="100" Height="100">
                        <img width="100" height="100" style="border-radius: 8px" src="./_content/FluentUI.Demo.Shared/slideshowimages/3.jpg" />
                    </AnimationItem>
                </ChildContent>

                <Layout>
                    <BindStackLayout Spacing="_spacing"
                                     Duration="@TimeSpan.FromMilliseconds(_duration)"
                                     EasingFunction="@_easingFunction"
                                     EasingMode="@_easingMode"
                                     Reversed=@_reversed
                                     VariantOpacity="@_variantOpacity" />
                </Layout>
            </FluentCxAnimation>
        </FluentStack>
    </FluentStack>    
</div>

@code {
    private FluentCxAnimation _animation;
    private int _spacing = 10;
    private int _duration = 500;
    private EasingFunction _easingFunction = EasingFunction.Linear;
    private EasingMode _easingMode = EasingMode.In;
    private bool _reversed = false;
    private double _variantOpacity = 0.05;

    private string GetSpacingLabel() => $"Spacing: {_spacing}px";

    private string GetDurationLabel() => $"Duration: {_duration}ms";

    private async Task OnUpdateRequestedAsync()
    {
        if (_animation is not null)
        {
            await _animation.StopAsync();
            await _animation.StartAsync();
        }
    }
}
