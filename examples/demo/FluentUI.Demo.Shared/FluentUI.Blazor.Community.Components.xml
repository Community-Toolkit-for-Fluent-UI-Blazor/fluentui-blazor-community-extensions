<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentUI.Blazor.Community.Components</name>
    </assembly>
    <members>
        <member name="T:FluentUI.Blazor.Community.Components.AnimatedElement">
            <summary>
            Represents an animated element with properties that can be interpolated over time.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> class provides a set of properties, such as position offsets,
            scaling factors,  rotation, color, opacity, and a generic value, that can be animated using associated <see
            cref="T:FluentUI.Blazor.Community.Components.AnimationState`1"/>  objects. Each property can be updated independently based on its animation state and
            interpolation logic.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AnimatedElement.LerpDouble">
            <summary>
            Reusable interpolators for different property types.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AnimatedElement.LerpColor">
            <summary>
            Reusable color interpolator for string-based colors.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.Id">
            <summary>
            Gets or sets the unique identifier for the animated element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.OffsetX">
            <summary>
            Gets or sets the horizontal offset of the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.OffsetY">
            <summary>
            Gets or sets the vertical offset of the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.ScaleX">
            <summary>
            Gets or sets the horizontal scaling factor of the element. A value of 1.0 represents no scaling.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.ScaleY">
            <summary>
            Gets or sets the vertical scaling factor of the element. A value of 1.0 represents no scaling.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.Rotation">
            <summary>
            Gets or sets the rotation angle of the element in degrees.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.Color">
            <summary>
            Gets or sets the color of the element in a string format (e.g., hex code, RGB, etc.).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.BackgroundColor">
            <summary>
            Gets or sets the background color of the element in a string format (e.g., hex code, RGB, etc.).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.Opacity">
            <summary>
            Gets or sets the opacity of the element, where 0.0 is fully transparent and 1.0 is fully opaque.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.Value">
            <summary>
            Gets or sets a generic value associated with the element, which can be used for various purposes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.OffsetXState">
            <summary>
            Gets or sets the animation state for the horizontal offset property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.OffsetYState">
            <summary>
            Gets or sets the animation state for the vertical offset property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.ScaleXState">
            <summary>
            Gets or sets the animation state for the horizontal scaling factor property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.ScaleYState">
            <summary>
            Gets or sets the animation state for the vertical scaling factor property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.RotationState">
            <summary>
            Gets or sets the animation state for the rotation property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.ColorState">
            <summary>
            Gets or sets the animation state for the color property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.BackgroundColorState">
            <summary>
            Gets or sets the animation state for the background color property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.OpacityState">
            <summary>
            Gets or sets the animation state for the opacity property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.ValueState">
            <summary>
            Gets or sets the animation state for the generic value property.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElement.Update(System.DateTime)">
            <summary>
            Updates the current state of the object by interpolating its properties based on the specified time.
            </summary>
            <remarks>This method updates the properties of the object, such as offsets, scale, rotation, color,
            opacity,  and value, by interpolating their respective states if they are not yet completed. Each property is 
            updated independently based on its associated state and interpolation function.</remarks>
            <param name="now">The current time used to evaluate the interpolation states.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElement.GetDiff(FluentUI.Blazor.Community.Components.AnimatedElement)">
            <summary>
            Computes the differences between the current <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> instance and a specified previous
            instance.
            </summary>
            <remarks>The method compares the following properties: <c>OffsetX</c>, <c>OffsetY</c>, <c>ScaleX</c>,
            <c>ScaleY</c>, <c>Rotation</c>, <c>Color</c>, <c>Opacity</c>, and <c>Value</c>. Only properties with differing
            values are included in the returned dictionary.</remarks>
            <param name="previous">The previous <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> instance to compare against. Cannot be <c>null</c>.</param>
            <returns>A dictionary containing the properties that differ between the current instance and the <paramref
            name="previous"/> instance. The keys represent the property names, and the values represent the current values
            of those properties. If no differences are found, an empty dictionary is returned.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElement.Clone">
            <summary>
            Clones the current <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> instance, creating a new instance with the same property values.
            </summary>
            <returns>Returns the cloned element.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElement.ResetStates">
            <summary>
            Resets all animation states to <c>null</c>, effectively stopping any ongoing animations for the element.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AnimatedElementGroup">
            <summary>
            Represents a group of animated elements that can be laid out and animated together.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AnimatedElementGroup._displayedItem">
            <summary>
            Represents the currently displayed animated elements in the group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElementGroup.Id">
            <summary>
            Gets or sets the unique identifier for the animated element group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElementGroup.AnimatedElements">
            <summary>
            Gets the list of animated elements in the group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElementGroup.LayoutStrategy">
            <summary>
            Gets the layout strategy used to arrange the animated elements within the group.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElementGroup.ApplyLayout(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Applies the specified layout strategy to the displayed item.
            </summary>
            <param name="layoutStrategy">The layout strategy to apply. If <see langword="null"/>, a default layout strategy is used.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElementGroup.ApplyStartTime(System.DateTime)">
            <summary>
            Applies the specified start time to the current layout strategy, if one is defined.
            </summary>
            <remarks>This method delegates the operation to the <see cref="P:FluentUI.Blazor.Community.Components.AnimatedElementGroup.LayoutStrategy"/> if it is not null.
            Ensure that a layout strategy is set before calling this method to avoid no-op behavior.</remarks>
            <param name="now">The start time to apply, represented as a <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElementGroup.GetDiff(System.DateTime,System.Collections.Concurrent.ConcurrentQueue{FluentUI.Blazor.Community.Components.JsonAnimatedElement},System.Collections.Generic.Dictionary{System.String,FluentUI.Blazor.Community.Components.AnimatedElement})">
            <summary>
            Computes the differences between the current state of animated elements and their previous state,  and enqueues
            the changes as JSON-serializable objects for further processing.
            </summary>
            <remarks>This method processes animated elements in parallel to compute their differences. If an
            element has  changes compared to its previous state, the differences are added to the queue as a <see
            cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement"/>  object. The method also updates the <paramref name="previousElements"/> dictionary
            with the current state  of the modified elements.</remarks>
            <param name="now">The current timestamp used to update the state of each animated element.</param>
            <param name="queue">A thread-safe queue to which the computed differences are enqueued as <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement"/> objects.</param>
            <param name="previousElements">A dictionary containing the previous state of animated elements, keyed by their unique identifiers.  This
            dictionary is updated with the current state of elements that have changes.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElementGroup.SetLayoutStrategy(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Sets the layout strategy for arranging the animated elements within the group.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElementGroup.SetMaxDisplayedItems(System.Nullable{System.Int32})">
            <summary>
            Sets the maximum number of animated elements to be displayed in the group.
            </summary>
            <param name="maxDisplayedItems">Maximum number of animated elements to be displayed in the group.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AnimationState`1">
            <summary>
            Represents a set of animation states, including start and end values, duration, easing functions, and interpolation
            logic.
            </summary>
            <remarks>This class is designed to facilitate animations by defining the start and end values, the duration of
            the animation,  and the easing function and mode used to interpolate between the values. The <see
            cref="M:FluentUI.Blazor.Community.Components.AnimationState`1.Interpolate(System.DateTime,FluentUI.Blazor.Community.Components.IInterpolator{`0})"/> method calculates  the interpolated value at a specific point in time based on these
            parameters.</remarks>
            <typeparam name="T">The type of the values being interpolated. This type must support the interpolation strategy defined by the provided
            interpolator.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationState`1.StartValue">
            <summary>
            Gets or sets the initial value of the operation or process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationState`1.EndValue">
            <summary>
            Gets or sets the end value of the range or operation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationState`1.Duration">
            <summary>
            Gets or sets the duration of the operation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationState`1.StartTime">
            <summary>
            Gets or sets the start time of the event.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationState`1.EasingFunction">
            <summary>
            Gets or sets the easing function used to interpolate values during animations.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationState`1.EasingMode">
            <summary>
            Gets or sets the easing mode that determines the interpolation behavior of the animation.
            </summary>
            <remarks>The easing mode specifies how the animation interpolates between its start and end values. 
            Common modes include <see cref="F:FluentUI.Blazor.Community.Components.EasingMode.In"/>, <see cref="F:FluentUI.Blazor.Community.Components.EasingMode.Out"/>, and <see
            cref="F:FluentUI.Blazor.Community.Components.EasingMode.InOut"/>.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationState`1.Interpolate(System.DateTime,FluentUI.Blazor.Community.Components.IInterpolator{`0})">
            <summary>
            Calculates the interpolated value at a specified point in time based on the elapsed duration, easing function,
            and interpolation strategy.
            </summary>
            <remarks>The interpolation progress is determined by the elapsed time since the start time, relative
            to the  total duration. The progress is then adjusted using the specified easing function and mode before  being
            passed to the interpolator.</remarks>
            <param name="now">The current time used to calculate the interpolation progress.</param>
            <param name="interpolator">An object that defines the interpolation strategy for transitioning  between the start and end values.</param>
            <returns>The interpolated value of type <typeparamref name="T"/> at the specified time.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationState`1.ApplyEasing(FluentUI.Blazor.Community.Components.EasingFunction,FluentUI.Blazor.Community.Components.EasingMode,System.Double)">
            <summary>
            Applies the specified easing function and mode to calculate the eased value for the given time.
            </summary>
            <param name="easingFunction">The easing function to use, such as <see cref="F:FluentUI.Blazor.Community.Components.EasingFunction.Linear"/> or <see cref="F:FluentUI.Blazor.Community.Components.EasingFunction.Bounce"/>.</param>
            <param name="easingMode">The easing mode to apply, such as <see cref="F:FluentUI.Blazor.Community.Components.EasingMode.In"/>, <see cref="F:FluentUI.Blazor.Community.Components.EasingMode.Out"/>, or <see
            cref="F:FluentUI.Blazor.Community.Components.EasingMode.InOut"/>.</param>
            <param name="time">The normalized time value, typically between 0.0 and 1.0, representing the progress of the animation.</param>
            <returns>The eased value corresponding to the specified time, calculated using the provided easing function and mode.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the specified combination of <paramref name="easingFunction"/> and <paramref name="easingMode"/> is
            not supported.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationState`1.Apply(`0,`0,System.DateTime,System.TimeSpan)">
            <summary>
            Applies the specified animation parameters to the current instance, updating its state accordingly.
            </summary>
            <param name="startValue">The starting value of the animation. Defaults to the type's default value if not specified.</param>
            <param name="endValue">The ending value of the animation. Defaults to the type's default value if not specified.</param>
            <param name="startTime">The start time of the animation.</param>
            <param name="duration">The duration of the animation.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.BackEasing">
            <summary>
            Provides easing functions that implement a "back" motion, where the animation overshoots its target and then returns
            to it. These functions are commonly used in animations to create a spring-like effect.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BackEasing.EaseIn(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in interpolation of a value using a back easing function.
            </summary>
            <param name="t">The current time or position, where 0 represents the start and <paramref name="d"/> represents the end.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <param name="s">The overshoot amount, which controls the extent of the "back" effect. Defaults to 1.70158.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BackEasing.EaseOut(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an "ease-out" interpolation to calculate a value based on the specified parameters.
            </summary>
            <remarks>This method implements a "back" easing function with an ease-out behavior, where the
            interpolation starts quickly and decelerates toward the end. The optional <paramref name="s"/> parameter allows
            customization of the overshoot effect, with higher values producing a more pronounced overshoot.</remarks>
            <param name="t">The current time or position, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <param name="s">An optional overshoot parameter that controls the intensity of the easing effect. Defaults to 1.70158.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BackEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an easing function that combines both "ease-in" and "ease-out" effects to calculate an interpolated
            value.
            </summary>
            <remarks>This method uses a combination of "ease-in" and "ease-out" easing, making it suitable for
            animations that require a smooth acceleration at the start and deceleration at the end. The optional parameter
            <paramref name="s"/> allows customization of the overshoot effect, where higher values result in a more
            pronounced easing curve.</remarks>
            <param name="t">The current time or position in the animation, where 0 represents the start and <paramref name="d"/> represents
            the end.</param>
            <param name="b">The starting value of the property being animated.</param>
            <param name="c">The total change in the value of the property being animated.</param>
            <param name="d">The total duration of the animation.</param>
            <param name="s">An optional overshoot parameter that controls the intensity of the easing effect. Defaults to 1.70158.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.BounceEasing">
            <summary>
            Provides easing functions that simulate a bouncing motion for animations.
            </summary>
            <remarks>This class includes static methods for calculating bounce easing values, which are commonly used in
            animations to create effects that mimic the behavior of a bouncing object. The easing functions include: <list
            type="bullet"> <item><term>EaseOut</term>: Starts quickly and decelerates, simulating a bounce at the end.</item>
            <item><term>EaseIn</term>: Starts slowly and accelerates, simulating a bounce at the beginning.</item>
            <item><term>EaseInOut</term>: Combines the effects of EaseIn and EaseOut, simulating a bounce at both the beginning
            and end.</item> </list> These methods are useful for creating visually appealing animations in user interfaces,
            games, or other graphical applications.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BounceEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an easing-out function to interpolate a value over time, creating a decelerating motion.
            </summary>
            <remarks>This method uses a piecewise easing-out function based on the "bounce" easing equation.  It
            is commonly used in animations to create a natural deceleration effect.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BounceEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in value for a given time, using an easing function.
            </summary>
            <remarks>This method applies an easing-in effect, which starts the interpolation slowly and
            accelerates as it progresses. The easing behavior is determined by the complementary <see cref="M:FluentUI.Blazor.Community.Components.BounceEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)"/>
            function.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BounceEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates an eased value using a combination of ease-in and ease-out interpolation.
            </summary>
            <remarks>This method combines ease-in and ease-out easing functions to create a smooth transition. The
            first half of the duration applies an ease-in effect, while the second half applies an ease-out
            effect.</remarks>
            <param name="t">The current time or position within the easing duration. Must be between 0 and <paramref name="d"/>.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the easing operation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>, smoothly transitioning between ease-in and
            ease-out phases.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CircularEasing">
            <summary>
            Provides easing functions based on a circular mathematical formula.
            </summary>
            <remarks>Circular easing functions create smooth transitions that mimic the motion of an object following a
            circular path. These functions are commonly used in animations to achieve natural-looking acceleration and
            deceleration effects.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CircularEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in value for a given time using a circular easing function.
            </summary>
            <param name="t">The current time, or position, within the easing duration. Must be between 0 and <paramref name="d"/>.</param>
            <param name="b">The starting value of the property being eased.</param>
            <param name="c">The total change in the value of the property being eased.</param>
            <param name="d">The total duration of the easing operation. Must be greater than 0.</param>
            <returns>The calculated eased-in value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CircularEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an ease-out interpolation to calculate a value based on the specified parameters.
            </summary>
            <remarks>The ease-out interpolation starts quickly and decelerates toward the end, creating a smooth
            transition. Ensure that <paramref name="d"/> is greater than zero to avoid division by zero.</remarks>
            <param name="t">The current time or position, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CircularEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates an eased value using an "ease-in-out" interpolation, which provides a smooth transition  that
            accelerates at the beginning and decelerates at the end.
            </summary>
            <remarks>This method is commonly used in animations or transitions to create a natural acceleration
            and deceleration effect. The input <paramref name="t"/> is normalized relative to the duration <paramref
            name="d"/> to calculate the eased value.</remarks>
            <param name="t">The current time or position within the easing duration. Must be between 0 and <paramref name="d"/>.</param>
            <param name="b">The starting value of the property being eased.</param>
            <param name="c">The total change in the value of the property being eased.</param>
            <param name="d">The total duration of the easing operation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>, based on the "ease-in-out" easing function.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CubicEasing">
            <summary>
            Provides cubic easing functions for animations, including easing in, easing out, and easing in and out.
            </summary>
            <remarks>Cubic easing functions are commonly used in animations to create smooth transitions. These functions
            calculate the interpolated value based on the cubic easing formula, which determines the rate of change over time.
            The methods in this class allow for acceleration, deceleration, or a combination of both.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CubicEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in interpolation value for a given time, using a cubic easing function.
            </summary>
            <remarks>This method uses a cubic easing-in function, which starts the motion slowly and accelerates
            as time progresses.</remarks>
            <param name="t">The current time, or position, within the easing duration. Must be between 0 and <paramref name="d"/>.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the easing operation. Must be greater than 0.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CubicEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an ease-out cubic interpolation to calculate a value based on the given time and range.
            </summary>
            <param name="t">The current time or position, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the range.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CubicEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates an eased value using a cubic ease-in-out interpolation.
            </summary>
            <param name="t">The current time or position, where 0 represents the start and <paramref name="d"/> represents the end.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.EasingFunction">
            <summary>
            Represents the various easing functions available for animations.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Linear">
            <summary>
            Represents a linear easing function, which results in a constant speed animation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Back">
            <summary>
            Represents a "back" easing function, which creates an animation that overshoots its target and then settles back.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Bounce">
            <summary>
            Represents a "bounce" easing function, which creates an animation that simulates a bouncing effect.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Circular">
            <summary>
            Represents a "circular" easing function, which creates an animation that follows a circular path.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Cubic">
            <summary>
            Represents a "cubic" easing function, which creates an animation that accelerates and decelerates in a cubic manner.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Elastic">
            <summary>
            Represents an "elastic" easing function, which creates an animation that simulates an elastic effect.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Exponential">
            <summary>
            Represents an "exponential" easing function, which creates an animation that accelerates and decelerates exponentially.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Quadratic">
            <summary>
            Represents a "quadratic" easing function, which creates an animation that accelerates and decelerates in a quadratic manner.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Quartic">
            <summary>
            Represents a "quartic" easing function, which creates an animation that accelerates and decelerates in a quartic manner.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Quintic">
            <summary>
            Represents a "quintic" easing function, which creates an animation that accelerates and decelerates in a quintic manner.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.EasingMode">
            <summary>
            Represents the easing mode for animations, indicating how the animation progresses over time.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingMode.In">
            <summary>
            Represents an easing mode where the animation starts slowly and accelerates towards the end.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingMode.Out">
            <summary>
            Represents an easing mode where the animation starts quickly and decelerates towards the end.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingMode.InOut">
            <summary>
            Represents an easing mode where the animation starts slowly, accelerates in the middle, and then decelerates towards the end.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ElasticEasing">
            <summary>
            Provides easing functions that produce an elastic motion effect, commonly used in animations.
            </summary>
            <remarks>Elastic easing functions create a motion effect that resembles a spring oscillating back and forth
            before settling. These functions are useful for creating dynamic and visually appealing animations.  The class
            includes three easing modes: <list type="bullet"> <item> <term>EaseIn</term> <description>Starts the motion slowly,
            then accelerates with an elastic effect.</description> </item> <item> <term>EaseOut</term> <description>Starts the
            motion quickly, then decelerates with an elastic effect.</description> </item> <item> <term>EaseInOut</term>
            <description>Combines the effects of <c>EaseIn</c> and <c>EaseOut</c>, starting and ending with an elastic
            effect.</description> </item> </list></remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ElasticEasing.m">
            <summary>
            Represents a constant multiplier used in calculations.
            </summary>
            <remarks>The value is derived from multiplying 0.3 by 1.5.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ElasticEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in value for a given time, using an elastic easing function.
            </summary>
            <remarks>This method uses an elastic easing function, which produces an oscillating effect that
            gradually decreases in amplitude as the animation progresses.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the property being animated.</param>
            <param name="c">The total change in the value of the property being animated.</param>
            <param name="d">The total duration of the animation.</param>
            <returns>The calculated eased-in value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ElasticEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-out value of a parameter over time using an elastic easing function.
            </summary>
            <remarks>This method implements an elastic easing-out function, which starts quickly and then
            decelerates  with oscillations as it approaches the target value. It is commonly used in animations to create  a
            spring-like effect.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the parameter.</param>
            <param name="c">The total change in the parameter's value.</param>
            <param name="d">The total duration of the easing operation.</param>
            <returns>The calculated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ElasticEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an easing function that combines both "ease-in" and "ease-out" effects to calculate a value  based on
            the progression of time.
            </summary>
            <remarks>This method uses a sinusoidal easing function to create a smooth transition effect. The
            "ease-in" effect  accelerates the value at the beginning, while the "ease-out" effect decelerates it toward the
            end.</remarks>
            <param name="t">The current time or position in the animation, where 0 represents the start and <paramref name="d"/> represents
            the end.</param>
            <param name="b">The starting value of the property being animated.</param>
            <param name="c">The total change in the value of the property being animated.</param>
            <param name="d">The total duration of the animation.</param>
            <returns>The calculated value of the property at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ExponentialEasing">
            <summary>
            Provides methods for performing exponential easing calculations, commonly used in animations to create smooth
            transitions between values.
            </summary>
            <remarks>Exponential easing functions are used to interpolate values over time, producing transitions that
            start or end with a rapid change in value. These methods are useful in scenarios such as animating UI elements or
            simulating motion effects.  The class includes three easing modes: <list type="bullet"> <item> <term>EaseIn</term>
            <description>Starts the transition slowly and accelerates towards the end.</description> </item> <item>
            <term>EaseOut</term> <description>Starts the transition quickly and decelerates towards the end.</description>
            </item> <item> <term>EaseInOut</term> <description>Combines EaseIn and EaseOut, starting and ending slowly with
            acceleration in the middle.</description> </item> </list></remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExponentialEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in value for a given time using an exponential easing function.
            </summary>
            <remarks>This method uses an exponential easing function, which starts slowly and accelerates  as time
            progresses. If <paramref name="t"/> is 0, the method returns <paramref name="b"/>.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the property being eased.</param>
            <param name="c">The total change in the value of the property being eased.</param>
            <param name="d">The total duration of the easing, in the same units as <paramref name="t"/>.</param>
            <returns>The calculated eased-in value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExponentialEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an exponential easing-out function to interpolate a value over time.
            </summary>
            <remarks>This method implements an exponential easing-out function, which starts quickly and
            decelerates toward the end of the duration. If <paramref name="t"/> equals <paramref name="d"/>, the method
            returns <paramref name="b"/> + <paramref name="c"/>.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation. Must be greater than 0.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExponentialEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates an eased value using an exponential easing function with both "ease-in" and "ease-out" behavior.
            </summary>
            <remarks>This method applies an exponential easing function that accelerates at the beginning
            ("ease-in") and decelerates at the end ("ease-out"). The easing effect is symmetric, with the midpoint of the
            animation being the transition between acceleration and deceleration.</remarks>
            <param name="t">The current time or position within the animation, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the property being animated.</param>
            <param name="c">The total change in the value of the property being animated.</param>
            <param name="d">The total duration of the animation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LinearEasing">
            <summary>
            Represents a linear easing function where the output is directly proportional to the input.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LinearEasing.Ease(System.Double)">
            <summary>
            Calculates the linear easing value for a given time parameter t.
            </summary>
            <param name="t">Value to ease.</param>
            <returns>Returns the eased value.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.QuadraticEasing">
            <summary>
            Represents a quadratic easing function for animations.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuadraticEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in value for a given time, using a quadratic easing function.
            </summary>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the property being eased.</param>
            <param name="c">The total change in the value of the property being eased.</param>
            <param name="d">The total duration of the easing operation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuadraticEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an ease-out interpolation to calculate a value based on the specified parameters.
            </summary>
            <remarks>The ease-out interpolation starts quickly and decelerates toward the end of the duration.
            Ensure that <paramref name="d"/> is not zero to avoid division by zero errors.</remarks>
            <param name="t">The current time or position, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuadraticEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an ease-in-out quadratic interpolation to calculate a value based on the progression of time.
            </summary>
            <remarks>This method uses a quadratic easing function to smoothly transition between the starting and
            ending values. The easing effect accelerates at the beginning, decelerates in the middle, and accelerates again
            toward the end.</remarks>
            <param name="t">The current time or position within the duration, where 0 represents the start and <paramref name="d"/>
            represents the end.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.QuarticEasing">
            <summary>
            Provides quartic easing functions for animations, which calculate intermediate values based on a quartic polynomial.
            These functions are commonly used to create smooth transitions in animations.
            </summary>
            <remarks>The class includes three easing functions: <list type="bullet"> <item> <term>EaseIn</term>
            <description>Starts the motion slowly and accelerates as it progresses.</description> </item> <item>
            <term>EaseOut</term> <description>Starts the motion quickly and decelerates as it progresses.</description> </item>
            <item> <term>EaseInOut</term> <description>Combines the behaviors of EaseIn and EaseOut, starting and ending slowly
            while accelerating in the middle.</description> </item> </list> Each function takes the same parameters,
            representing the current time, start value, change in value, and duration of the animation.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuarticEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in value for a given time using a quartic easing function.
            </summary>
            <remarks>This method applies a quartic easing-in function, which starts the motion slowly  and
            accelerates as time progresses. It is commonly used in animations to create  a smooth, natural-looking
            transition.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the easing operation. Must be greater than 0.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuarticEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an ease-out cubic interpolation to calculate a value based on the progression of time.
            </summary>
            <param name="t">The current time or position in the interpolation, where 0 represents the start and <paramref name="d"/>
            represents the end.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration of the interpolation.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuarticEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates an eased value using an ease-in-out quartic interpolation.
            </summary>
            <remarks>This method applies an ease-in-out quartic easing function, which accelerates at the
            beginning and decelerates at the end. The input <paramref name="t"/> is normalized relative to <paramref
            name="d"/> to calculate the eased value.</remarks>
            <param name="t">The current time or position within the interpolation, where 0 represents the start and <paramref name="d"/>
            represents the end.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration of the interpolation.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.QuinticEasing">
            <summary>
            Provides easing functions based on a quintic polynomial (t^5) for smooth animations.
            </summary>
            <remarks>Quintic easing functions are commonly used in animations to create smooth transitions. These
            functions calculate intermediate values based on a time parameter, allowing for different easing effects such as
            accelerating, decelerating, or a combination of both.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuinticEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased value for a given time using an "EaseIn" quintic easing function.
            </summary>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the property being eased.</param>
            <param name="c">The total change in the value of the property being eased.</param>
            <param name="d">The total duration of the easing operation.</param>
            <returns>The calculated eased value at the specified time.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuinticEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an easing-out function to interpolate a value over time, creating a decelerating motion.
            </summary>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuinticEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an ease-in-out quintic interpolation to the given time value.
            </summary>
            <remarks>This method uses a quintic easing function to create a smooth transition that accelerates at
            the start,  decelerates at the end, and maintains a steady rate in the middle.</remarks>
            <param name="t">The current time, or position, within the animation. Must be between 0 and <paramref name="d"/>.</param>
            <param name="b">The starting value of the property being animated.</param>
            <param name="c">The total change in the value of the property being animated.</param>
            <param name="d">The total duration of the animation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ILayoutStrategy">
            <summary>
            Represents a strategy for laying out animated elements within a container.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ILayoutStrategy.Immediate">
            <summary>
            Gets or sets a value indicating whether the layout changes should be applied immediately without animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ILayoutStrategy.Duration">
            <summary>
            Gets or sets the duration of the layout animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ILayoutStrategy.StartTime">
            <summary>
            Gets the start time of the current layout.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ILayoutStrategy.ApplyLayout(System.Collections.Generic.List{FluentUI.Blazor.Community.Components.AnimatedElement})">
            <summary>
            Applies the layout strategy to the provided list of animated elements.
            </summary>
            <param name="elements">Elements to animate within this layout instance.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ILayoutStrategy.ApplyStartTime(System.DateTime)">
            <summary>
            Applies the start time for the layout animation.
            </summary>
            <param name="now">Start time of the layout animation.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ILayoutStrategy.EasingFunction">
            <summary>
            Gets or sets the easing function used for the layout animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ILayoutStrategy.EasingMode">
            <summary>
            Gets or sets the easing mode used for the layout animation.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ILayoutStrategy.SetDimensions(System.Double,System.Double)">
            <summary>
            Sets the dimensions of the container in which the layout is applied.
            </summary>
            <param name="width">Width of the container.</param>
            <param name="height">Height of the container.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ColorInterpolator">
            <summary>
            Provides functionality to interpolate between two <see cref="T:System.Drawing.Color"/> values.
            </summary>
            <remarks>This class performs linear interpolation (lerp) on the RGBA components of the colors. It is useful
            for creating smooth transitions between colors, such as in animations or gradients.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ColorInterpolator.Lerp(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DoubleInterpolator">
            <summary>
            Represents an interpolator for double values, providing linear interpolation functionality.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DoubleInterpolator.Lerp(System.Double,System.Double,System.Double)">
            <inheritdoc/> 
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FloatInterpolator">
            <summary>
            Represents an interpolator for floating-point values.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FloatInterpolator.Lerp(System.Single,System.Single,System.Double)">
            <inheritdoc/> 
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IInterpolator`1">
            <summary>
            Represents a generic interface for interpolating between two values of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the value to interpolate.</typeparam>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IInterpolator`1.Lerp(`0,`0,System.Double)">
            <summary>
            Linearly interpolates between two values based on a weighting factor.
            </summary>
            <remarks>The behavior of the interpolation depends on the implementation of the type <typeparamref
            name="T"/>.  Ensure that the type supports the required operations for linear interpolation.</remarks>
            <param name="start">The starting value of the interpolation.</param>
            <param name="end">The ending value of the interpolation.</param>
            <param name="amount">A value between 0.0 and 1.0 that specifies the weight of the <paramref name="end"/> value.  A value of 0.0
            returns <paramref name="start"/>, and a value of 1.0 returns <paramref name="end"/>.</param>
            <returns>The interpolated value between <paramref name="start"/> and <paramref name="end"/> based on the <paramref
            name="amount"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.StringColorInterpolator">
            <summary>
            
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.StringColorInterpolator.Lerp(System.String,System.String,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement">
            <summary>
            Represents an animated element with properties that can be serialized to JSON for animation purposes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.Id">
            <summary>
            Gets or sets the unique identifier for the animated element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.X">
            <summary>
            Gets or sets the horizontal position of the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.Y">
            <summary>
            Gets or sets the vertical position of the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.ScaleX">
            <summary>
            Gets or sets the horizontal scaling factor of the element. A value of 1.0 represents no scaling.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.ScaleY">
            <summary>
            Gets or sets the vertical scaling factor of the element. A value of 1.0 represents no scaling.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.Rotation">
            <summary>
            Gets or sets the rotation angle of the element in degrees.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.Color">
            <summary>
            Gets or sets the color of the element in a string format (e.g., hex code, RGB, etc.).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.BackgroundColor">
            <summary>
            Gets or sets the background color of the element in a string format (e.g., hex code, RGB, etc.).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.Opacity">
            <summary>
            Gets or sets the opacity of the element, where 1.0 is fully opaque and 0.0 is fully transparent.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.Value">
            <summary>
            Gets or sets a generic value associated with the element, which can be used for custom purposes.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AnimationGroup">
            <summary>
            Represents a group of animated items within a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.AnimationGroup"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationGroup.Layout">
            <summary>
            Gets or sets the layout to apply to the animated items in this group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationGroup.ChildContent">
            <summary>
            Gets or sets the child content of the animation group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationGroup.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationGroup.MaxDisplayedItems">
            <summary>
            Gets or sets the maximum number of items to display in the group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationGroup.AnimatedElementGroup">
            <summary>
            Gets the internal animated element group used to manage the animated items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationGroup.InternalCss">
            <summary>
            Gets the internal CSS classes for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.AddElement(FluentUI.Blazor.Community.Components.AnimationItem)">
            <summary>
            Adds an animated item to the group if it is not already present.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.RemoveElement(FluentUI.Blazor.Community.Components.AnimationItem)">
            <summary>
            Removes an animated item from the group.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.RemoveLayout">
            <summary>
            Removes the layout strategy from the group.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.SetLayout(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Sets the layout strategy for the group.
            </summary>
            <param name="layout">Layout to use to animate the items in the group.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.ApplyLayout(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Applies the specified layout strategy to the collection of animated elements.
            </summary>
            <remarks>If no layout strategy is provided, the method uses the default grid layout strategy. The
            method processes the collection of items and applies the layout to their associated animated elements.</remarks>
            <param name="layoutStrategy">The layout strategy to apply. If <see langword="null"/>, a default grid layout strategy is used.</param>
            <returns>A list of animated elements with the applied layout.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.ApplyStartTime(System.DateTime)">
            <summary>
            Applies the specified start time to all animated elements in the group.
            </summary>
            <param name="now">Start time.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.SetMaxDisplayedItems(System.Int32)">
            <summary>
            Sets the maximum number of displayed items if it has not already been set.
            </summary>
            <param name="maxDisplayedItems">Maximum number of displayed items.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AnimationItem">
            <summary>
            Represents an item that can be animated within a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> or <see cref="P:FluentUI.Blazor.Community.Components.AnimationItem.AnimationGroup"/> component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.AnimationItem"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.AnimationGroup">
            <summary>
            Gets or sets the parent <see cref="P:FluentUI.Blazor.Community.Components.AnimationItem.AnimationGroup"/> component, if any.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.ChildContent">
            <summary>
            Gets or sets the child content of the animation item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.BackgroundColor">
            <summary>
            Gets or sets the background color of the animation item.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Color">
            <summary>
            Gets or sets the color of the animation item.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.OffsetX">
            <summary>
            Gets or sets the horizontal offset value.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.OffsetY">
            <summary>
            Gets or sets the vertical offset value.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Opacity">
            <summary>
            Gets or sets the opacity of the animation item.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Rotation">
            <summary>
            Gets or sets the rotation angle in degrees.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.ScaleX">
            <summary>
            Gets or sets the horizontal scaling factor.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.ScaleY">
            <summary>
            Gets or sets the vertical scaling factor.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Value">
            <summary>
            Gets or sets the value associated with the animation item.
            </summary>
            <remarks>This parameter is animatable. This parameter should be used for animating an item which represents a chart item.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Width">
            <summary>
            Gets or sets the width of the animation item in pixels.
            </summary>
            <remarks>This parameter is not animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Height">
            <summary>
            Gets or sets the height of the animation item in pixels.
            </summary>
            <remarks>This parameter is not animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Left">
            <summary>
            Gets or sets the left position of the animation item.
            </summary>
            <remarks>This parameter is not animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Top">
            <summary>
            Gets or sets the top position of the animation item.
            </summary>
            <remarks>This parameter is not animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Right">
            <summary>
            Gets or sets the right position of the animation item.
            </summary>
            <remarks>This parameter is not animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Bottom">
            <summary>
            Gets or sets the bottom position of the animation item.
            </summary>
            <remarks>This parameter is not animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.ZIndex">
            <summary>
            Gets or sets the z-index of the animation item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.InternalCss">
            <summary>
            Gets the css class for the animation item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.InternalStyle">
            <summary>
            Gets the inline style for the animation item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.AnimatedElement">
            <summary>
            Gets the <see cref="P:FluentUI.Blazor.Community.Components.AnimationItem.AnimatedElement"/> representation of the current state of the animation item.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationItem.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationItem.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxAnimation">
            <summary>
            Represents a container for animating child elements using various layout strategies.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._isRendered">
            <summary>
            Reprensents a value indicating whether the component has been rendered.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._tickCount">
            <summary>
            Represents the number of ticks from the animation engine.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._hasTicked">
            <summary>
            Represents a value indicating whether the animation has ticked at least once.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._hasMaxDisplayedItemsChanged">
            <summary>
            Represents a value indicating whether the MaxDisplayedItems parameter has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._layouts">
            <summary>
            Represents the layout strategy used for animating elements.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation.JavaScriptModulePath">
            <summary>
            Represents the javascript module file path for animation handling.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._module">
            <summary>
            Represents the module reference for JavaScript interop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._hasLoopChanged">
            <summary>
            Represents a flag indicating if the loop parameter has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._hasSizeChanged">
            <summary>
            Represents a flag indicating if the width or height parameters have changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._dotNetRef">
            <summary>
            Represents the dotnet object reference for JavaScript interop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._animationEngine">
            <summary>
            Represents the animation engine instance.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._immediate">
            <summary>
            Represents whether the animation should run immediately without any transition duration.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._items">
            <summary>
            Represents the list of animation items managed by this animation container.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.JSRuntime">
            <summary>
            Gets or sets the javaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.ChildContent">
            <summary>
            Gets or sets the content to be rendered inside this component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.HideWhenNotRunning">
            <summary>
            Gets or sets a value indicating whether the animation container should be hidden when not running.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.Layout">
            <summary>
            Gets or sets the layout content to be rendered inside this component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.Loop">
            <summary>
            Gets or sets a value indicating whether the animation should loop continuously.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.Width">
            <summary>
            Gets or sets the width of the animation container in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.Height">
            <summary>
            Gets or sets the height of the animation container in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.MaxDisplayedItems">
            <summary>
            Gets or sets the maximum number of items to display in the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationStarted">
            <summary>
            Gets or sets the event callback that is invoked when the animation starts.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationStopped">
            <summary>
            Gets or sets the event callback that is invoked when the animation stops.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationPaused">
            <summary>
            Gets or sets the event callback that is invoked when the animation is paused.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationResumed">
            <summary>
            Gets or sets the event callback that is invoked when the animation is resumed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationLooped">
            <summary>
            Gets or sets the event callback that is invoked when the animation loop is completed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationCompleted">
            <summary>
            Gets or sets the event callback that is invoked when the animation is completed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnLayoutChanged">
            <summary>
            Gets or sets the event callback that is invoked when the layout changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.InternalCss">
            <summary>
            Gets or sets the internal css class for the animation container.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.InternalStyle">
            <summary>
            Gets or sets the inline style for the animation container, including width and height CSS variables.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.InvokeAsync(Microsoft.AspNetCore.Components.EventCallback)">
            <summary>
            Invokes the specified <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> asynchronously if it has a delegate.
            </summary>
            <remarks>If the <paramref name="callback"/> does not have a delegate, the method completes without
            invoking anything.</remarks>
            <param name="callback">The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> to invoke. Must have a delegate to be invoked.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.AddElement(FluentUI.Blazor.Community.Components.AnimationItem)">
            <summary>
            Adds an animated element to the animation engine for management and rendering.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.RemoveElement(FluentUI.Blazor.Community.Components.AnimationItem)">
            <summary>
            Removes an animated element from the animation engine.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.AddGroup(FluentUI.Blazor.Community.Components.AnimationGroup)">
            <summary>
            Adds an animation group to the animation container.
            </summary>
            <param name="group">Group to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.RemoveGroup(FluentUI.Blazor.Community.Components.AnimationGroup)">
            <summary>
            Removes an animation group from the animation container.
            </summary>
            <param name="group">Group to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.SetLayoutAsync(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Sets the layout strategy for the animation engine.
            </summary>
            <remarks>The specified layout strategy is updated with the current dimensions of the  object and then
            applied to the animation engine. Ensure that the layout strategy  is compatible with the animation engine's
            requirements.</remarks>
            <param name="layoutBase">The layout strategy to be applied. This determines how the layout dimensions  are configured and animated.
            Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.RemoveLayout(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Removes the current layout strategy from the animation engine.
            </summary>
            <param name="value">The layout to remove from the component.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnLoopCompletedAsync">
            <summary>
            Occurs when the animation loop is completed.
            </summary>
            <remarks>This method reset the elasped time of the layout.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationCompletedAsync">
            <summary>
            Occurs when the animation is completed.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationFrame">
            <summary>
            Occurs on each animation frame to update the animated elements and return their current state.
            </summary>
            <returns>Returns the elements to be animated.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.PauseAsync">
            <summary>
            Pauses the animation.
            </summary>
            <returns>Returns a task which pauses the animation when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.ResumeAsync">
            <summary>
            Resumes the animation associated with the current instance.
            </summary>
            <returns>Returns a task which resumes the animation when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.StopAsync">
            <summary>
            Stops the animation associated with the current instance.
            </summary>
            <returns>Returns a task which stops the animation when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.SetDurationAsync(System.Double)">
            <summary>
            Asynchronously sets the duration for the specified animation.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.SetImmediateAsync(System.Boolean)">
            <summary>
            Sets whether the animation should run immediately without any transition duration.
            </summary>
            <param name="immediate">Value indicating that the animation is immediate.</param>
            <returns>Returns a task which sets the duration of the animation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.StartAsync">
            <summary>
            Starts the animation by invoking the JavaScript function with the necessary parameters.
            </summary>
            <returns>Returns a task which starts the animation when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.RestartAsync">
            <summary>
            Stops the current animation and starts it again asynchronously.
            </summary>
            <remarks>Use this method to reset the animation to its initial state and begin playback from the
            start. If the animation is not currently running, this method starts it as a new animation.</remarks>
            <returns>A task that represents the asynchronous restart operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AnimatedLayoutBase">
            <summary>
            Represents the base class for animated layout strategies used in conjunction with <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> and <see cref="T:FluentUI.Blazor.Community.Components.AnimationGroup"/> components.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AnimatedLayoutBase._hasImmediateChanged">
            <summary>
            Represents whether the <see cref="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Immediate"/> property has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AnimatedLayoutBase._lastDuration">
            <summary>
            Represents the last set duration to detect changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Duration">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Group">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.AnimationGroup"/> component, if any.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Animation">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> component, if any.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.MorphingLayout">
            <summary>
            Gets or sets the parent <see cref="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.MorphingLayout"/> component, if any.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.StartTime">
            <summary>
            Gets the start time of the current layout application.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.EasingFunction">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.EasingMode">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Width">
            <summary>
            Gets the width of the container where the layout is applied.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Height">
            <summary>
            Gets the height of the container where the layout is applied.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Immediate">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.ImmediateChanged">
            <summary>
            Gets or sets a callback that is invoked when the <see cref="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Immediate"/> property changes.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.ApplyLayout(System.Collections.Generic.List{FluentUI.Blazor.Community.Components.AnimatedElement})">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.InternalUpdate(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <summary>
            Performs an update operation on the specified animated element, ensuring it is marked as running before
            updating.
            </summary>
            <param name="index">The zero-based index indicating the starting position for the update operation.</param>
            <param name="count">The number of elements to update, starting from the specified index.</param>
            <param name="animatedElement">The animated element to update. Must not be null.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <summary>
            Updates the specified animated element's properties based on its index and the total count of elements.
            </summary>
            <param name="index">Index of the element in the layout.</param>
            <param name="count">Total number of elements in the layout</param>
            <param name="animatedElement">Element to update.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.ApplyStartTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.SetDimensions(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.CreateState``1(``0,``0)">
            <summary>
            Creates a new animation state with the specified start and end values.
            </summary>
            <typeparam name="T">The type of the animation values. Must be a value type.</typeparam>
            <param name="startValue">The initial value of the animation.</param>
            <param name="endValue">The final value of the animation.</param>
            <returns>An <see cref="T:FluentUI.Blazor.Community.Components.AnimationState`1"/> object representing the animation state,  initialized with the specified
            start and end values, as well as the current  duration, start time, easing function, and easing mode.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.BindStackLayout">
            <summary>
            Represents a layout that stacks elements with specified offsets and spacing, optionally reversing the order and applying variant opacity.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.BindStackLayout.OffsetX">
            <summary>
            Gets or sets the initial horizontal offset for the stacked elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.BindStackLayout.OffsetY">
            <summary>
            Gets or sets the initial vertical offset for the stacked elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.BindStackLayout.Spacing">
            <summary>
            Gets or sets the spacing between each stacked element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.BindStackLayout.Reversed">
            <summary>
            Gets or sets a value indicating whether the stacking order should be reversed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.BindStackLayout.VariantOpacity">
            <summary>
            Gets or sets the opacity reduction applied to each subsequent element in the stack.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BindStackLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CascadeLayout">
            <summary>
            Represents a layout that arranges elements in a cascading pattern, applying incremental offsets to each element
            based on its position in the sequence.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.CascadeLayout"/> class is designed to animate elements by applying horizontal and
            vertical offsets that increase proportionally with the element's index. This layout is useful for creating visually
            appealing staggered animations or cascading effects.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CascadeLayout.OffsetXStep">
            <summary>
            Gets or sets the horizontal offset step applied to each subsequent element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CascadeLayout.OffsetYStep">
            <summary>
            Gets or sets the vertical offset step applied to each subsequent element.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CascadeLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ChaosLayout">
            <summary>
            Represents a layout that applies randomized transformations to animated elements,  creating a chaotic and dynamic
            visual effect.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.ChaosLayout"/> class randomizes the position, rotation, scale, and opacity  of
            animated elements within a specified spread range. This layout is useful for creating  visually dynamic and
            unpredictable animations. The randomness is applied independently  to each element, ensuring unique transformations
            for each.  The <see cref="P:FluentUI.Blazor.Community.Components.ChaosLayout.Spread"/> property determines the range within which the random offsets  for position are
            calculated. The layout also applies random rotation (0 to 360 degrees),  scaling (between 0.5 and 1.5), and opacity
            (between 0.5 and 1.0) to each element.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ChaosLayout.Spread">
            <summary>
            Gets or sets the spread value, which represents the difference between two related quantities.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ChaosLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FanLayout">
            <summary>
            Represents a layout that arranges elements in a fan-like pattern, with configurable radius and angle spread.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.FanLayout"/> positions elements in a circular arc, where the radius determines the
            distance  from the center and the angle spread defines the total angular range covered by the elements. The layout 
            animates the position and rotation of each element based on the specified animation parameters.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FanLayout.Radius">
            <summary>
            Gets or sets the radius of the fan layout, determining how far elements are positioned from the center.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FanLayout.AngleSpread">
            <summary>
            Gets or sets the angle spread of the fan layout in degrees, defining the total angular range covered by the elements.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FanLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FloatLayout">
            <summary>
            Represents a layout where elements float freely without a specific arrangement.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FloatLayout.DriftRange">
            <summary>
            Gets or sets the allowable range of drift.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FloatLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FlowerLayout">
            <summary>
            Arranges elements in a circular layout resembling the petals of a flower.
            </summary>
            <remarks>The layout positions elements in a circular pattern, with each element placed at an equal angular    
            distance from its neighbors. The radius of the circle is determined as one-third of the smaller dimension of the
            layout's width or height. The layout also applies a rotation to each element corresponding to its angular
            position.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FlowerLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GalaxyLayout">
            <summary>
            Represents a layout that arranges elements in a spiral pattern resembling a galaxy,  with configurable arms, spread,
            rotation, and number of turns.
            </summary>
            <remarks>This layout animates the position and rotation of elements to create a dynamic galaxy-like effect.
            The layout is defined by several parameters, including the number of arms, the spread of the elements,  the rotation
            per turn, and the total number of turns. The animation is applied to each element's  position and rotation over
            time.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GalaxyLayout.Arms">
            <summary>
            Gets or sets the number of arms in the galaxy layout.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GalaxyLayout.Spread">
            <summary>
            Gets or sets the spread factor of the galaxy layout, determining how far elements are spread out from the center.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GalaxyLayout.RotationPerTurn">
            <summary>
            Gets or sets the rotation in degrees for each complete turn of the spiral.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GalaxyLayout.Turns">
            <summary>
            Gets or sets the number of turns in the galaxy layout.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GalaxyLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GoldenSpiralLayout">
            <summary>
            Provides a layout strategy that arranges elements in a golden spiral pattern.
            </summary>
            <remarks>The golden spiral layout is based on the mathematical constant Phi (approximately 1.618), which
            defines the proportions of the spiral. Elements are positioned in a spiral pattern radiating outward from the center
            of the layout area. The layout animates the position and rotation of elements over a specified duration.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GoldenSpiralLayout.Phi">
            <summary>
            Represents the mathematical constant Phi (φ), also known as the golden ratio.
            </summary>
            <remarks>The value of Phi is approximately 1.61803398875. It is an irrational number that appears in
            various fields such as mathematics, art, architecture, and nature.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GoldenSpiralLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.GoldenSpiralLayout"/> class.
            </summary>
            <remarks>The default duration for the layout animation is set to 2.5 seconds.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GoldenSpiralLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GridLayout">
            <summary>
            Represents a layout that arranges elements in a grid with a fixed number of columns and uniform cell dimensions.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.GridLayout"/> class organizes elements into rows and columns based on the specified
            number of columns  and the dimensions of each cell. The layout automatically calculates the position of each element
            within the grid  and animates their transitions when the layout changes.  This layout is particularly useful for
            scenarios where elements need to be displayed in a structured grid format,  such as image galleries, dashboards, or
            data visualizations.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayout.Columns">
            <summary>
            Gets or sets the number of columns in the grid. Must be at least 1.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayout.CellWidth">
            <summary>
            Gets or sets the width of each cell in the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayout.CellHeight">
            <summary>
            Gets or sets the height of each cell in the grid.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayout.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.HeartLayout">
            <summary>
            Represents a layout that arranges elements in the shape of a heart.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.HeartLayout"/> class positions elements in a heart-shaped pattern,  with their
            positions animated over time. The layout dynamically calculates the  position of each element based on its index and
            the total number of elements,  ensuring that all elements are evenly distributed along the heart curve.  This layout
            is particularly useful for visually appealing animations or  decorative UI elements. The animation parameters, such
            as duration and easing  functions, are inherited from the base class <see cref="T:FluentUI.Blazor.Community.Components.AnimatedLayoutBase"/>.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.HeartLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.HelixLayout">
            <summary>
            Represents a layout that arranges elements in a helical pattern, with each element positioned at an increasing angle
            and distance from the center.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.HelixLayout"/> class calculates the position and rotation of elements based on their
            index in the sequence. Elements are arranged in a spiral-like structure, with their offsets and rotations animated
            over time. The layout is centered within the available width and height of the container.  This layout is
            particularly useful for creating visually dynamic animations or effects where elements appear to follow a helical
            path.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.HelixLayout.AngleStep">
            <summary>
            Represents the fixed angle increment, in degrees, used for calculations or operations that require discrete
            angular steps.
            </summary>
            <remarks>This constant defines the step size for angles, measured in degrees, and is intended for use
            in scenarios where angular values are processed in fixed increments, such as in geometric calculations or
            graphical rendering.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.HelixLayout.Spacing">
            <summary>
            Represents the default spacing value used for layout calculations.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.HelixLayout.AngleIncrement">
            <summary>
            Represents the constant angle increment in radians, calculated as the product of the angle step and the radians
            conversion factor.
            </summary>
            <remarks>This value is used to determine the incremental change in angle for operations requiring
            angular calculations in radians.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.HelixLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MagnetLayout">
            <summary>
            Represents a layout strategy that positions elements towards a specified point with some randomness, creating a "magnet" effect.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MagnetLayout.MagnetX">
            <summary>
            Gets or sets the target X coordinate towards which elements will be attracted.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MagnetLayout.MagnetY">
            <summary>
            Gets or sets the target Y coordinate towards which elements will be attracted.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MagnetLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MorphingLayout">
            <summary>
            Represents a layout strategy that enables smooth transitions between multiple animated layouts.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.MorphingLayout"/> class is used to manage and animate transitions between different
            layouts of elements. It supports defining multiple layouts and morphing between them using specified animation
            parameters such as duration, easing function, and easing mode. This class is typically used in scenarios where
            dynamic and visually appealing layout transitions are required, such as in UI animations or data visualization.  The
            layout transitions are controlled by the parent animation context, and the class provides methods to apply layouts,
            set dimensions, and manage the sequence of layouts. It also ensures proper disposal of resources when no longer
            needed.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.MorphingLayout._layouts">
            <summary>
            Represents the collection of layouts managed by this instance.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.MorphingLayout._fromLayout">
            <summary>
            Represents the layout being transitioned from.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.MorphingLayout._toLayout">
            <summary>
            Represents the layout being transitioned to.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.MorphingLayout._currentLayoutIndex">
            <summary>
            Represents the index of the current layout in the sequence.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.ChildContent">
            <summary>
            Gets or sets the child content to be rendered inside this component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> component, if any.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.Duration">
            <summary>
            Gets or sets the duration of the layout transition animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.StartTime">
            <summary>
            Gets the start time of the current layout.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.Width">
            <summary>
            Gets or sets the width of the container where the layout is applied.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.Height">
            <summary>
            Gets or sets the height of the container where the layout is applied.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.EasingFunction">
            <summary>
            Gets or sets the easing function used for the layout transition animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.EasingMode">
            <summary>
            Gets or sets the easing mode used for the layout transition animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.Immediate">
            <summary>
            Gets or sets a value indicating whether layout changes should be applied immediately without animation.
            </summary>
            <remarks>
            MorphingLayout does not support immediate changes. Attempting to set this property to true will result in a NotSupportedException.
            </remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.ApplyLayout(System.Collections.Generic.List{FluentUI.Blazor.Community.Components.AnimatedElement})">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.NextLayout">
            <summary>
            Advances to the next layout in the sequence, looping back to the start if necessary.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.ApplyMorph(FluentUI.Blazor.Community.Components.AnimatedElement,FluentUI.Blazor.Community.Components.AnimatedElement,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <summary>
            Applies a morphing transformation to the specified <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> by interpolating its state
            properties between two other <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> instances.
            </summary>
            <remarks>This method updates the state properties of <paramref name="animatedElement"/> (such as
            position, scale, rotation, color, and opacity) by interpolating between the corresponding properties of
            <paramref name="fromElement"/> and <paramref name="toElement"/>. Default values are used for any null state
            properties in the source or target elements.</remarks>
            <param name="animatedElement">The <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> to which the morphing transformation will be applied.</param>
            <param name="fromElement">The source <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> representing the starting state of the morph.</param>
            <param name="toElement">The target <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> representing the ending state of the morph.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.ApplyStartTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.SetDimensions(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.Remove(FluentUI.Blazor.Community.Components.AnimatedLayoutBase)">
            <summary>
            Removes the specified layout from the collection of animated layouts.
            </summary>
            <remarks>If the specified layout is not found in the collection, no action is taken.</remarks>
            <param name="value">The layout to remove from the collection. Must not be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.Add(FluentUI.Blazor.Community.Components.AnimatedLayoutBase)">
            <summary>
            Adds the specified layout to the collection if it is not already present.
            </summary>
            <param name="value">The layout to add to the collection. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.CreateState``1(``0,``0)">
            <summary>
            Creates a new animation state with the specified start and end values.
            </summary>
            <typeparam name="T">The type of the animation values. Must be a value type.</typeparam>
            <param name="startValue">The initial value of the animation.</param>
            <param name="endValue">The final value of the animation.</param>
            <returns>An <see cref="T:FluentUI.Blazor.Community.Components.AnimationState`1"/> object representing the animation state,  initialized with the specified
            start and end values, as well as the current  duration, start time, easing function, and easing mode.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.SetImmediate(System.Boolean)">
            <summary>
            Sets whether the layout change should be applied immediately.
            </summary>
            <param name="immediate">A value indicating whether the layout change should be applied immediately.  Must be <see langword="false"/> as
            immediate changes are not supported.</param>
            <exception cref="T:System.NotSupportedException">Thrown if <paramref name="immediate"/> is <see langword="true"/> because immediate changes are not supported.</exception>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.OrbitLayout">
            <summary>
            Represents a layout strategy that arranges elements in a circular orbit around a specified center point.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.OrbitLayout.Radius">
            <summary>
            Gets or sets the radius of the orbit circle.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.OrbitLayout.CenterX">
            <summary>
            Gets or sets the X coordinate of the center point of the orbit.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.OrbitLayout.CenterY">
            <summary>
            Gets or sets the Y coordinate of the center point of the orbit.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.OrbitLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PinLayout">
            <summary>
            Represents a layout that positions animated elements at a fixed point defined by the <see cref="P:FluentUI.Blazor.Community.Components.PinLayout.PinX"/> and <see
            cref="P:FluentUI.Blazor.Community.Components.PinLayout.PinY"/> coordinates.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.PinLayout"/> class is used to anchor animated elements to a specific point within a
            layout. The position is determined by the <see cref="P:FluentUI.Blazor.Community.Components.PinLayout.PinX"/> and <see cref="P:FluentUI.Blazor.Community.Components.PinLayout.PinY"/> properties, which specify the
            horizontal and vertical coordinates, respectively.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PinLayout.PinX">
            <summary>
            Gets or sets the X coordinate of the pin point where elements will be positioned.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PinLayout.PinY">
            <summary>
            Gets or sets the Y coordinate of the pin point where elements will be positioned.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PinLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PulseLayout">
            <summary>
            Represents a layout that applies a pulsing animation to its child elements,  scaling them dynamically based on a
            randomized pulse factor.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.PulseLayout"/> class is designed to animate the scaling of child elements  by applying
            a randomized pulse effect. The pulse scale is determined by the combination  of the <see cref="P:FluentUI.Blazor.Community.Components.PulseLayout.BaseScale"/> and a
            random value scaled by <see cref="P:FluentUI.Blazor.Community.Components.PulseLayout.PulseScale"/>.  This layout is useful for creating dynamic, attention-grabbing
            animations in user interfaces.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PulseLayout.BaseScale">
            <summary>
            Gets or sets the base scale factor for the pulsing animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PulseLayout.PulseScale">
            <summary>
            Gets or sets the maximum additional scale factor for the pulsing animation.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PulseLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlidingOpacityLayout">
            <summary>
            Provides a layout that animates the opacity of its child elements as they slide into or out of view.
            </summary>
            <remarks>Use this layout to create smooth fade-in and fade-out transitions for child elements during layout
            changes. The animation is typically triggered when elements are added, removed, or repositioned within the
            layout.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlidingOpacityLayout.StartOffset">
            <summary>
            Gets or sets the initial horizontal offset for the stacked elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlidingOpacityLayout.EndOffset">
            <summary>
            Gets or sets the initial vertical offset for the stacked elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlidingOpacityLayout.StartOpacity">
            <summary>
            Gets or sets the initial horizontal offset for the stacked elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlidingOpacityLayout.EndOpacity">
            <summary>
            Gets or sets the initial vertical offset for the stacked elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlidingOpacityLayout.Direction">
            <summary>
            Gets or sets the direction in which the slide animation is performed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlidingOpacityLayout.IsCentered">
            <summary>
            Gets or sets a value indicating whether the child elements should be centered within the layout during the animation.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlidingOpacityLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SnakeLayout">
            <summary>
            Represents a layout that arranges elements in a snake-like pattern,  typically used for animated transitions in UI
            components.
            </summary>
            <remarks>This layout is designed to provide a visually dynamic arrangement of elements,  where items are
            positioned in a winding or serpentine sequence. It is particularly  useful for creating engaging animations or
            unique visual effects in user interfaces.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SnakeLayout.Columns">
            <summary>
            Gets or sets the number of columns in the snake layout.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SnakeLayout.CellWidth">
            <summary>
            Gets or sets the cell width of the layout.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SnakeLayout.CellHeight">
            <summary>
            Gets or sets the cell height of the layout.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SnakeLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SpiralGalaxyLayout">
            <summary>
            Represents a layout that arranges animated elements in a spiral galaxy pattern.
            </summary>
            <remarks>The layout positions elements in a spiral formation, with their positions determined by the specified
            <see cref="P:FluentUI.Blazor.Community.Components.SpiralGalaxyLayout.SpiralFactor"/> and their index in the sequence. The animation includes transitions for the X and Y
            offsets as well as rotation, creating a dynamic spiral effect.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SpiralGalaxyLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SpiralGalaxyLayout"/> class with default settings.
            </summary>
            <remarks>The default duration for the layout animation is set to 2.5 seconds.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SpiralGalaxyLayout.SpiralFactor">
            <summary>
            Gets or sets the spiral factor that influences the tightness of the spiral.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SpiralGalaxyLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SpiralLayout">
            <summary>
            Represents a layout that arranges elements in a spiral pattern, where each element's position is determined by its
            index, a step radius, and a step angle.
            </summary>
            <remarks>The layout calculates the position of each element based on polar coordinates, converting them to
            Cartesian coordinates. The distance between elements is controlled by <see cref="P:FluentUI.Blazor.Community.Components.SpiralLayout.RadiusStep"/>, and the angular
            spacing is controlled by <see cref="P:FluentUI.Blazor.Community.Components.SpiralLayout.AngleStep"/>. The layout also supports animating the position and rotation of
            elements.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SpiralLayout.RadiusStep">
            <summary>
            Gets or sets the incremental distance between each element in the spiral.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SpiralLayout.AngleStep">
            <summary>
            Gets or sets the angular increment (in degrees) between each element in the spiral.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SpiralLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.StackedRotatingLayout">
            <summary>
            Represents a layout that arranges elements in a stacked formation, applying a rotational transformation to each
            element.
            </summary>
            <remarks>This layout is typically used to create visually dynamic arrangements where elements are stacked on
            top of each other with a rotational offset. It is suitable for scenarios such as card stacks, carousel-like
            displays, or layered visual effects.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.StackedRotatingLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.StackLayout">
            <summary>
            Represents a layout that arranges its child elements in a stack, either horizontally or vertically,  with optional
            spacing between elements.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.StackLayout"/> is a specialized layout that positions its child elements sequentially 
            in a single line, determined by the <see cref="P:FluentUI.Blazor.Community.Components.StackLayout.Orientation"/> property. The spacing between elements  can be
            customized using the <see cref="P:FluentUI.Blazor.Community.Components.StackLayout.Spacing"/> property. This layout supports animations for  transitioning child
            elements to their new positions.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.StackLayout.Spacing">
            <summary>
            Gets or sets the spacing value used to define the distance between elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.StackLayout.Orientation">
            <summary>
            Gets or sets the orientation of the layer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.StackLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SunburstLayout">
            <summary>
            Represents a layout that arranges elements in a sunburst pattern, where elements are positioned  radially around a
            central point with animated transitions.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.SunburstLayout"/> calculates the position of each element based on its index, 
            distributing elements evenly around a circle. The layout supports animated transitions for  smooth movement of
            elements to their calculated positions. The radius of each element's position  increases incrementally, creating a
            layered, concentric effect.  This layout is particularly useful for visualizations or UI components that require a
            radial  arrangement of elements, such as charts or menus.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SunburstLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.VortexLayout">
            <summary>
            Represents a layout that arranges elements in a dynamic spiral pattern, with optional rotation effects.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.VortexLayout"/> arranges elements in a spiral configuration, where the spacing between
            elements is determined by <see cref="P:FluentUI.Blazor.Community.Components.VortexLayout.RadiusStep"/> and <see cref="P:FluentUI.Blazor.Community.Components.VortexLayout.AngleStep"/>. The layout also supports dynamic
            rotation effects based on the elapsed time, controlled by the <see cref="P:FluentUI.Blazor.Community.Components.VortexLayout.RotationSpeed"/> property.  This layout is
            particularly useful for creating visually engaging animations or effects where elements follow a vortex-like
            motion.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VortexLayout.RadiusStep">
            <summary>
            Gets or sets the incremental distance between each element in the spiral.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VortexLayout.AngleStep">
            <summary>
            Gets or sets the angular increment (in degrees) between each element in the spiral.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VortexLayout.RotationSpeed">
            <summary>
            Gets or sets the rotation speed, in degrees per second.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.VortexLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.WaveLayout">
            <summary>
            Represents a layout that arranges elements in a wave-like pattern, where the vertical position of each element is
            determined by a sine function based on its horizontal position.
            </summary>
            <remarks>The layout calculates the position of each element using the specified amplitude, frequency, and
            spacing. The horizontal position is determined by the index of the element multiplied by the spacing, while the
            vertical position is calculated as the sine of the horizontal position scaled by the amplitude and frequency. This
            layout is animated, and the positions of the elements are updated over time using the specified animation
            parameters.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.WaveLayout.Amplitude">
            <summary>
            Gets or sets the amplitude of the wave, which determines the height of the wave peaks and troughs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.WaveLayout.Frequency">
            <summary>
            Gets or sets the frequency of the wave, which determines how many wave cycles occur over a given horizontal distance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.WaveLayout.Spacing">
            <summary>
            Gets or sets the spacing between consecutive elements along the horizontal axis.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.WaveLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ZigZagLayout">
            <summary>
            Represents a zig-zag layout strategy where elements are arranged in a zig-zag pattern.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ZigZagLayout.StepX">
            <summary>
            Gets or sets the horizontal step size between elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ZigZagLayout.StepY">
            <summary>
            Gets or sets the vertical step size between elements.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ZigZagLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AudioControls">
            <summary>
            Represents audio control buttons for play, pause, stop, and other functionalities.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioControls._playOrPauseButton">
            <summary>
            Represents the play or pause button control used to toggle playback state.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioControls.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.AudioControls"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.Labels">
            <summary>
            Gets or sets the labels for the audio control buttons.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.IsDownloadVisible">
            <summary>
            Gets or sets a value indicating whether the download button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.OnShuffleChanged">
            <summary>
            Gets or sets the event callback that is invoked when the shuffle state changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.OnPlaylistToggled">
            <summary>
            Gets or sets the event callback that is invoked when the playlist button is toggled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.OnPrevious">
            <summary>
            Gets or sets the event callback that is invoked when the previous button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.OnDownload">
            <summary>
            Gets or sets the event callback that is invoked when the download button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.OnStop">
            <summary>
            Gets or sets the event callback that is invoked when the stop button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.OnNext">
            <summary>
            Gets or sets the callback to be invoked when the next button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.OnRepeatModeChanged">
            <summary>
            Gets or sets the callback to be invoked when the repeat mode changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.OnPlayPauseToggled">
            <summary>
            Gets or sets the callback to be invoked when the play/pause button is toggled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.OnVolumeChanged">
            <summary>
            Gets or sets the callback to be invoked when the volume changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.OnProperties">
            <summary>
            Gets or sets the callback to be invoked when the properties button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.IsPreviousDisabled">
            <summary>
            Gets or sets a value indicating whether the previous button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.IsNextDisabled">
            <summary>
            Gets or sets a value indicating whether the next button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.IsStopDisabled">
            <summary>
            Gets or sets a value indicating whether the stop button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.IsDownloadDisabled">
            <summary>
            Gets or sets a value indicating whether downloading is disabled for this component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.IsPlayOrPauseDisabled">
            <summary>
            Gets or sets a value indicating whether the play/pause button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioControls.IsPropertiesDisabled">
            <summary>
            Gets or sets a value indicating whether the properties button is disabled.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioControls.SetPlayPauseState(System.Boolean)">
            <summary>
            Sets the play/pause state of the associated control.
            </summary>
            <param name="isPlaying">A value indicating whether the control should reflect the "playing" state.  <see langword="true"/> if the
            control should indicate playback is active; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.PlayLabel">
            <summary>
            Gets the label for the play button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.PauseLabel">
            <summary>
            Gets the label for the pause button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.PreviousLabel">
            <summary>
            Gets the label for the previous button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.NextLabel">
            <summary>
            Gets the label for the next button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.VolumeLabel">
            <summary>
            Gets the label for the volume control.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.ShuffleOnLabel">
            <summary>
            Gets the label for the shuffle on button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.ShuffleOffLabel">
            <summary>
            Gets the label for the shuffle off button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.PlaylistLabel">
            <summary>
            Gets the label for the playlist button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.DownloadLabel">
            <summary>
            Gets the label for the download button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.StopLabel">
            <summary>
            Gets the label for the stop button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.PlaylistLoopLabel">
            <summary>
            Gets the label for the playlist loop mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.PlaylistOnceLabel">
            <summary>
            Gets the label for the playlist once mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.SingleLoopLabel">
            <summary>
            Gets the label for the single loop mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.SingleOnceLabel">
            <summary>
            Gets the label for the single once mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.TitleLabel">
            <summary>
            Gets the label for the title field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.AlbumArtistsLabel">
            <summary>
            Gets the label for the performers field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.PropertiesLabel">
            <summary>
            Gets the label for the properties section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.CloseLabel">
            <summary>
            Gets the label for close dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.AlbumLabel">
            <summary>
            Gets the label for the album field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.AlbumArtistLabel">
            <summary>
            Gets the display label used for the album artist field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.TrackNumberLabel">
            <summary>
            Gets the label for the track number field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.DurationLabel">
            <summary>
            Gets the label for the duration field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.GenreLabel">
            <summary>
            Gets the label text used to represent the genre field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.YearLabel">
            <summary>
            Gets the label text used to represent a year.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.BitrateLabel">
            <summary>
            Gets the display label used to represent the bitrate value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.MimeLabel">
            <summary>
            Gets the label for the MIME type field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.PublisherLabel">
            <summary>
            Gets the display label used for the publisher field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioLabels.CoverLabel">
            <summary>
            Gets the label for the cover field.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AudioPlayerView">
            <summary>
            Specifies the rendering mode for an audio player.
            </summary>
            <remarks>The rendering mode determines the layout and appearance of the audio player. Use the appropriate mode
            based on the desired user interface and available screen space.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioPlayerView.Default">
            <summary>
            Represents the normal rendering mode of the audio player, which includes all standard controls and features.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioPlayerView.Compact">
            <summary>
            Represents the compact rendering mode of the audio player, which provides a smaller layout with essential controls only.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioPlayerView.Floating">
            <summary>
            Represents the floating rendering mode of the audio player, which allows the player to be positioned independently of other content.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioPlayerView.Minimal">
            <summary>
            Represents the minimal rendering mode of the audio player, which offers a very simplified interface with only the most basic controls.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AudioPlaylist">
            <summary>
            Represents an audio playlist component that displays a list of audio tracks and allows users to select and play them.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioPlaylist.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.AudioPlaylist"/> class.
            </summary>
            <remarks>The playlist is assigned a unique identifier upon creation.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioPlaylist.Playlist">
            <summary>
            Gets or sets the playlist of audio tracks.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioPlaylist.CurrentTrack">
            <summary>
            Gets or sets the currently selected audio track.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioPlaylist.OnTrackSelected">
            <summary>
            Gets or sets the event callback that is invoked when a track is selected.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioPlaylist.IsVisible">
            <summary>
            Gets or sets a value indicating whether the playlist is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioPlaylist.Height">
            <summary>
            Gets or sets the height of the playlist component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioPlaylist.InternalStyle">
            <summary>
            Gets the internal style for the component, including the height.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AudioPlaylistItem">
            <summary>
            Represents an item in an audio playlist, including its associated track, selection state, and actions.
            </summary>
            <remarks>This component is designed to display an audio track within a playlist and manage its selection
            state. It provides functionality to handle user interactions, such as selecting a track, and displays an appropriate
            icon based on whether the track is currently selected.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioPlaylistItem.PlayIcon">
            <summary>
            Represents the icon used to indicate the play action for an audio track.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioPlaylistItem.PollIcon">
            <summary>
            Represents the icon used to indicate the poll action for an audio track.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioPlaylistItem._hasTrackChanged">
            <summary>
            Represents whether the track has changed since the last render.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioPlaylistItem._performers">
            <summary>
            Represents the performers of the audio track.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioPlaylistItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.AudioPlaylistItem"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioPlaylistItem.Track">
            <summary>
            Gets or sets the audio track item to be displayed in the playlist.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioPlaylistItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether the track is currently selected.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioPlaylistItem.TrackIcon">
            <summary>
            Gets the appropriate icon based on whether the track is selected.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioPlaylistItem.OnSelected">
            <summary>
            Gets or sets the event callback that is invoked when the track is selected.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioPlaylistItem.OnHandleClickAsync">
            <summary>
            Handles the click event asynchronously and invokes the <see cref="P:FluentUI.Blazor.Community.Components.AudioPlaylistItem.OnSelected"/> callback with the current <see
            cref="P:FluentUI.Blazor.Community.Components.AudioPlaylistItem.Track"/>.
            </summary>
            <remarks>This method checks if the <see cref="P:FluentUI.Blazor.Community.Components.AudioPlaylistItem.OnSelected"/> callback has been assigned and if the <see
            cref="P:FluentUI.Blazor.Community.Components.AudioPlaylistItem.Track"/> is not null before invoking the callback. Ensure that both <see cref="P:FluentUI.Blazor.Community.Components.AudioPlaylistItem.OnSelected"/> and <see
            cref="P:FluentUI.Blazor.Community.Components.AudioPlaylistItem.Track"/> are properly set before calling this method.</remarks>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioPlaylistItem.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioPlaylistItem.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AudioRepeatMode">
            <summary>
            Specifies the repeat mode for audio playback.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioRepeatMode.SingleOnce">
            <summary>
            The track will play once and stop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioRepeatMode.SingleLoop">
            <summary>
            The track will loop continuously.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioRepeatMode.PlaylistOnce">
            <summary>
            The playlist will play once and stop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioRepeatMode.PlaylistLoop">
            <summary>
            The playlist will loop continuously.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AudioTitleScroller">
            <summary>
            Renders a scrolling title for audio tracks.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioTitleScroller.Title">
            <summary>
            Gets or sets the title to display.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AudioTrackItem">
            <summary>
            Represents an audio track with properties for title, artist, source URL, and cover URL.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioTrackItem.Source">
            <summary>
            Gets or sets the source URL of the audio track.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioTrackItem.Metadata">
            <summary>
            Gets or sets the audio metadata associated with the track.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioTrackItem.Parent">
            <summary>
            Gets or sets the parent of this track item.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioTrackItem.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioTrackItem.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AudioVisualizer">
            <summary>
            Represents an audio visualizer component that can display audio data in various visual formats.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioVisualizer.JavaScriptFile">
            <summary>
            Represets the JavaScript file for the audio visualizer component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioVisualizer._module">
            <summary>
            Represents the JavaScript module for the audio visualizer component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioVisualizer._hasChanged">
            <summary>
            Value indicating whether the visualizer mode has changed.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioVisualizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.AudioVisualizer"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioVisualizer.Mode">
            <summary>
            Gets or sets the visualizer mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioVisualizer.Cover">
            <summary>
            Gets or sets the cover source URL.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioVisualizer.Width">
            <summary>
            Gets or sets the width of the visualizer.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioVisualizer.Height">
            <summary>
            Gets or sets the height of the visualizer.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioVisualizer.Anchor">
            <summary>
            Gets or sets the anchor audio element identifier.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioVisualizer.IsVisible">
            <summary>
            Gets or sets a value indicating whether the visualizer is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioVisualizer.JS">
            <summary>
            Gets or sets the JavaScript runtime.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioVisualizer.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioVisualizer.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioVisualizer.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioVisualizer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CompactPlayer">
            <summary>
            Represents a compact audio player component that provides basic audio playback functionality.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CompactPlayer._showControls">
            <summary>
            Value indicating whether to show the playback controls.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CompactPlayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.CompactPlayer"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.CurrentTrack">
            <summary>
            Gets or sets the current audio track to be played.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.OnPlayPauseChanged">
            <summary>
            Gets or sets the callback that is invoked when the play/pause button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.IsPreviousDisabled">
            <summary>
            Gets or sets a value indicating whether the previous button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.OnPrevious">
            <summary>
            Gets or sets the callback that is invoked when the previous button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.PreviousLabel">
            <summary>
            Gets or sets the label for the previous button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.IsNextDisabled">
            <summary>
            Gets or sets a value indicating whether the next button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.OnNext">
            <summary>
            Gets or sets the callback that is invoked when the next button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.NextLabel">
            <summary>
            Gets or sets the label for the next button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.PlayLabel">
            <summary>
            Gets or sets the label for the play button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.PauseLabel">
            <summary>
            Gets or sets the label for the pause button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.Duration">
            <summary>
            Gets or sets the total duration of the current track, in seconds.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.CurrentTime">
            <summary>
            Gets or sets the current playback time of the track, in seconds.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.IsFloating">
            <summary>
            Gets or sets a value indicating whether the player is floating.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactPlayer.InternalStyle">
            <summary>
            Gets the style string that includes the opacity for the playback controls based on the current state.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CompactPlayer.OnPointerEnter(Microsoft.AspNetCore.Components.Web.PointerEventArgs)">
            <summary>
            Handles the pointer enter event by updating the component's state.
            </summary>
            <param name="e">The event arguments associated with the pointer enter event.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CompactPlayer.OnPointerLeave(Microsoft.AspNetCore.Components.Web.PointerEventArgs)">
            <summary>
            Handles the pointer leave event by updating the component's state.
            </summary>
            <param name="e">The event data associated with the pointer leave event.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CompactSeekBar">
            <summary>
            Represents a compact seek bar component for media playback, providing functionality to display and interact with
            playback progress.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CompactSeekBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.CompactSeekBar"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactSeekBar.Duration">
            <summary>
            Gets or sets the duration of the track, in seconds.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactSeekBar.CurrentTime">
            <summary>
            Gets or sets the current playback time of the media, in seconds.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CompactSeekBar.Progression">
            <summary>
            Gets the progression percentage of the current time relative to the duration.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DownloadButton">
            <summary>
            Represents a button component designed for initiating download actions.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.DownloadButton"/> component provides a customizable button with an optional label and
            icon. It supports an event callback that is triggered when the button is clicked, allowing developers to handle
            download-related logic in their applications.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.DownloadButton.Icon">
            <summary>
            Represents the icon to be displayed on the button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DownloadButton.OnDownload">
            <summary>
            Gets or sets the event callback that is invoked when the download button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DownloadButton.Label">
            <summary>
            Gets or sets the label for the download button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DownloadButton.IsDisabled">
            <summary>
            Gets or sets a value indicating whether the download button is disabled.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DownloadButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.DownloadButton"/> class.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DownloadButton.OnClickAsync">
            <summary>
            Occurs when the download button is clicked.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.DownloadButton.OnDownload" /> callback.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.NextButton">
            <summary>
            Represents the previous button.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.NextButton.Icon">
            <summary>
            Represents the icon displayed when shuffling is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.NextButton.OnNext">
            <summary>
            Gets or sets the event callback that is invoked when the next button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.NextButton.Label">
            <summary>
            Gets or sets the label for the next button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.NextButton.IsDisabled">
            <summary>
            Gets or sets a value indicating whether the next button is disabled.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.NextButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.NextButton"/> class.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.NextButton.OnClickAsync">
            <summary>
            Occurs when the next button is clicked.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.NextButton.OnNext" /> callback.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PlaylistButton">
            <summary>
            Represents the playlist button.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PlaylistButton._showPlaylist">
            <summary>
            Indicates whether the playlist should be displayed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PlaylistButton.Icon">
            <summary>
            Represents the icon displayed when shuffling is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PlaylistButton.OnPlaylist">
            <summary>
            Gets or sets the event callback that is invoked when the stop button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PlaylistButton.Label">
            <summary>
            Gets or sets the label for the previous button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PlaylistButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.PlaylistButton"/> class.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PlaylistButton.OnTogglePlaylistAsync">
            <summary>
            Occurs when the playlist button is clicked.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.PlaylistButton.OnPlaylist" /> callback.</returns>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PlayOrPauseButton.PlayIcon">
            <summary>
            Represents the icon displayed when shuffling is disabled.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PlayOrPauseButton.PauseIcon">
            <summary>
            Represents the icon displayed when shuffling is enabvled.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PlayOrPauseButton._isPlaying">
            <summary>
            Indicates whether the collection is currently being shuffled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PlayOrPauseButton.OnPlayChanged">
            <summary>
            Gets or sets the event callback that is invoked when the play state changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PlayOrPauseButton.PlayLabel">
            <summary>
            Gets or sets the label for the play button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PlayOrPauseButton.PauseLabel">
            <summary>
            Gets or sets the label for the pause button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PlayOrPauseButton.PlayOrPauseLabel">
            <summary>
            Gets the label for the current state of the button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PlayOrPauseButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.PlayOrPauseButton"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PlayOrPauseButton.IsDisabled">
            <summary>
            Gets or sets a value indicating whether the button is disabled.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PlayOrPauseButton.OnTogglePlayOrPauseAsync">
            <summary>
            Occurs when the shuffle button is clicked.
            </summary>
            <returns>Returns a task which toggles on / off the shuffle</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PlayOrPauseButton.SetPlayPauseState(System.Boolean)">
            <summary>
            Sets the play/pause state of the button.
            </summary>
            <param name="isPlaying">Value indicating if the button is in playing state.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PreviousButton">
            <summary>
            Represents the previous button.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.PreviousButton"/> component provides functionality to toggle between shuffle modes for
            a collection. It displays an appropriate icon based on the current shuffle state and invokes a callback when the
            shuffle state changes.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PreviousButton.Icon">
            <summary>
            Represents the icon displayed when shuffling is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PreviousButton.OnPrevious">
            <summary>
            Gets or sets the event callback that is invoked when the stop button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PreviousButton.Label">
            <summary>
            Gets or sets the label for the previous button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PreviousButton.IsDisabled">
            <summary>
            Gets or sets a value indicating whether the previous button is disabled.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PreviousButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.PreviousButton"/> class.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PreviousButton.OnPreviousAsync">
            <summary>
            Occurs when the previous button is clicked.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.PreviousButton.OnPrevious" /> callback.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PropertiesButton">
            <summary>
            Represents a button component designed for initiating properties actions.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PropertiesButton.Icon">
            <summary>
            Represents the icon to be displayed on the button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PropertiesButton.OnProperties">
            <summary>
            Gets or sets the event callback that is invoked when the download button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PropertiesButton.Label">
            <summary>
            Gets or sets the label for the download button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PropertiesButton.IsDisabled">
            <summary>
            Gets or sets a value indicating whether the download button is disabled.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PropertiesButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.PropertiesButton"/> class.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PropertiesButton.OnClickAsync">
            <summary>
            Occurs when the download button is clicked.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.PropertiesButton.OnProperties" /> callback.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.RepeatButton">
            <summary>
            Represents a button that allows users to cycle through different audio repeat modes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RepeatButton.SingleOnceIcon">
            <summary>
            Represents the icon for the "Single Once" repeat mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RepeatButton.SingleLoopIcon">
            <summary>
            Represents the icon for the "Single Loop" repeat mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RepeatButton.PlaylistOnceIcon">
            <summary>
            Represents the icon for the "Playlist Once" repeat mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RepeatButton.PlaylistLoopIcon">
            <summary>
            Represents the icon for the "Playlist Loop" repeat mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RepeatButton._repeatMode">
            <summary>
            Represents the current repeat mode of the audio player.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RepeatButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.RepeatButton"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RepeatButton.RepeatIcon">
            <summary>
            Gets the icon corresponding to the current repeat mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RepeatButton.OnRepeatModeChanged">
            <summary>
            Gets or sets the event callback that is invoked when the repeat mode changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RepeatButton.SingleOnceLabel">
            <summary>
            Gets or sets the label for the "Single Once" repeat mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RepeatButton.SingleLoopLabel">
            <summary>
            Gets or sets the label for the "Single Loop" repeat mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RepeatButton.PlaylistOnceLabel">
            <summary>
            Gets or sets the label for the "Playlist Once" repeat mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RepeatButton.PlaylistLoopLabel">
            <summary>
            Gets or sets the label for the "Playlist Loop" repeat mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RepeatButton.RepeatLabel">
            <summary>
            Gets the label corresponding to the current repeat mode.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RepeatButton.OnChangeRepeatModeAsync">
            <summary>
            Cycles through the available audio repeat modes in a predefined order.
            </summary>
            <remarks>The repeat modes transition in the following sequence:  <see
            cref="F:FluentUI.Blazor.Community.Components.AudioRepeatMode.SingleOnce"/> → <see cref="F:FluentUI.Blazor.Community.Components.AudioRepeatMode.SingleLoop"/> →  <see
            cref="F:FluentUI.Blazor.Community.Components.AudioRepeatMode.PlaylistOnce"/> → <see cref="F:FluentUI.Blazor.Community.Components.AudioRepeatMode.PlaylistLoop"/> →  <see
            cref="F:FluentUI.Blazor.Community.Components.AudioRepeatMode.SingleOnce"/>. After updating the repeat mode, the component's state is
            refreshed.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SeekBar">
            <summary>
            Represents a seek bar component for audio or video playback, allowing users to navigate through the media timeline.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SeekBar._isDragging">
            <summary>
            Variable to track if the user is currently dragging the seek bar thumb.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SeekBar._cts">
            <summary>
            Represents a cancellation token source used for hiding the preview.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SeekBar._showPreview">
            <summary>
            Indicates whether the preview is displayed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SeekBar._previewTime">
            <summary>
            Represents the preview time in seconds.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SeekBar._containerWidth">
            <summary>
            Represents the width of the container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SeekBar._dotNetRef">
            <summary>
            Represents a reference to a .NET object of type <see cref="T:FluentUI.Blazor.Community.Components.SeekBar"/> that can be passed to JavaScript interop.
            </summary>
            <remarks>This field is used to enable JavaScript to invoke methods on the associated <see
            cref="T:FluentUI.Blazor.Community.Components.SeekBar"/> instance. It is a readonly field and should be initialized with a valid <see
            cref="T:Microsoft.JSInterop.DotNetObjectReference`1"/> instance.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SeekBar._module">
            <summary>
            Represents a reference to a JavaScript module that can be used for invoking JavaScript functions.
            </summary>
            <remarks>This field holds an instance of <see cref="T:Microsoft.JSInterop.IJSObjectReference"/> that represents a JavaScript
            module. It is nullable, indicating that the module may not be initialized. Ensure the module is initialized
            before attempting to use it.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SeekBar"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SeekBar.Duration">
            <summary>
            Gets or sets the duration of the track, in seconds.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SeekBar.CurrentTime">
            <summary>
            Gets or sets the current playback time of the media, in seconds.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SeekBar.Chapters">
            <summary>
            Gets or sets the collection of chapters associated with the current context.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SeekBar.Mode">
            <summary>
            Gets or sets the media mode for the seek bar.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SeekBar.ThumbnailProvider">
            <summary>
            Gets or sets a function that generates a thumbnail URL based on a given timeline.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SeekBar.Step">
            <summary>
            Gets or sets the step value used to increment or decrement the associated value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SeekBar.OnSeek">
            <summary>
            Gets or sets the callback that is invoked when a seek operation occurs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SeekBar.OnSeekStart">
            <summary>
            Gets or sets the callback that is invoked when a seek operation starts.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SeekBar.OnSeekEnd">
            <summary>
            Gets or sets the callback that is invoked when a seek operation is completed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SeekBar.OnChapterChanged">
            <summary>
            Gets or sets the callback that is invoked when the chapter changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SeekBar.JS">
            <summary>
            Gets or sets the JavaScript runtime instance used for invoking JavaScript functions from .NET.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SeekBar.Progression">
            <summary>
            Gets the progression percentage of the current time relative to the duration.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.OnResizeAsync">
            <summary>
            Invoked by JavaScript to handle resize events and update the component's state accordingly.
            </summary>
            <remarks>This method is intended to be called from JavaScript via the <see
            cref="T:Microsoft.JSInterop.JSInvokableAttribute"/> with the identifier "onResize". It triggers an asynchronous operation to measure
            the width of the component and update its state.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.MeasureWidthAsync">
            <summary>
            Asynchronously measures the width of the container associated with the current instance.
            </summary>
            <remarks>This method invokes a JavaScript function to retrieve the width of the container element
            identified by the <c>Id</c> property. Ensure that the JavaScript module is properly initialized before calling
            this method.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.StartDragAsync(Microsoft.AspNetCore.Components.Web.PointerEventArgs)">
            <summary>
            Initiates a drag operation based on the specified pointer event.
            </summary>
            <remarks>This method sets the internal dragging state and triggers the <see cref="P:FluentUI.Blazor.Community.Components.SeekBar.OnSeekStart"/> event
            if it has subscribers.  It also updates the seek position based on the pointer's client X-coordinate.</remarks>
            <param name="e">The pointer event arguments containing details about the pointer event, such as the client X-coordinate.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.OnDragAsync(Microsoft.AspNetCore.Components.Web.PointerEventArgs)">
            <summary>
            Handles the drag event and updates the seek position based on the pointer's horizontal position.
            </summary>
            <param name="e">The pointer event arguments containing information about the drag event, including the pointer's position.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.EndDragAsync(Microsoft.AspNetCore.Components.Web.PointerEventArgs)">
            <summary>
            Ends the drag operation and triggers the seek end event if applicable.
            </summary>
            <remarks>This method is called to finalize a drag operation. If the drag operation was active, it
            stops the drag,  hides the preview, and invokes the <see cref="P:FluentUI.Blazor.Community.Components.SeekBar.OnSeekEnd"/> event with the current time
            value.</remarks>
            <param name="e">The pointer event arguments associated with the drag operation.</param>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.StartTouchAsync(Microsoft.AspNetCore.Components.Web.TouchEventArgs)">
            <summary>
            Initiates the touch interaction for seeking functionality.
            </summary>
            <remarks>This method sets the dragging state to active and triggers the seek start event with the
            current time. It then updates the seek position based on the horizontal client coordinate of the first touch
            point.</remarks>
            <param name="e">The touch event arguments containing details about the touch interaction. The first touch point is used to
            determine the starting position.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.OnTouchMoveAsync(Microsoft.AspNetCore.Components.Web.TouchEventArgs)">
            <summary>
            Handles the touch move event and updates the seek position based on the touch's client X-coordinate.
            </summary>
            <remarks>This method is invoked during a touch move gesture when dragging is active. It processes the
            first touch point and updates the seek position accordingly. Ensure that dragging is enabled before invoking
            this method.</remarks>
            <param name="e">The touch event arguments containing information about the touch gesture.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.EndTouchAsync(Microsoft.AspNetCore.Components.Web.TouchEventArgs)">
            <summary>
            Ends the current touch interaction, finalizing any ongoing drag operation.
            </summary>
            <remarks>This method is typically called when a touch interaction is completed. If a drag operation 
            was in progress, it stops the drag and hides the preview. Additionally, it triggers the  <see cref="P:FluentUI.Blazor.Community.Components.SeekBar.OnSeekEnd"/>
            event with the current time value.</remarks>
            <param name="e">The <see cref="T:Microsoft.AspNetCore.Components.Web.TouchEventArgs"/> containing details about the touch event.</param>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.OnKeyDownAsync(Microsoft.FluentUI.AspNetCore.Components.FluentKeyCodeEventArgs)">
            <summary>
            Handles key press events to perform seek operations in a media playback context.
            </summary>
            <remarks>This method processes specific key inputs to adjust the playback position: <list
            type="bullet"> <item><description><see cref="F:Microsoft.FluentUI.AspNetCore.Components.KeyCode.Left"/> seeks backward by a predefined
            step.</description></item> <item><description><see cref="F:Microsoft.FluentUI.AspNetCore.Components.KeyCode.Right"/> seeks forward by a predefined
            step.</description></item> <item><description><see cref="F:Microsoft.FluentUI.AspNetCore.Components.KeyCode.Home"/> seeks to the beginning of the
            media.</description></item> <item><description><see cref="F:Microsoft.FluentUI.AspNetCore.Components.KeyCode.End"/> seeks to the end of the
            media.</description></item> </list></remarks>
            <param name="e">The key event arguments containing information about the key pressed.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.UpdateSeekAsync(System.Double)">
            <summary>
            Updates the seek position of the media playback based on the specified horizontal offset.
            </summary>
            <remarks>The method calculates the seek position as a percentage of the total duration based on the
            provided offset and the width of the container. The seek operation is performed asynchronously and may include a
            preview of the media at the calculated position.</remarks>
            <param name="offsetX">The horizontal offset, in pixels, used to calculate the new seek position. Must be a value between 0 and the
            width of the container.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.UpdateSeekFromClientXAsync(System.Double)">
            <summary>
            Updates the seek position based on the specified client X-coordinate.
            </summary>
            <remarks>This method calculates the offset relative to the seek bar using the provided client
            X-coordinate and updates the seek position accordingly. If the module is not initialized, the method exits
            without performing any action.</remarks>
            <param name="clientX">The X-coordinate, in pixels, from the client that determines the seek position.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.SeekToAsync(System.Double,System.Boolean)">
            <summary>
            Seeks to the specified time within the media and optionally enables preview mode.
            </summary>
            <remarks>This method updates the current playback time and triggers the <see cref="P:FluentUI.Blazor.Community.Components.SeekBar.OnSeek"/> event if
            it has subscribers.  If the seek operation results in a chapter change, the <see cref="P:FluentUI.Blazor.Community.Components.SeekBar.OnChapterChanged"/> event
            is also triggered.</remarks>
            <param name="time">The target time, in seconds, to seek to. The value is clamped between 0 and the total duration of the media.</param>
            <param name="preview">A boolean value indicating whether to enable preview mode.  If <see langword="true"/>, the preview state is
            updated without committing the seek operation.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.HidePreviewAfterDelayAsync(System.Threading.CancellationToken)">
            <summary>
            Hides the preview after a delay of 2 seconds.
            </summary>
            <remarks>If the operation is canceled via the provided <paramref name="token"/>, the preview will not
            be hidden.</remarks>
            <param name="token">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the delay operation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.OnClickSeek(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the click event on the seek bar and updates the seek position based on the mouse click location.
            </summary>
            <remarks>This method does not perform any action if a drag operation is currently in
            progress.</remarks>
            <param name="e">The <see cref="T:Microsoft.AspNetCore.Components.Web.MouseEventArgs"/> containing information about the mouse click event, including the client
            X-coordinate.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.GetChapterColor(FluentUI.Blazor.Community.Components.ChapterStatus)">
            <summary>
            Determines the color representation for a chapter based on its status.
            </summary>
            <param name="status">The status of the chapter. Must be one of the <see cref="T:FluentUI.Blazor.Community.Components.ChapterStatus"/> enumeration values.</param>
            <returns>A CSS linear-gradient string representing the color associated with the specified chapter status. Returns "gray"
            if the status is not recognized.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.FormatTime(System.Double)">
            <summary>
            Formats a time value in seconds into a string representation in the format "mm:ss".
            </summary>
            <param name="seconds">Number of elapsed seconds.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SeekBar.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ShuffleButton.ShuffleOffIcon">
            <summary>
            Represents the icon displayed when shuffling is disabled.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ShuffleButton.ShuffleOnIcon">
            <summary>
            Represents the icon displayed when shuffling is enabvled.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ShuffleButton._isShuffling">
            <summary>
            Indicates whether the collection is currently being shuffled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShuffleButton.OnShuffleChanged">
            <summary>
            Gets or sets the event callback that is invoked when the shuffle state changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShuffleButton.ShuffleOnLabel">
            <summary>
            Gets or sets the label for the shuffle on button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShuffleButton.ShuffleOffLabel">
            <summary>
            Gets or sets the label displayed when the shuffle feature is turned off.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ShuffleButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.ShuffleButton"/> class.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ShuffleButton.OnToggleShuffleAsync">
            <summary>
            Occurs when the shuffle button is clicked.
            </summary>
            <returns>Returns a task which toggles on / off the shuffle</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.StopButton">
            <summary>
            Represents the stop button.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.StopButton.Icon">
            <summary>
            Represents the icon displaye.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.StopButton.OnStop">
            <summary>
            Gets or sets the event callback that is invoked when the stop button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.StopButton.Label">
            <summary>
            Gets or sets the label for the stop button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.StopButton.IsDisabled">
            <summary>
            Gets or sets a value indicating whether the stop button is disabled.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.StopButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.StopButton"/> class.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.StopButton.OnStopAsync">
            <summary>
            Occurs when the stop button is clicked.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.StopButton.OnStop" /> callback.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.VolumeButton">
            <summary>
            Represents a button to control the volume of an audio player.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VolumeButton.VolumeZero">
            <summary>
            Represents an icon for a speaker with zero volume.
            </summary>
            <remarks>This icon can be used to visually indicate a muted or silent state in the user
            interface.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VolumeButton.VolumeOne">
            <summary>
            Represents an icon for a speaker with one sound wave, typically used to indicate low volume.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VolumeButton.VolumeTwo">
            <summary>
            Represents an icon for a speaker with two sound waves, typically used to indicate medium volume.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VolumeButton._isVolumePopoverOpen">
            <summary>
            Represents whether the volume popover is open.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VolumeButton._volume">
            <summary>
            Represents the volume level, where 1.0 is the default maximum value.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.VolumeButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.VolumeButton"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VolumeButton.VolumeIcon">
            <summary>
            Gets the appropriate volume icon based on the current volume level.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VolumeButton.OnVolumeChanged">
            <summary>
            Gets or sets the callback that is invoked when the volume changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VolumeButton.Label">
            <summary>
            Gets or sets the label for the volume button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VolumeButton.AriaLabel">
            <summary>
            Gets the ARIA label for the volume button, combining the volume label and the current volume percentage.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.VolumeButton.OnVolumeChangedAsync(System.Double)">
            <summary>
            Handles the volume change event asynchronously.
            </summary>
            <remarks>This method updates the internal volume state and invokes the <see cref="P:FluentUI.Blazor.Community.Components.VolumeButton.OnVolumeChanged"/>
            event if it has subscribers.</remarks>
            <param name="value">The new volume level. Must be a value between 0.0 and 1.0, where 0.0 represents mute and 1.0 represents the
            maximum volume.</param>
            <returns></returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxAudio">
            <summary>
            Represents a full-featured audio player component with various playback and visualization options.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._audioReference">
            <summary>
            Represents the reference to the HTML audio element.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._containerHeight">
            <summary>
            Represents the height of the container element.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._hasViewChanged">
            <summary>
            Value indicating whether the view has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._originalPlaylist">
            <summary>
            Represents the playlist of audio tracks.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._shuffledPlaylist">
            <summary>
            Represents the shuffled version of the playlist.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._showPlaylist">
            <summary>
            Represents whether to display the playlist.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._dotNetRef">
            <summary>
            Represents the .NET object reference for JavaScript interop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._isShuffling">
            <summary>
            Represents whether the audio player is in shuffle mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._audioControls">
            <summary>
            Represents the audio controls component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._audioVisualizer">
            <summary>
            Reference to the audio visualizer component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._currentTrackIndex">
            <summary>
            Represents the index of the current track in the playlist.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio.JavaScriptFile">
            <summary>
            The relative path to the JavaScript file used by the FluentCxAudio component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._module">
            <summary>
            The JavaScript module reference for interop calls.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._volume">
            <summary>
            Represents the volume level, where 1.0 is the default maximum value.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._currentTime">
            <summary>
            Represents the current time value.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._duration">
            <summary>
            Represents the duration of the audio file.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAudio._repeatMode">
            <summary>
            Represents the repeat mode of the audio player.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAudio"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.IsPreviousDisabled">
            <summary>
            Gets a value indicating whether the previous button should be disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.IsNextDisabled">
            <summary>
            Gets a value indicating whether the next button should be disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.ChildContent">
            <summary>
            Gets or sets the child content to be rendered inside the audio player component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.CurrentTrack">
            <summary>
            Gets  the current audio track to be played.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.IsStopDisabled">
            <summary>
            Gets a value indicating whether the stop button should be disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.IsPlayOrPauseDisabled">
            <summary>
            Gets a value indicating whether the play or pause button should be disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.IsPropertiesDisabled">
            <summary>
            Gets a value indicating whether the audio properties should be disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.IsDownloadDisabled">
            <summary>
            Gets a value indicating whether downloading the current track is disabled.
            </summary>
            <remarks>Downloading is disabled if there is no current track selected or if the current track does
            not have a valid source. This property can be used to determine whether download-related UI elements should be
            enabled.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.View">
            <summary>
            Gets or sets the render mode of the audio player.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.VisualizerMode">
            <summary>
            Gets or sets the visualizer mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.ShowVisualizer">
            <summary>
            Gets or sets a value indicating whether to display the audio visualizer.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.IsDownloadVisible">
            <summary>
            Gets or sets a value indicating whether the download button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.JSRuntime">
            <summary>
            Gets or sets the JavaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.Height">
            <summary>
            Gets or sets the height of the visualizer or the playlist viewer in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.Labels">
            <summary>
            Gets or sets the labels for the audio control buttons.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAudio.DialogService">
            <summary>
            Gets or sets the service used to display dialogs within the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnDownloadAsync">
            <summary>
            Occurs when the download button is clicked.
            </summary>
            <returns>Returns a task which downloads the track.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnPlaylistToogled(System.Boolean)">
            <summary>
            Toggles the visibility of the playlist.
            </summary>
            <param name="value">A boolean value indicating whether the playlist should be shown.  <see langword="true"/> to show the playlist;
            otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.SetAudioSourceAsync">
            <summary>
            Sets the audio source and volume for the current track asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.PlayAsync">
            <summary>
            Plays the audio associated with the current instance asynchronously.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnPauseAsync">
            <summary>
            Pauses the audio playback associated with the current instance.
            </summary>
            <remarks>This method invokes a JavaScript function to pause the audio playback.  Ensure that the
            associated module is initialized before calling this method.</remarks>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnTogglePlayPauseAsync">
            <summary>
            Toggles the playback state of the audio element between play and pause.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnPreviousTrackAsync">
            <summary>
            Skips to the previous track in the playlist and starts playback.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnNextTrackAsync">
            <summary>
            Advances to the next track in the playlist and begins playback.
            </summary>
            <returns>A task that represents the asynchronous operation of advancing to the next track  and starting playback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnPropertiesAsync">
            <summary>
            Displays the track properties dialog asynchronously and waits for the user to close it.
            </summary>
            <returns>A task that represents the asynchronous operation of showing the properties dialog and awaiting its closure.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnSeekAsync(System.Double)">
            <summary>
            Handles the seek operation by updating the current playback time and invoking the corresponding JavaScript
            function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnChangeVolumeAsync(System.Double)">
            <summary>
            Asynchronously updates the volume level and notifies the associated audio module.
            </summary>
            <param name="value">The new volume level to set. Must be a value between 0.0 and 1.0, where 0.0 represents mute and 1.0 represents
            the maximum volume.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnSeekEndAsync(System.Double)">
            <summary>
            Seeks to the specified position in the audio track and resumes playback.
            </summary>
            <remarks>This method invokes a JavaScript function to perform the seek operation. Ensure that the
            audio module is initialized before calling this method. If the module is not initialized, the method will have
            no effect.</remarks>
            <param name="value">The position, in seconds, to seek to within the audio track. Must be a non-negative value.</param>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnPlayTrackAsync(FluentUI.Blazor.Community.Components.AudioTrackItem)">
            <summary>
            Plays the specified audio track by setting it as the current track and starting playback.
            </summary>
            <remarks>If the specified track exists in the playlist, it is set as the current track, and playback
            begins. If the track is not found in the playlist, no action is taken.</remarks>
            <param name="track">The audio track to play. Must be an item in the current playlist.</param>
            <returns>Returns a task which plays the track.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnStopAsync">
            <summary>
            Stops the audio playback and resets the internal playback state.
            </summary>
            <returns>Returns a task which stops the audio playback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnToggleShuffle(System.Boolean)">
            <summary>
            Invoked when the shuffle mode is toggled.
            </summary>
            <param name="shuffling">Value indicating if the list must be shuffled or not.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnTrackEndedAsync">
            <summary>
            Invoked when a media track ends. This method is called via JavaScript interop.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.SetDuration(System.Double)">
            <summary>
            Sets the duration of the audio playback.
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.SetSeek(System.Double)">
            <summary>
            Sets the current of the audio playback.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.UpdateElapsedTime(System.Double)">
            <summary>
            Updates the current elapsed time with the specified value.
            </summary>
            <remarks>This method updates the internal state to reflect the provided elapsed time and triggers a
            re-render of the component. It can be invoked from JavaScript using the identifier
            "updateElapsedTime".</remarks>
            <param name="value">The new elapsed time, in seconds.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.AddTrackAsync(FluentUI.Blazor.Community.Components.AudioTrackItem)">
            <summary>
            Adds an audio track to the playlist.
            </summary>
            <param name="audioTrack">Audio track to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.RemoveTrackAsync(FluentUI.Blazor.Community.Components.AudioTrackItem)">
            <summary>
            Removes an audio track from the playlist.
            </summary>
            <param name="audioTrack">Audio track to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAudio.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AudioMetadata">
            <summary>
            Represents a collection of metadata categories associated with an audio asset.
            </summary>
            <remarks>This class provides access to various types of metadata, including descriptive, technical, legal, 
            and visual information. Each metadata category is represented by a corresponding property, which  can be used to
            retrieve or modify the associated metadata.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioMetadata.Descriptive">
            <summary>
            Gets or sets the descriptive metadata associated with the current object.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioMetadata.Extended">
            <summary>
            Gets or sets the extended metadata associated with the current object.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioMetadata.Technical">
            <summary>
            Gets or sets the technical metadata associated with the current object.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioMetadata.Legal">
            <summary>
            Gets or sets the legal metadata associated with the current object.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AudioMetadata.Visual">
            <summary>
            Gets or sets the visual metadata associated with the current object.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AudioMetadataProvider">
            <summary>
            Provides functionality to retrieve metadata for audio files.
            </summary>
            <remarks>This class is intended to be used for extracting and managing metadata such as title, artist, album, 
            and other relevant information from audio files. It supports various audio formats.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioMetadataProvider.#ctor(System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILogger{FluentUI.Blazor.Community.Components.AudioMetadataProvider})">
            <summary>
            Provides functionality to retrieve metadata for audio files.
            </summary>
            <remarks>This class is intended to be used for extracting and managing metadata such as title, artist, album, 
            and other relevant information from audio files. It supports various audio formats.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AudioMetadataProvider._fileExtensionContentTypeProvider">
            <summary>
            Provides a static instance of <see cref="T:Microsoft.AspNetCore.StaticFiles.FileExtensionContentTypeProvider"/> used to map file extensions to MIME
            content types.
            </summary>
            <remarks>This instance can be used to look up MIME types for file extensions. It is initialized with
            default mappings provided by the framework.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioMetadataProvider.GetFromFileAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            Asynchronously retrieves audio metadata from the specified file.
            </summary>
            <remarks>This method reads the file's content into memory and extracts metadata from the stream. 
            Ensure the file size is within the limits supported by the application to avoid memory issues.</remarks>
            <param name="browserFile">The file to extract audio metadata from. Must not be <c>null</c>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the extracted  <see
            cref="T:FluentUI.Blazor.Community.Components.AudioMetadata"/> if the operation is successful; otherwise, <c>null</c>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioMetadataProvider.GetFromStream(System.String,System.IO.Stream)">
            <summary>
            Extracts audio metadata from a given stream.
            </summary>
            <remarks>This method uses the TagLib library to parse the audio file and extract metadata. The
            extracted metadata includes information such as title, album, artists, duration, bitrate, and cover art. If the
            audio file is corrupt or in an unsupported format, the method logs the error and returns an empty <see
            cref="T:FluentUI.Blazor.Community.Components.AudioMetadata"/> object.</remarks>
            <param name="name">The name of the audio file, used for logging and identification purposes.</param>
            <param name="stream">The input stream containing the audio file data. The stream must be readable and seekable.</param>
            <returns>An <see cref="T:FluentUI.Blazor.Community.Components.AudioMetadata"/> object containing descriptive, technical, extended, legal, and visual metadata
            extracted from the audio file. Returns an empty <see cref="T:FluentUI.Blazor.Community.Components.AudioMetadata"/> object if the file is corrupt,
            unsupported, or an error occurs during processing.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AudioMetadataProvider.GetFromUrlAsync(System.String,System.String)">
            <summary>
            Retrieves audio metadata from a specified URL.
            </summary>
            <remarks>This method downloads the audio file from the specified URL, processes it in memory,  and
            extracts its metadata. Ensure that the URL points to a valid audio file.</remarks>
            <param name="name">The name to associate with the audio metadata.</param>
            <param name="url">The URL of the audio file. Can be <see langword="null"/> if no URL is provided.</param>
            <returns>An <see cref="T:FluentUI.Blazor.Community.Components.AudioMetadata"/> object containing the metadata of the audio file,  or <see langword="null"/> if
            the metadata could not be retrieved.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DescriptiveMetadata">
            <summary>
            Represents descriptive metadata for a musical track, including details such as title, album, performers, and other
            related information.
            </summary>
            <remarks>This class provides a structured way to store and access metadata commonly associated with musical
            tracks.  It includes properties for identifying the track's title, album, contributors, genres, and other
            descriptive details. All string array properties are initialized as empty arrays to ensure safe iteration.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DescriptiveMetadata.Title">
            <summary>
            Gets or sets the title associated with the object.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DescriptiveMetadata.Album">
            <summary>
            Gets or sets the name of the album associated with the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DescriptiveMetadata.Performers">
            <summary>
            Gets or sets the list of performers associated with the event.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DescriptiveMetadata.AlbumArtists">
            <summary>
            Gets or sets the list of album artists associated with the album.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DescriptiveMetadata.Composers">
            <summary>
            Gets or sets the list of composers associated with the current context.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DescriptiveMetadata.Conductor">
            <summary>
            Gets or sets the name of the conductor associated with the performance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DescriptiveMetadata.Genres">
            <summary>
            Gets or sets the list of genres associated with the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DescriptiveMetadata.Year">
            <summary>
            Gets or sets the year associated with the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DescriptiveMetadata.Comment">
            <summary>
            Gets or sets comments associated with the item.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ExtendedMetadata">
            <summary>
            Represents extended metadata for an audio file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExtendedMetadata.TrackNumber">
            <summary>
            Gets or sets the track number associated with the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExtendedMetadata.DiscNumber">
            <summary>
            Gets or sets the disc number associated with the item. 
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExtendedMetadata.TotalTracks">
            <summary>
            Gets or sets the total number of tracks in the collection.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExtendedMetadata.TotalDiscs">
            <summary>
            Gets or sets the total number of discs in a collection or set.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExtendedMetadata.Lyrics">
            <summary>
            Gets or sets the lyrics of the song.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExtendedMetadata.ISRC">
            <summary>
            Gets or sets the International Standard Recording Code (ISRC) associated with the recording.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExtendedMetadata.Grouping">
            <summary>
            Gets or sets the grouping identifier used to categorize related items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExtendedMetadata.BeatsPerMinute">
            <summary>
            Gets or sets the tempo of the music in beats per minute (BPM).
            </summary>
            <remarks>The value must be a positive integer. Common tempos range from 40 BPM (slow) to 200 BPM
            (fast),  but the property does not enforce specific limits.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IAudioMetadataProvider">
            <summary>
            Defines methods for retrieving audio metadata from various sources, such as URLs or uploaded files.
            </summary>
            <remarks>This interface provides asynchronous methods to extract metadata from audio files, including details
            such as title, artist, album, and duration. Implementations may support different audio formats and
            sources.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IAudioMetadataProvider.GetFromUrlAsync(System.String,System.String)">
            <summary>
            Asynchronously retrieves audio metadata from the specified URL.
            </summary>
            <remarks>This method performs an asynchronous operation to fetch and parse metadata from the provided
            URL. Ensure the URL points to a valid and accessible audio file.</remarks>
            <param name="url">The URL of the audio file to retrieve metadata from. Can be null or empty, in which case the method will return
            <see langword="null"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains an <see cref="T:FluentUI.Blazor.Community.Components.AudioMetadata"/>
            object with the metadata of the audio file, or <see langword="null"/> if the metadata could not be retrieved.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IAudioMetadataProvider.GetFromFileAsync(Microsoft.AspNetCore.Components.Forms.IBrowserFile)">
            <summary>
            Asynchronously retrieves audio metadata from the specified file.
            </summary>
            <param name="browserFile">The file from which to extract audio metadata. Must not be null.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the extracted  <see
            cref="T:FluentUI.Blazor.Community.Components.AudioMetadata"/> if the operation is successful; otherwise, <see langword="null"/>  if the metadata could
            not be retrieved.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IAudioMetadataProvider.GetFromStream(System.String,System.IO.Stream)">
            <summary>
            Extracts audio metadata from the specified stream.
            </summary>
            <remarks>The caller is responsible for ensuring the stream remains open and readable during the
            operation.  The method does not modify the position of the stream.</remarks>
            <param name="stream">The input stream containing audio data. The stream must be readable and positioned at the start of the audio
            content.</param>
            <returns>An <see cref="T:FluentUI.Blazor.Community.Components.AudioMetadata"/> object containing the extracted metadata, such as duration, format, and bitrate.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LegalMetadata">
            <summary>
            Represents metadata related to legal information, such as copyright and publisher details.
            </summary>
            <remarks>This class is typically used to store and manage legal information associated with a document, 
            product, or other content. Both properties are optional and can be set to <see langword="null"/>  if the
            corresponding information is not available.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LegalMetadata.Copyright">
            <summary>
            Gets or sets the copyright information associated with the application.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LegalMetadata.Publisher">
            <summary>
            Gets or sets the name of the publisher associated with the item.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.StreamFileAbstraction">
            <summary>
            Provides an abstraction for file operations using streams, implementing the <see
            cref="T:TagLib.File.IFileAbstraction"/> interface.
            </summary>
            <param name="name">Name or identifier of the abstraction.</param>
            <param name="readStream">Represents the readable stream.</param>
            <param name="writeStream">Represents the writeable stream.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.StreamFileAbstraction.#ctor(System.String,System.IO.Stream,System.IO.Stream)">
            <summary>
            Provides an abstraction for file operations using streams, implementing the <see
            cref="T:TagLib.File.IFileAbstraction"/> interface.
            </summary>
            <param name="name">Name or identifier of the abstraction.</param>
            <param name="readStream">Represents the readable stream.</param>
            <param name="writeStream">Represents the writeable stream.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.StreamFileAbstraction.Name">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.StreamFileAbstraction.ReadStream">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.StreamFileAbstraction.WriteStream">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.StreamFileAbstraction.CloseStream(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TechnicalMetadata">
            <summary>
            Represents technical metadata for a media file, including properties such as duration, bitrate, sample rate, and
            codec information.
            </summary>
            <remarks>This class provides a set of properties to describe the technical characteristics of a media file. 
            All properties are nullable, allowing for scenarios where specific metadata may not be available.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TechnicalMetadata.Duration">
            <summary>
            Gets or sets the duration of the operation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TechnicalMetadata.AudioBitrate">
            <summary>
            Gets or sets the bitrate of the media, in bits per second.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TechnicalMetadata.SampleRate">
            <summary>
            Gets or sets the sample rate, in hertz, for the audio processing operation.
            </summary>
            <remarks>The sample rate determines the number of audio samples processed per second. Ensure the value
            is compatible with the audio source and processing requirements.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TechnicalMetadata.AudioChannels">
            <summary>
            Gets or sets the number of channels to be used. 
            </summary>
            <remarks>A value of <see langword="null"/> indicates that the default number of channels will be
            used.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TechnicalMetadata.Codec">
            <summary>
            Gets or sets the codec used for encoding or decoding data.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TechnicalMetadata.MediaTypes">
            <summary>
            Gets or sets the media types associated with the file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TechnicalMetadata.FileType">
            <summary>
            Gets or sets the file type of the media, such as "audio/mpeg" or "video/mp4".
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TechnicalMetadata.FileSize">
            <summary>
            Gets or sets the size of the file in bytes.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.VisualMetadata">
            <summary>
            Represents visual metadata, including cover image URL, MIME type, description, and type.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VisualMetadata.CoverUrl">
            <summary>
            Gets or sets the URL of the cover image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VisualMetadata.MimeType">
            <summary>
            Gets or sets the MIME type of the cover image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VisualMetadata.Description">
            <summary>
            Gets or sets the description associated with the object.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VisualMetadata.Type">
            <summary>
            Gets or sets the type of the entity or object.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MinimalPlayer">
            <summary>
            Represents a minimal audio player component with play/pause functionality.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MinimalPlayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.MinimalPlayer"/> class with a unique identifier.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MinimalPlayer.OnPlayPause">
            <summary>
            Gets or sets the event callback that is triggered when the play/pause button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MinimalPlayer.PlayLabel">
            <summary>
            Gets or sets the label for the play button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MinimalPlayer.PauseLabel">
            <summary>
            Gets or sets the label for the pause button.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TrackInfo">
            <summary>
            Represents a component that displays information about an audio track.
            </summary>
            <remarks>This class is used to manage and display details about a specific audio track.  The <see
            cref="P:FluentUI.Blazor.Community.Components.TrackInfo.Track"/> property can be set to specify the audio track  for which information should be
            displayed.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.TrackInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.TrackInfo"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TrackInfo.Track">
            <summary>
            Gets or sets the current audio track to display information for.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TrackInfo.OnClick">
            <summary>
            Gets or sets the callback that is invoked when the track info component is clicked.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.TrackInfo.OnHandleClickAsync">
            <summary>
            Handles the click event by invoking the associated callback with the current track.
            </summary>
            <remarks>This method checks if a track is available and if a callback delegate is assigned before
            invoking the callback asynchronously.</remarks>
            <returns></returns>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TrackProperties.Labels">
            <summary>
            Gets or sets the set of audio labels to be used for classification or annotation.
            </summary>
            <remarks>The default value is <see cref="P:FluentUI.Blazor.Community.Components.AudioLabels.Default"/>. Changing this property allows
            customization of the labels used in audio processing scenarios.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TrackProperties.Content">
            <summary>
            Gets or sets the audio track item associated with this instance.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.VisualizerMode">
            <summary>
            Represents the different modes available for the audio visualizer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VisualizerMode.Spectrum">
            <summary>
            Represents the spectrum dispaly mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VisualizerMode.Waveform">
            <summary>
            Represents the waveform display mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VisualizerMode.Spatial">
            <summary>
            Represents the spatial display mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VisualizerMode.Vortex">
            <summary>
            Represents the vortex display mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VisualizerMode.Particles">
            <summary>
            Represents a particles field.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VisualizerMode.RadialWaveform">
            <summary>
            Represents a radial waveform.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VisualizerMode.Tunnel">
            <summary>
            Represents a tunnel.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VisualizerMode.Constellation">
            <summary>
            Represents a constellation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.VisualizerMode.Fractal">
            <summary>
            Represents a fractal.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Chapter">
            <summary>
            Represents a chapter within a media file, defined by its start and end times, title, and status.
            </summary>
            <remarks>This record is commonly used to represent segments of a media file, such as chapters in an audiobook
            or scenes in a video. The <see cref="P:FluentUI.Blazor.Community.Components.Chapter.Start"/> and <see cref="P:FluentUI.Blazor.Community.Components.Chapter.End"/> properties define the time range of the chapter,
            while the <see cref="P:FluentUI.Blazor.Community.Components.Chapter.Title"/> provides a descriptive name. The <see cref="P:FluentUI.Blazor.Community.Components.Chapter.Status"/> indicates the current state of
            the chapter, such as whether it is active or inactive.</remarks>
            <param name="Start">The start time of the chapter, in seconds. Must be greater than or equal to 0.</param>
            <param name="End">The end time of the chapter, in seconds. Must be greater than <paramref name="Start"/>.</param>
            <param name="Title">The title of the chapter. Cannot be null or empty.</param>
            <param name="Status">The status of the chapter, indicating its current state.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Chapter.#ctor(System.Double,System.Double,System.String,FluentUI.Blazor.Community.Components.ChapterStatus)">
            <summary>
            Represents a chapter within a media file, defined by its start and end times, title, and status.
            </summary>
            <remarks>This record is commonly used to represent segments of a media file, such as chapters in an audiobook
            or scenes in a video. The <see cref="P:FluentUI.Blazor.Community.Components.Chapter.Start"/> and <see cref="P:FluentUI.Blazor.Community.Components.Chapter.End"/> properties define the time range of the chapter,
            while the <see cref="P:FluentUI.Blazor.Community.Components.Chapter.Title"/> provides a descriptive name. The <see cref="P:FluentUI.Blazor.Community.Components.Chapter.Status"/> indicates the current state of
            the chapter, such as whether it is active or inactive.</remarks>
            <param name="Start">The start time of the chapter, in seconds. Must be greater than or equal to 0.</param>
            <param name="End">The end time of the chapter, in seconds. Must be greater than <paramref name="Start"/>.</param>
            <param name="Title">The title of the chapter. Cannot be null or empty.</param>
            <param name="Status">The status of the chapter, indicating its current state.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Chapter.Start">
            <summary>The start time of the chapter, in seconds. Must be greater than or equal to 0.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Chapter.End">
            <summary>The end time of the chapter, in seconds. Must be greater than <paramref name="Start"/>.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Chapter.Title">
            <summary>The title of the chapter. Cannot be null or empty.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Chapter.Status">
            <summary>The status of the chapter, indicating its current state.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ChapterStatus">
            <summary>
            Represents the status of a chapter in media content.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ChapterStatus.Unspecified">
            <summary>
            Represents an unspecified state.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ChapterStatus.NotStarted">
            <summary>
            Represents the state of a chapter that has not yet started.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ChapterStatus.Current">
            <summary>
            Represents the state of a chapter that is currently in progress.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ChapterStatus.Completed">
            <summary>
            Represents the state of a chapter that has been completed.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ColorPaletteEasing">
            <summary>
            Represents the easing functions available for color transitions in the ColorPalette component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteEasing.Linear">
            <summary>
            Represents a linear easing function, where the transition progresses at a constant rate.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteEasing.ExponentialIn">
            <summary>
            Represents an ease-in easing function, where the transition starts slowly and accelerates towards the end.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteEasing.ExponentialOut">
            <summary>
            Represents an ease-out easing function, where the transition starts quickly and decelerates towards the end.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteEasing.Sine">
            <summary>
            Represents an ease-in-out easing function, where the transition starts slowly, accelerates in the middle, and decelerates towards the end.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ColorPaletteItem">
            <summary>
            Represents an individual color option in a color palette.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ColorPaletteItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.ColorPaletteItem"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.Color">
            <summary>
            Gets or sets the color value for this palette item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.Size">
            <summary>
            Gets or sets the size of the color square in pixels. Default is 32.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.IsFocused">
            <summary>
            Gets or sets a value indicating whether this item is focused.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether this item is selected.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.OnClick">
            <summary>
            Gets or sets the callback to invoke when the item is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.IsAnimated">
            <summary>
            Gets or sets a value indicating whether the selection change should be animated.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.OnReady">
            <summary>
            Gets or sets the callback to invoke when the component is ready.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ColorPaletteItem.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ColorPaletteMode">
            <summary>
            Represents the mode used for generating color palettes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.None">
            <summary>
            Represents no specific palette mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Provided">
            <summary>
            Represents a palette mode where colors are provided directly.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Random">
            <summary>
            Represents a palette mode where colors are generated randomly.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Gradient">
            <summary>
            Represents a palette mode where colors are generated in a gradient.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.CustomGradient">
            <summary>
            Represents a palette mode where colors are generated using a custom gradient.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Complementary">
            <summary>
            Represents a palette mode where colors are generated using complementary colors.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Analogous">
            <summary>
            Represents a palette mode where colors are generated using analogous colors.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Triadic">
            <summary>
            Represents a palette mode where colors are generated using triadic colors.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Tetradic">
            <summary>
            Represents a palette mode where colors are generated using tetradic colors.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.SplitComplementary">
            <summary>
            Represents a palette mode where colors are generated using split-complementary colors.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Monochrome">
            <summary>
            Represents a palette mode where colors are generated in a monochrome scheme.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Warm">
            <summary>
            Represents a palette mode where colors are generated in a warm scheme with variations.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Cool">
            <summary>
            Represents a palette mode where colors are generated in a cool scheme with cool variations.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Pastel">
            <summary>
            Represents a palette mode where colors are generated in a pastel scheme.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Neon">
            <summary>
            Represents a palette mode where colors are generated in a vibrant scheme.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Greyscale">
            <summary>
            Represents a palette mode where colors are generated in a greyscale scheme.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.AccessibilitySafe">
            <summary>
            Represents a palette mode where colors are generated to be accessibility safe.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.FromImage">
            <summary>
            Represents a palette mode where colors are generated based on an image.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Desaturate">
            <summary>
            Represents a palette mode where colors are generated in a desaturated scheme.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxColorPalette">
            <summary>
            Represents a customizable color palette component that supports various color generation modes, gradient strategies,
            and selection options.
            </summary>
            <remarks>This component allows users to generate and interact with a color palette using predefined modes,
            gradients, or custom plugins. It supports single and multi-selection of colors, as well as advanced customization
            options such as grid layout, item size, and maximum color limits. The palette can also be populated from an image or
            preset configurations.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette.DefaultProvided">
            <summary>
            Represents the default set of colors provided by the palette when no custom colors are specified.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette.JavaScriptModulePath">
            <summary>
            Represents the path to the JavaScript module associated with the color palette component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette._jsModule">
            <summary>
            Represents the javascript module reference for the color palette component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette._buttonsRef">
            <summary>
            Represents a unique identifier for the color palette instance.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette.HarmonyModes">
            <summary>
            Represents the list of harmony modes available for color generation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette._colors">
            <summary>
            Represents the list of colors currently generated and displayed in the palette.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette._focusIndex">
            <summary>
            Represents the index of the currently focused item.
            </summary>
            <remarks>This field is used to track the position of the focused item within a collection or
            list.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette._errorMessage">
            <summary>
            Represents an error message that may be displayed to the user.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxColorPalette"/> class.
            </summary>
            <remarks>This constructor generates a unique identifier for the instance using <see
            cref="M:Microsoft.FluentUI.AspNetCore.Components.Identifier.NewId(System.Int32)"/>.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GlobalState">
            <summary>
            Gets or sets the global state service for localization and directionality.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.Runtime">
            <summary>
            Gets or sets the JavaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.HarmonyLabel">
            <summary>
            Gets or sets the label for the harmony mode picker. Default is "Harmony".
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.PresetLabel">
            <summary>
            Gets or sets the label for the preset picker. Default is "Presets".
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.Columns">
            <summary>
            Gets or sets the number of columns in the color grid layout. Default is 10.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ItemSize">
            <summary>
            Gets or sets the size of each color item in the grid, in pixels. Default is 28.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GridGap">
            <summary>
            Gets or sets the gap between grid items, in pixels. Default is 6.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MaxHeight">
            <summary>
            Gets or sets the maximum height of the color palette container, in pixels. Default is 300.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.Mode">
            <summary>
            Gets or sets the color generation mode for the palette. Default is <see cref="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Provided"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ProvidedColors">
            <summary>
            Gets or sets a list of user-provided colors to be used when the mode is set to <see cref="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Provided"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.Presets">
            <summary>
            Gets or sets a dictionary of preset color lists that can be selected by the user.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SelectedPreset">
            <summary>
            Gets or sets the key of the currently selected preset from the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.Presets"/> dictionary.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.BaseColor">
            <summary>
            Gets or sets the base color used for generating gradients and color schemes. Default is "#3B82F6".
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GradientStrategy">
            <summary>
            Gets or sets the strategy used for generating gradients. Default is <see cref="F:FluentUI.Blazor.Community.Components.GradientStrategy.Shades"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GradientSteps">
            <summary>
            Gets or sets the number of steps to use when generating gradients. Default is 24.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GradientStart">
            <summary>
            Gets or sets the starting color for custom gradient generation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GradientEnd">
            <summary>
            Gets or sets the ending color for custom gradient generation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GenerationOptions">
            <summary>
            Gets or sets additional options for color generation, such as brightness and contrast adjustments.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ShowHarmonyPicker">
            <summary>
            Gets or sets a value indicating whether to display the harmony mode picker when applicable.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MultiSelect">
            <summary>
            Gets or sets a value indicating whether multiple colors can be selected simultaneously.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SelectedColor">
            <summary>
            Gets or sets the currently selected color when <see cref="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MultiSelect"/> is false.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SelectedColorChanged">
            <summary>
            Gets or sets an event callback that is invoked when the selected color changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SelectedColors">
            <summary>
            Gets or sets the list of currently selected colors when <see cref="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MultiSelect"/> is true.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SelectedColorsChanged">
            <summary>
            Gets or sets an event callback that is invoked when the list of selected colors changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ShowPreview">
            <summary>
            Gets or sets a value indicating whether to show a preview of the selected color(s) above the palette.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.Plugins">
            <summary>
            Gets or sets a list of custom color plugins that can be used to generate additional color schemes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MaxColors">
            <summary>
            Gets or sets the maximum number of colors to generate in the palette. Default is 120.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ImageDataProvider">
            <summary>
            Gets or sets a function that provides the data of an image to extract colors from when the mode is set to <see cref="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.FromImage"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ComputedRows">
            <summary>
            Gets the computed number of rows in the color grid based on the number of colors and columns.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SelectedColorsSet">
            <summary>
            Gets a set of selected colors for efficient lookup.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.HarmonyModeString">
            <summary>
            Gets or sets the harmony mode as a string for binding purposes.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GenerateColorsAsync">
            <summary>
            Generates the color palette based on the current settings and parameters.
            </summary>
            <returns>Returns a task which generates the colors of the palette when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ToggleSelectAsync(System.String,System.Int32)">
            <summary>
            Toggles the selection state of a color at the specified index.
            </summary>
            <param name="hex">Selected color to toggle.</param>
            <param name="index">Index of the selected color.</param>
            <returns>Returns a task which toggle the color when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SetFocusAsync(System.Int32)">
            <summary>
            Sets focus to the button at the specified index.
            </summary>
            <param name="index">Index of the button to focus.</param>
            <returns>Returns a task which focus the button at the specified index when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.OnGridKeyDownAsync(Microsoft.FluentUI.AspNetCore.Components.FluentKeyCodeEventArgs)">
            <summary>
            Manages keyboard navigation within the color grid.
            </summary>
            <param name="e">Event args associated to this instance.</param>
            <returns>Returns a task which navigates withing the color grid when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MoveLeft(System.Int32)">
            <summary>
            Moves the focus to the left in the color grid, wrapping around if necessary.
            </summary>
            <param name="index">Current index of the focus.</param>
            <returns>Returns the new index of the focus.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MoveRight(System.Int32)">
            <summary>
            Moves the focus to the right in the color grid, wrapping around if necessary.
            </summary>
            <param name="index">Current index of the focus.</param>
            <returns>Returns the new index of the focus.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MoveUp(System.Int32)">
            <summary>
            Moves the focus up in the color grid, wrapping around if necessary.
            </summary>
            <param name="index">Current index of the focus.</param>
            <returns>Returns the new index of the focus.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MoveDown(System.Int32)">
            <summary>
            Moves the focus down in the color grid, wrapping around if necessary.
            </summary>
            <param name="index">Current index of the focus.</param>
            <returns>Returns the new index of the focus.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GenerationOptions">
            <summary>
            Represents the options for generating a color palette in the ColorPalette component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GenerationOptions.SaturationMin">
            <summary>
            Gets or sets the minimum saturation value for the color palette generation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GenerationOptions.SaturationMax">
            <summary>
            Gets or sets the maximum saturation value for the color palette generation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GenerationOptions.LightnessMin">
            <summary>
            Gets or sets the minimum lightness value for the color palette generation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GenerationOptions.LightnessMax">
            <summary>
            Gets or sets the maximum lightness value for the color palette generation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GenerationOptions.Reverse">
            <summary>
            Gets or sets a value indicating whether the generated colors should be in reverse order.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GenerationOptions.Easing">
            <summary>
            Gets or sets the easing function to be used for color transitions in the palette.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GradientStrategy">
            <summary>
            Represents the strategy used to generate color gradients.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GradientStrategy.Shades">
            <summary>
            Represents a gradient strategy that generates shades of a color.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GradientStrategy.Tints">
            <summary>
            Represents a gradient strategy that generates tints of a color.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GradientStrategy.Saturation">
            <summary>
            Represents a gradient strategy that generates tones of a color.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GradientStrategy.HueShift">
            <summary>
            Represents a gradient strategy that shifts the hue of a color.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IColorPlugin">
            <summary>
            Represents a plugin for generating color palettes based on a base color and specified options.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IColorPlugin.Name">
            <summary>
            Gets the name of the color plugin.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IColorPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <summary>
            Generates a list of color variations based on the specified base color.
            </summary>
            <param name="baseColor">The base color from which variations will be generated. Must be a valid color string (e.g., a hex code or color
            name).</param>
            <param name="steps">The number of variations to generate. Must be a positive integer.</param>
            <param name="options">An object specifying additional options for color generation, such as brightness or saturation adjustments.</param>
            <returns>A list of strings representing the generated color variations. The list will contain exactly <paramref
            name="steps"/> items.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AccessibilitySafePlugin">
            <summary>
            Returns a predefined set of colors that are designed to be accessible and distinguishable.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccessibilitySafePlugin._safeColors">
            <summary>
            Represents a set of colors that are designed to be accessible and distinguishable.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccessibilitySafePlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AccessibilitySafePlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AnalogousPlugin">
            <summary>
            Represents a plugin that generates analogous color palettes based on a base color.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnalogousPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnalogousPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ComplementaryPlugin">
            <summary>
            Provides functionality to generate a complementary color gradient based on a specified base color.
            </summary>
            <remarks>This plugin calculates the complementary color of the given base color and generates a gradient using
            the complementary color as the starting point. The gradient is created based on the specified number of steps and
            generation options.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ComplementaryPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ComplementaryPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CoolPlugin">
            <summary>
            Represents a plugin that generates a gradient of colors based on a specified base color and options.
            </summary>
            <remarks>This plugin is designed to generate a gradient starting from a predefined base color of blue. The
            gradient generation process can be customized using the specified number of steps and additional options.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CoolPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CoolPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DesaturatePlugin">
            <summary>
            Represents a plugin that desaturates a base color by reducing its saturation level.
            </summary>
            <remarks>The desaturation amount is specified as a value between 0 and 1, where 0 leaves the color unchanged
            and 1 completely removes saturation, resulting in a grayscale color. This plugin generates a gradient of desaturated
            colors based on the specified number of steps and generation options.</remarks>
            <param name="amount"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DesaturatePlugin.#ctor(System.Double)">
            <summary>
            Represents a plugin that desaturates a base color by reducing its saturation level.
            </summary>
            <remarks>The desaturation amount is specified as a value between 0 and 1, where 0 leaves the color unchanged
            and 1 completely removes saturation, resulting in a grayscale color. This plugin generates a gradient of desaturated
            colors based on the specified number of steps and generation options.</remarks>
            <param name="amount"></param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DesaturatePlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DesaturatePlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DualHuePlugin">
            <summary>
            Represents a color plugin that generates a gradient between two hues.
            </summary>
            <remarks>This plugin creates a gradient by blending a base color with a secondary color. The secondary color
            is specified during the initialization of the plugin.</remarks>
            <param name="secondaryHex"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DualHuePlugin.#ctor(System.String)">
            <summary>
            Represents a color plugin that generates a gradient between two hues.
            </summary>
            <remarks>This plugin creates a gradient by blending a base color with a secondary color. The secondary color
            is specified during the initialization of the plugin.</remarks>
            <param name="secondaryHex"></param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DualHuePlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DualHuePlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GrayscalePlugin">
            <summary>
            Represents a plugin that generates a series of greyscale colors.
            </summary>
            <remarks>This plugin implements the <see cref="T:FluentUI.Blazor.Community.Components.IColorPlugin"/> interface and generates greyscale colors by
            varying the lightness component while keeping hue and saturation fixed at zero.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GrayscalePlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GrayscalePlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MonochromaticPlugin">
            <summary>
            Represents a plugin that generates a monochromatic color palette based on a given base color.
            </summary>
            <remarks>This plugin creates a gradient of colors with a constant hue, varying only in saturation and
            lightness. It is useful for generating visually cohesive color schemes where all colors share the same
            hue.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MonochromaticPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MonochromaticPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.NeonPlugin">
            <summary>
            Represents a plugin that generates a sequence of neon-like colors based on a specified base color.
            </summary>
            <remarks>This plugin implements the <see cref="T:FluentUI.Blazor.Community.Components.IColorPlugin"/> interface and generates colors by varying the
            hue of the base color across the HSL color space. The resulting colors are designed to have maximum saturation and a
            fixed lightness, creating a vibrant neon effect.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.NeonPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.NeonPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PastelPlugin">
            <summary>
            Represents a plugin that generates a pastel color gradient based on a specified base color.
            </summary>
            <remarks>This plugin adjusts the saturation and lightness of the base color to create a pastel effect and
            generates a gradient using a hue-shifting strategy.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PastelPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PastelPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SplitComplementaryPlugin">
            <summary>
            Represents a plugin that generates color palettes based on the split-complementary color scheme.
            </summary>
            <remarks>The split-complementary color scheme is a variation of the complementary color scheme.  It uses a
            base color and two colors adjacent to the base color's complement on the color wheel. This plugin generates
            gradients for each of the three colors in the scheme, combining them into a single palette.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SplitComplementaryPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SplitComplementaryPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TetradicPlugin">
            <summary>
            Generates a tetradic color scheme based on the specified base color, number of steps, and generation options.
            </summary>
            <remarks>A tetradic color scheme consists of four colors evenly spaced around the color wheel (90° apart).
            This method generates gradients for each of the four colors, distributing the specified number of steps across the
            gradients. The resulting list contains all generated colors in sequence.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TetradicPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.TetradicPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TriadicPlugin">
            <summary>
            Generates a triadic color palette based on the specified base color.
            </summary>
            <remarks>A triadic color scheme is created by selecting three colors that are evenly spaced around the color
            wheel (120 degrees apart in hue). This method generates gradients for each of the three colors and combines them
            into a single palette.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TriadicPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.TriadicPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.WarmPlugin">
            <summary>
            Represents a plugin that generates a gradient of warm colors.
            </summary>
            <remarks>This plugin generates a gradient transitioning from red to gold. It can be used to create warm color
            palettes for various applications, such as UI design or data visualization.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.WarmPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.WarmPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CookieChoices">
            <summary>
            Represents the available choices for the cookie.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CookieChoices.AcceptOnly">
            <summary>
            The user can only accept the cookies.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CookieChoices.AcceptDeny">
            <summary>
            The user can accept or deny the cookies.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CookieChoices.AcceptDenyManage">
            <summary>
            The user can accept, deny or manage the cookies.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CookieData">
            <summary>
            Represents the content of the <see cref="T:FluentUI.Blazor.Community.Components.ManageCookie"/> dialog.
            </summary>
            <param name="Items">Items to activate / deactivate.</param>
            <param name="Labels">Labels to localize some part of the <see cref="T:FluentUI.Blazor.Community.Components.ManageCookie"/> dialog.</param>
            <param name="ItemTemplate">Template to render the items in the dialog.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CookieData.#ctor(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.CookieItem},FluentUI.Blazor.Community.Components.CookieLabels,Microsoft.AspNetCore.Components.RenderFragment{FluentUI.Blazor.Community.Components.CookieItem})">
            <summary>
            Represents the content of the <see cref="T:FluentUI.Blazor.Community.Components.ManageCookie"/> dialog.
            </summary>
            <param name="Items">Items to activate / deactivate.</param>
            <param name="Labels">Labels to localize some part of the <see cref="T:FluentUI.Blazor.Community.Components.ManageCookie"/> dialog.</param>
            <param name="ItemTemplate">Template to render the items in the dialog.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieData.Items">
            <summary>Items to activate / deactivate.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieData.Labels">
            <summary>Labels to localize some part of the <see cref="T:FluentUI.Blazor.Community.Components.ManageCookie"/> dialog.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieData.ItemTemplate">
            <summary>Template to render the items in the dialog.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CookieItem">
            <summary>
            Represents a cookie item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItem.Name">
            <summary>
            Gets or sets the name of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItem.Title">
            <summary>
            Gets or sets the title of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItem.Description">
            <summary>
            Gets or sets the description of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItem.IsActive">
            <summary>
            Gets or sets a value indicating if the item is active.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItem.Disabled">
            <summary>
            Gets or sets a value indicating that the item is disabled.
            </summary>
            <remarks>
            A disabled cookie item defines a mandatory item.
            </remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CookieItem.CreateGoogleAnalyticsCookie(System.String)">
            <summary>
            Gets the cookie item for the google analytics view.
            </summary>
            <param name="description">Description of the cookie.</param>
            <returns>Returns the cookie.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CookieItemView">
            <summary>
            Represents a view for a <see cref="T:FluentUI.Blazor.Community.Components.CookieItem"/>.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CookieItemView.#ctor">
            <summary>
            Initializes a new instance of the class <see cref="T:FluentUI.Blazor.Community.Components.CookieItemView"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItemView.Item">
            <summary>
            Gets or sets the item to render.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItemView.Template">
            <summary>
            Gets or sets the template of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItemView.ShowDivider">
            <summary>
            Gets or sets a value indicating that a divider is shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItemView.AcceptLabel">
            <summary>
            Gets or sets the accept label button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItemView.DeclineLabel">
            <summary>
            Gets or sets the decline label button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItemView.OnActivationChanged">
            <summary>
            Gets or sets the event callback to raise when the <see cref="P:FluentUI.Blazor.Community.Components.CookieItem.IsActive" /> parameter changed.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CookieItemView.OnActivationChangedAsync">
            <summary>
            Occurs when the activation has changed.
            </summary>
            <returns>Returns a task which invokes <see cref="P:FluentUI.Blazor.Community.Components.CookieItemView.OnActivationChanged"/> when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CookieLabels">
            <summary>
            Represents the labels used in a cookie consent component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.Default">
            <summary>
            Gets the default instance of the <see cref="T:FluentUI.Blazor.Community.Components.CookieLabels"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.French">
            <summary>
            Gets the french instance of the <see cref="T:FluentUI.Blazor.Community.Components.CookieLabels"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.Title">
            <summary>
            Gets or sets the title of the cookie consent dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.PrimaryDescription">
            <summary>
            Gets or sets the primary description of the cookie consent dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.SecondaryDescription">
            <summary>
            Gets or sets the secondary description of the cookie consent dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.Accept">
            <summary>
            Gets or sets the label for the accept button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.Decline">
            <summary>
            Gets or sets the label for the decline button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.ManageCookies">
            <summary>
            Gets or sets the label for the manage cookies button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.PrivacyStatement">
            <summary>
            Gets or sets the label for the privacy statement link.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.ThirdPartyCookies">
            <summary>
            Gets or sets the label for third-party cookies section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.ManageCookiesTitle">
            <summary>
            Gets or sets the title for the manage cookies dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.SaveChanges">
            <summary>
            Gets or sets the label for the save changes button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.Cancel">
            <summary>
            Gets or sets the label for the cancel button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.GoogleAnalyticsDescription">
            <summary>
            Gets or sets the description for Google Analytics cookies.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.ShowCookieDialogTitle">
            <summary>
            Gets or sets the title for the button that shows the cookie dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.HideCookieDialogTitle">
            <summary>
            Gets or sets the title for the button that hides the cookie dialog.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CookieView">
            <summary>
            Represents the view of the cookie dialog.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CookieView.Default">
            <summary>
            The cookie dialog is centered on the screen.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CookieView.Small">
            <summary>
            The cookie dialog is set to the bottom-right on the screen.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxCookie">
            <summary>
            Represents the cookie dialog.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie._isMobile">
            <summary>
            Gets or sets a value indicating whether the device is a mobile device or not.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie._showCookieDialog">
            <summary>
            Represents a value that show the dialog or not.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie._manageCookieVisible">
            <summary>
            Gets or sets a value indicating whether the open button is disabled when the manage cookies dialog is visible.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie.JavascriptFilename">
            <summary>
            Represents the javascript file to load.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie._module">
            <summary>
            Represents the javascript module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie.GoogleAnalytics">
            <summary>
            Represents the google analytics item.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie._cookieState">
            <summary>
            Represents the cookies to accept or deny.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie._renderActionButtons">
            <summary>
            Represents the actions buttons to render.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Runtime">
            <summary>
            Gets or sets the javascript runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.DialogService">
            <summary>
            Gets or sets the dialog service.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.DeviceInfoState">
            <summary>
            Gets or sets the device info state.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.View">
            <summary>
            Gets or sets the view of the cookie dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Choices">
            <summary>
            Gets or sets the choices to close the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.DefaultViewContent">
            <summary>
            Gets or sets the default view content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.SmallViewContent">
            <summary>
            Gets or sets the small view content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.ItemTemplate">
            <summary>
            Gets or sets the template to render the item in the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Items">
            <summary>
            Gets or sets the cookies to accept or deny.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Labels">
            <summary>
            Gets or sets the labels of the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.PrivacyStatementUrl">
            <summary>
            Gets or sets the privacy statement url.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.ThirdPartyCookiesUrl">
            <summary>
            Gets or sets the third party cookie url.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Width">
            <summary>
            Gets or sets the width of the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Height">
            <summary>
            Gets or sets the height of the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.OnInitActiveCookie">
            <summary>
            Gets or sets the event callback to raise when an active cookie is selected.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.CookieEmoji">
            <summary>
            Gets or sets the emoji to represent the cookie.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.GoogleAnalyticsId">
            <summary>
            Gets or sets the Google analytics id.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Modal">
            <summary>
            Gets or sets a value indicating whether the dialog is modal or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.OpenButtonPosition">
            <summary>
            Gets or sets the position of the open button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.OpenConsentVisibility">
            <summary>
            Gets or sets a value indicating whether the open button is visible or not.
            </summary>
            <remarks>
            When this property is set to <see cref="F:FluentUI.Blazor.Community.Components.OpenCookieVisibility.Always" />, the user can open the cookie dialog again to change his cookie preferences.
            When this property is set to <see cref="F:FluentUI.Blazor.Community.Components.OpenCookieVisibility.Never" />, the user cannot open the cookie dialog again after he accepted or declined the cookies.
            When this property is set to <see cref="F:FluentUI.Blazor.Community.Components.OpenCookieVisibility.WhenFirstHidden" />, the user can open the cookie dialog again only if he accepted or declined the cookies the first time.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.CloseButtonIcon">
            <summary>
            Gets or sets the icon of the close button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.OpenButtonIcon">
            <summary>
            Gets or sets the icon of the open button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.RelativeContainerId">
            <summary>
            Gets or sets the id of the container to which the dialog is relative.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.IsDescriptionMarkup">
            <summary>
            Gets or sets a value indicating whether the descriptions contains markup or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.SwitchToMobileDeviceWidth">
            <summary>
            Gets or sets the width under which the dialog switch to the mobile device view.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.InternalCss">
            <summary>
            Gets the css to use for the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.InternalStyle">
            <summary>
            Gets the style to use for the dialog.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.InitOtherCookiesAsync(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.CookieItem})">
            <summary>
            Initializes all other active cookies in an asynchronous way.
            </summary>
            <param name="items">Items to initialize.</param>
            <returns>Returns a task which initialize all active cookies when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.StoreCookieAsync(System.Boolean)">
            <summary>
            Stores the cookies in the local storage in an asynchronous way.
            </summary>
            <param name="activated">Indicates if the cookie is active or not.</param>
            <returns>Returns a task wich stores the cookies in the local storage in an asynchronous way.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.StoreCookieInternalAsync(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.CookieItem})">
            <summary>
            Stores the cookies in the local storage in an asynchronous way.
            </summary>
            <param name="value">Cookies to store.</param>
            <returns>Returns a task wich stores the cookies in the local storage in an asynchronous way.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.InitGoogleAnalyticsAsync">
            <summary>
            Initializes the Google Analytics cookie if activated.
            </summary>
            <returns>Returns a task which actives the Google Analytics cookie when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.DeleteCookieAsync">
            <summary>
            Deletes the cookie from the local storage in an asynchronous way.
            </summary>
            <returns>Returns a task which deletes the cookie from the local storage when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.OnAcceptAsync">
            <summary>
            Occurs when the Accept button is clicked.
            </summary>
            <returns>Returns a task which active all cookies when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.OnDeclineAsync">
            <summary>
            Occurs when the Decline button is clicked.
            </summary>
            <returns>Returns a task which deactive all cookies when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.OnManageCookiesAsync">
            <summary>
            Occurs when the Manage Cookies button is clicked.
            </summary>
            <returns>Returns a task which manage the cookie dialog when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ManageCookie">
            <summary>
            Represents the dialog to manage the cookies.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ManageCookie.Dialog">
            <summary>
            Gets or sets the parent dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ManageCookie.Content">
            <summary>
            Gets or sets the content of the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ManageCookie.ButtonsDisabled">
            <summary>
            Gets a value indicating that the buttons are disabled or not.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ManageCookie.OnCancelAsync">
            <summary>
            Closes the dialog with a cancel result.
            </summary>
            <returns>Returns a task which closes the dialog with a cancel result.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ManageCookie.OnSaveAsync">
            <summary>
            Closes the dialog with an ok result.
            </summary>
            <returns>Returns a task which closes the dialog with an ok result.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.OpenCookieVisibility">
            <summary>
            Represents the visibility options for the open button in a cookie consent component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OpenCookieVisibility.Always">
            <summary>
            The open button is always visible.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OpenCookieVisibility.Never">
            <summary>
            The open button is never visible.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OpenCookieVisibility.WhenFirstHidden">
            <summary>
            The open button is visible only when the first cookie consent banner is hidden.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Cursor">
            <summary>
            Represents the different types of cursors that can be used in the Fluent UI Blazor Community components.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.None">
            <summary>
            No cursor is specified.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Auto">
            <summary>
            Cursor is set automatically based on context.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Default">
            <summary>
            Cursor is the default arrow cursor.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.ContextMenu">
            <summary>
            Cursor indicates a context menu is available, typically a pointer with a small menu icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Help">
            <summary>
            Cursor indicates help is available, typically a question mark or a pointer with a question mark.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Pointer">
            <summary>
            Cursor indicates a clickable item, typically a hand icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Progress">
            <summary>
            Cursor indicates a progress action is occurring, typically a pointer with a spinning circle or hourglass.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Wait">
            <summary>
            Cursor indicates that the user should wait, typically an hourglass or spinning circle.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Cell">
            <summary>
            Cursor indicates a cell selection, typically a plus sign.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Crosshair">
            <summary>
            Cursor indicates crosshair selection, typically a crosshair icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Text">
            <summary>
            Cursor indicates text selection, typically an I-beam icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.VerticalText">
            <summary>
            Cursor indicates vertical text selection, typically an horizontal I-beam icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Alias">
            <summary>
            Cursor indicates an alias action, typically a pointer with a small arrow.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Copy">
            <summary>
            Cursor indicates a copy action, typically a pointer with a small plus sign.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Move">
            <summary>
            Cursor indicates a move action, typically a pointer with four arrows.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NoDrop">
            <summary>
            Cursor indicates no drop action, typically a circle with a line through it.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NotAllowed">
            <summary>
            Cursor indicates that an action is not allowed, typically a circle with a line through it.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Grab">
            <summary>
            Cursor indicates grabbing action, typically a hand icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Grabbing">
            <summary>
            Cursor indicates grabbing action, typically a closed hand icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.AllScroll">
            <summary>
            Cursor indicates all-direction scrolling, typically a four-arrow icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.ColResize">
            <summary>
            Cursor indicates column resizing, typically a horizontal double arrow.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.RowResize">
            <summary>
            Cursor indicates row resizing, typically a vertical double arrow.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NResize">
            <summary>
            Cursor indicates north resizing, typically a vertical double arrow pointing up and down.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.EResize">
            <summary>
            Cursor indicates east resizing, typically a horizontal double arrow pointing left and right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.SResize">
            <summary>
            Cursor indicates south resizing, typically a vertical double arrow pointing up and down.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.WResize">
            <summary>
            Cursor indicates west resizing, typically a horizontal double arrow pointing left and right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NeResize">
            <summary>
            Cursor indicates northeast resizing, typically a diagonal double arrow pointing top-right and bottom-left.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NwResize">
            <summary>
            Cursor indicates northwest resizing, typically a diagonal double arrow pointing top-left and bottom-right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.SeResize">
            <summary>
            Cursor indicates southeast resizing, typically a diagonal double arrow pointing top-left and bottom-right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.SwResize">
            <summary>
            Cursor indicates southwest resizing, typically a diagonal double arrow pointing top-right and bottom-left.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.EwResize">
            <summary>
            Cursor indicates east-west resizing, typically a horizontal double arrow pointing left and right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NsResize">
            <summary>
            Cursor indicates north-south resizing, typically a vertical double arrow pointing up and down.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NeswResize">
            <summary>
            Cursor indicates northeast-southwest resizing, typically a diagonal double arrow pointing top-right and bottom-left.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NwseResize">
            <summary>
            Cursor indicates northwest-southeast resizing, typically a diagonal double arrow pointing top-left and bottom-right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.ZoomIn">
            <summary>
            Cursor indicates zooming in, typically a magnifying glass with a plus sign.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.ZoomOut">
            <summary>
            Cursor indicates zooming out, typically a magnifying glass with a minus sign.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Browser">
            <summary>
            Represents the browser used to running the app.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.Undefined">
            <summary>
            Undefined browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.Edge">
            <summary>
            Represents Microsoft Edge browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.InternetExplorer9">
            <summary>
            Represents Internet Explorer 9 browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.InternetExplorer10">
            <summary>
            Represents Internet Explorer 10 browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.InternetExplorer11">
            <summary>
            Represents Internet Explorer 11 browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.InternetExplorerUnknown">
            <summary>
            Represents an unknown Internet Explorer browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.Firefox">
            <summary>
            Represents Firefox browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.Chrome">
            <summary>
            Represents Chrome browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.Safari">
            <summary>
            Represents Safari browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.Opera">
            <summary>
            Represents Opera browser.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.BrowserConverter">
            <summary>
            Represents a converter to a <see cref="T:FluentUI.Blazor.Community.Components.Browser"/> enumeration from a <see cref="T:System.String"/> format.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BrowserConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BrowserConverter.Write(System.Text.Json.Utf8JsonWriter,FluentUI.Blazor.Community.Components.Browser,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DeviceInfo">
            <summary>
            Represents the information of the device where the app is running.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.Browser">
            <summary>
            Gets the used browser.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.OperatingSystem">
            <summary>
            Gets the operating system.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.Touch">
            <summary>
            Gets if touch is enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.Mobile">
            <summary>
            Gets the used mobile.
            </summary>
            <remarks>If the app is running on desktop, this value is set to <see cref="F:FluentUI.Blazor.Community.Components.Mobile.NotMobileDevice"/></remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.IsTablet">
            <summary>
            Gets a value indicating if the app is running on a tablet.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.IsMobile">
            <summary>
            Gets a value if the app is running on a mobile.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.IsIPad">
            <summary>
            Gets or sets a value indicating if the app is running on an iPad.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.Orientation">
            <summary>
            Gets the orientation of the device.
            </summary>
        </member>
        <member name="E:FluentUI.Blazor.Community.Components.DeviceInfo.OrientationChanged">
            <summary>
            Events occured when the orientation of the device has changed.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DeviceInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DeviceInfo.ToMarkup">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Components.MarkupString"/> that represents the current object.
            </summary>
            <returns>A <see cref="T:Microsoft.AspNetCore.Components.MarkupString"/> that represents the current object.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DeviceInfoState">
            <summary>
            Represents the state of the device information.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfoState.DeviceInfo">
            <summary>
            Gets or sets the information of the device.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DeviceOrientation">
            <summary>
            Represents the orientation of the device.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.DeviceOrientation.Portrait">
            <summary>
            The orientation is portrait.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.DeviceOrientation.PortraitReversed">
            <summary>
            The orientation is portrait but image is flipped.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.DeviceOrientation.Landscape">
            <summary>
            The device is oriented horizontally.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.DeviceOrientation.LandscapeReversed">
            <summary>
            The device is oriented horizontally, but the image is flipped.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector">
            <summary>
            Represents a component which detects the device where the app is running.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector._deviceDetectorReference">
            <summary>
            Represents the reference of the device detector.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector._module">
            <summary>
            Represents the javascript object.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.JavascriptFileName">
            <summary>
            Represents the name of the javascript.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.ChildContent">
            <summary>
            Gets or sets the ChildContent render fragment.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.JSRuntime">
            <summary>
            Gets or sets the Javascript Runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.State">
            <summary>
            Gets the state which contains the information of the device.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.DeviceInfoUpdated">
            <summary>
            Gets or sets the callback to use when the device information is updated.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.DeviceInfo">
            <summary>
            Gets the information about the device.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.ChangeOrientation(System.String)">
            <summary>
            Occurs when the orientation of the device changed.
            </summary>
            <param name="orientation">Value indicating the orientation of the device.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Mobile">
            <summary>
            Represents the mobile where the app is running.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.UnknownMobileDevice">
            <summary>
            The app is running on a mobile but the app doesn't know the kind of the mobile.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.NotMobileDevice">
            <summary>
            The app is running on a desktop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.WindowsPhone">
            <summary>
            The app is running on a Windows Phone.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.IPhone">
            <summary>
            The app is running on an Iphone.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.IPad">
            <summary>
            The app is running on an Ipad.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.IPod">
            <summary>
            The app is running on an Ipod.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.Android">
            <summary>
            The app is running on an Android.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.BlackBerry">
            <summary>
            The app is running on a BlackBerry.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.Safari">
            <summary>
            The app is running on a Safari.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MobileConverter">
            <summary>
            Represents a converter to a <see cref="T:FluentUI.Blazor.Community.Components.Mobile"/> enumeration from a <see cref="T:System.String"/> format.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MobileConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MobileConverter.Write(System.Text.Json.Utf8JsonWriter,FluentUI.Blazor.Community.Components.Mobile,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.OperatingSystem">
            <summary>
            Represents the operating system where the app is running.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Undefined">
            <summary>
            Unknown operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.WindowsNT">
            <summary>
            Windows NT operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.WindowsXp">
            <summary>
            Windows XP operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Windows7">
            <summary>
            Windows 7 operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Windows8">
            <summary>
            Windows 8 operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Windows10">
            <summary>
            Windows 10 operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Windows11">
            <summary>
            Windows 11 operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.WindowsVista">
            <summary>
            Windows Vista operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Mac">
            <summary>
            Mac operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Linux">
            <summary>
            Linux operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Nix">
            <summary>
            Nix operating system.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.OperatingSystemConverter">
            <summary>
            Represents a converter to a <see cref="T:FluentUI.Blazor.Community.Components.OperatingSystem"/> enumeration from a <see cref="T:System.String"/> format.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.OperatingSystemConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.OperatingSystemConverter.Write(System.Text.Json.Utf8JsonWriter,FluentUI.Blazor.Community.Components.OperatingSystem,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AcceptFile">
            <summary>
            Represents the accepted files inside a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.None">
            <summary>
            No file allowed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Audio">
            <summary>
            Audio files allowed.
            </summary>
            <remarks>Represents the audio/* tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Image">
            <summary>
            Image files allowed.
            </summary>
            <remarks>Represents the image/* tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Video">
            <summary>
            Video files allowed.
            </summary>
            <remarks>Represents the video/* tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Pdf">
            <summary>
            Pdf files allowed.
            </summary>
            <remarks>Represents the .pdf tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Excel">
            <summary>
            Excel files allowed.
            </summary>
            <remarks>Represents the .xls and .xlsx tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Word">
            <summary>
            Word files allowed.
            </summary>
            <remarks>Represents the .doc and .docx tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Powerpoint">
            <summary>
            Powerpoint files allowed.
            </summary>
            <remarks>Represents the .ppt and .pptx tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Document">
            <summary>
            Document files allowed.
            </summary>
            <remarks>Represents <see cref="F:FluentUI.Blazor.Community.Components.AcceptFile.Pdf"/>, <see cref="F:FluentUI.Blazor.Community.Components.AcceptFile.Word"/>, <see cref="F:FluentUI.Blazor.Community.Components.AcceptFile.Excel"/>, <see cref="F:FluentUI.Blazor.Community.Components.AcceptFile.Powerpoint"/> tags.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AcceptFileProvider">
            <summary>
            Represents a provider to convert <see cref="T:FluentUI.Blazor.Community.Components.AcceptFile"/> into html tag to be able to select files with <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AcceptFileProvider.Get(FluentUI.Blazor.Community.Components.AcceptFile)">
            <summary>
            Gets the html tags from <see cref="T:FluentUI.Blazor.Community.Components.AcceptFile"/> value.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Returns a <see cref="T:System.String"/> which contains all tags to use in the file selector
             inside <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/></returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels">
            <summary>
            Represents the labels for the file from its extension.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.#ctor">
            <summary>
            Prevents the creation of an instance of the class <see cref="T:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Default">
            <summary>
            Gets the default labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.French">
            <summary>
            Gets the french labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WindowsAudioFile">
            <summary>
            Gets or sets the label for a Windows audio file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftAccessDatabaseFile">
            <summary>
            Gets or sets the label for Microsoft Access database file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftAccessExecuteOnlyFile">
            <summary>
            Gets or sets the label for icrosoft Access execute-only file
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftAccessRuntimeDatabase">
            <summary>
            Gets or sets the label for Microsoft Access runtime database file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftAccessDatabaseTemplate">
            <summary>
            Gets or sets the label for Microsoft Access database template file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.AudioInterchangeFileFormatFile">
            <summary>
            Gets or sets the label for audio interchange file format file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.AspNetActiveServerPage">
            <summary>
            Gets or sets the label for Asp.Net file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.AspFile">
            <summary>
            Gets or sets the label for Asp file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.AudioVideoInterleaveFile">
            <summary>
            Gets or sets the label for avi file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.BatchFile">
            <summary>
            Gets or sets the label for batch file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.BinaryFile">
            <summary>
            Gets or sets the label for binary file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.BitmapFile">
            <summary>
            Gets or sets the label for bitmap file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Cab">
            <summary>
            Gets or sets the label for Windows cabinet file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Cda">
            <summary>
            Gets or sets the label for CD audio track.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Csv">
            <summary>
            Gets or sets the label for csv file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Dif">
            <summary>
            Gets or sets the label for dif file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Dll">
            <summary>
            Gets or sets the label for dll file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftWordDocument">
            <summary>
            Gets or sets the label for Microsoft Word file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftWordTemplate">
            <summary>
            Gets or sets the label for Microsoft Word template file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftWordMacroEnabledDocument">
            <summary>
            Gets or sets the label for Microsoft Word macro enabled document.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Eml">
            <summary>
            Gets or sets the label for eml file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Eps">
            <summary>
            Gets or sets the label for eps file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Exe">
            <summary>
            Gets or sets the label for exe file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Flv">
            <summary>
            Gets or sets the label for flv file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Gif">
            <summary>
            Gets or sets the label for gif file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Html">
            <summary>
            Gets or sets the label for html file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Ini">
            <summary>
            Gets or sets the label for ini file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Iso">
            <summary>
            Gets or sets the label for iso file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Jar">
            <summary>
            Gets or sets the label for jar file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Jpg">
            <summary>
            Gets or sets the label for jpg file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Jpeg">
            <summary>
            Gets or sets the label for jpeg file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.M4a">
            <summary>
            Gets or sets the label for m4a file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mdb">
            <summary>
            Gets or sets the label for Microsoft access database file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Midi">
            <summary>
            Gets or sets the label for midi file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mov">
            <summary>
            Gets or sets the label for mov file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mp3">
            <summary>
            Gets or sets the label for mp3 file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mp4">
            <summary>
            Gets or sets the label for mp4 file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mpeg">
            <summary>
            Gets or sets the label for mpg file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mpg">
            <summary>
            Gets or sets the label for mp1 file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Msi">
            <summary>
            Gets or sets the label for msi file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mui">
            <summary>
            Gets or sets the label for mui file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Pdf">
            <summary>
            Gets or sets the label for pdf file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Png">
            <summary>
            Gets or sets the label for png file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPowerPointAddIn">
            <summary>
            Gets or sets the label for Microsoft Powerpoint Add-in file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPowerPointSlide">
            <summary>
            Gets or sets the label for Microsoft Powerpoint slide file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.PowerShell">
            <summary>
            Gets or sets the label for Microsoft Powershell file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.AdobePhotoshopFile">
            <summary>
            Gets or sets the label for Adobe photoshop file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.OutlookDataStore">
            <summary>
            Gets or sets the label for Microsoft Outlook data store file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPublisherFile">
            <summary>
            Gets or sets the label for Microsoft Publisher file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.ArchiveCompressedFile">
            <summary>
            Gets or sets the label for zip, rar, 7zip file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.RichTextFormatFile">
            <summary>
            Gets or sets the label for rtf file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.ShockwaveFlashFile">
            <summary>
            Gets or sets the label for Shockwave flash file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftWindowsSystemSettings">
            <summary>
            Gets or sets the label for Microsoft Windows system settings file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.TaggedImageFormatFile">
            <summary>
            Gets or sets the label for tiff file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.TemporaryDataFile">
            <summary>
            Gets or sets the label for temp data file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.TextDocument">
            <summary>
            Gets or sets the label for text file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.VideoObjectFile">
            <summary>
            Gets or sets the label for video object file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftVisio">
            <summary>
            Gets or sets the label for Microsoft Visio file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftVisioMacroEnabled">
            <summary>
            Gets or sets the label for Microsoft Visio macro-enabled drawing file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftVisioDrawing">
            <summary>
            Gets or sets the label for Microsoft Visio drawing file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftVisioTemplate">
            <summary>
            Gets or sets the label for Microsoft Visio template.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WaveAudioFile">
            <summary>
            Gets or sets the label for wave file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftWorksFile">
            <summary>
            Gets or sets the label for Microsoft Works file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WindowsMediaAudioFile">
            <summary>
            Gets or sets the label for Windows media audio file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WindowsMediaDownloadFile">
            <summary>
            Gets or sets the label for Windows media download file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WindowsMediaVideoFile">
            <summary>
            Gets or sets the label for Windows media video file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WindowsMediaSkinsFile">
            <summary>
            Gets or sets the label for Windows media skin file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WordPerfectDocument">
            <summary>
            Gets or sets the label for Word perfect document file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftExcelAddIn">
            <summary>
            Gets or sets the label for Microsoft Excel add-in file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftExcelDocument">
            <summary>
            Gets or sets the label for Microsoft Excel file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftExcelTemplate">
            <summary>
            Gets or sets the label for Microsoft Excel template file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftExcelWorkbook">
            <summary>
            Gets or sets the label for Microsoft Excel workbook file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftExcelMacroEnabled">
            <summary>
            Gets or sets the label for Microsoft Excel macro-enabled file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Xps">
            <summary>
            Gets or sets the label for xps file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.UnknownValue">
            <summary>
            Gets or sets the label for unknwon file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPowerPointTemplate">
            <summary>
            Gets or sets the label for Microsoft Powerpoint template file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPowerPointMacroEnabled">
            <summary>
            Gets or sets the label for Microsoft Powerpoint marcro-enabled file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPowerPointDocument">
            <summary>
            Gets or sets the label for Microsoft Powerpoint Document file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftExcelDllAddIn">
            <summary>
            Gets or sets the label for Microsoft Excel dll based add-in file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPowerBiDocument">
            <summary>
            Gets or sets the label for Microsoft PowerBi Document file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.SvgFile">
            <summary>
            Gets or sets the label for svg file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.JsonFile">
            <summary>
            Gets or sets the label for json file.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons">
            <summary>
            Represents the icons used by <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileIcons._iconForDetailsPanel">
            <summary>
            Represents the icons for the details panel.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileIcons._iconsFromExtension">
            <summary>
            Represents the icons from extensions.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileIcons._sizedGridOptionsIconFromExtensions">
            <summary>
            Represents the icons used for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> from its <see cref="T:FluentUI.Blazor.Community.Components.FileView"/> parameter. 
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.FromExtension(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from its extension.
            </summary>
            <param name="extension">Extension of the file.</param>
            <returns>Returns the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from its extension.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.FromExtensionAndGridViewOptions(System.String,FluentUI.Blazor.Community.Components.FileView)">
            <summary>
            Gets the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from the <paramref name="extension"/> and <paramref name="view"/>.
            </summary>
            <param name="extension">Extension of the file.</param>
            <param name="view">View used from the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.</param>
            <returns>Returns the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from its extension and its view.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.GetFolderFromGridViewOptions(FluentUI.Blazor.Community.Components.FileView)">
            <summary>
            Gets the folder <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from the <paramref name="view"/>.
            </summary>
            <param name="view">View used from the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.</param>
            <returns>Returns the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from its view.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.GetIconForDetails(System.String,System.Boolean)">
            <summary>
            Gets the icons from the extension.
            </summary>
            <param name="extension">Extension of the file.</param>
            <param name="isDirectory">True if we want to have the folder icon.</param>
            <returns>Returns the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from its extension.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.ToImageSource(Microsoft.FluentUI.AspNetCore.Components.Icon)">
            <summary>
            Convert the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> value into an image source.
            </summary>
            <param name="icon">Icon to convert.</param>
            <returns>Returns the html image source from its icon.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128">
            <summary>
            Represents the icon on a square of 128x128 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.MusicIcon">
            <summary>
            Represents a music file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.MusicIcon.#ctor">
            <summary>
            Represents a music file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.DefaultFileIcon">
            <summary>
            Represents a default file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.DefaultFileIcon.#ctor">
            <summary>
            Represents a default file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.ExcelIcon">
            <summary>
            Represents a excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.ExcelIcon.#ctor">
            <summary>
            Represents a excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16">
            <summary>
            Represents the icon on a square of 16x16 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.DefaultFileIcon">
            <summary>
            Represents a default file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.DefaultFileIcon.#ctor">
            <summary>
            Represents a default file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.ExcelIcon">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.ExcelIcon.#ctor">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.MusicIcon">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.MusicIcon.#ctor">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24">
            <summary>
            Represents the icon on a square of 24x24 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.DefaultFileIcon">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.DefaultFileIcon.#ctor">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.ExcelIcon">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.ExcelIcon.#ctor">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.MusicIcon">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.MusicIcon.#ctor">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32">
            <summary>
            Represents the icon on a square of 32x32 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.DefaultFileIcon">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.DefaultFileIcon.#ctor">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.ExcelIcon">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.ExcelIcon.#ctor">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.MusicIcon">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.MusicIcon.#ctor">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48">
            <summary>
            Represents the icon on a square of 48x48 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.DefaultFileIcon">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.DefaultFileIcon.#ctor">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.ExcelIcon">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.ExcelIcon.#ctor">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.MusicIcon">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.MusicIcon.#ctor">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72">
            <summary>
            Represents the icon on a square of 72x72 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.DefaultFileIcon">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.DefaultFileIcon.#ctor">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.ExcelIcon">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.ExcelIcon.#ctor">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.MusicIcon">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.MusicIcon.#ctor">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96">
            <summary>
            Represents the icon on a square of 96x96 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.DefaultFileIcon">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.DefaultFileIcon.#ctor">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.ExcelIcon">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.ExcelIcon.#ctor">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.MusicIcon">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.MusicIcon.#ctor">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileListDataGridColumnLabels">
            <summary>
            Represents the labels for the DataGrid column inside the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileListDataGridColumnLabels.Default">
            <summary>
            Gets the default labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileListDataGridColumnLabels.French">
            <summary>
            Gets the french labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileListDataGridColumnLabels.Name">
            <summary>
            Gets or sets the label for the name column.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileListDataGridColumnLabels.Size">
            <summary>
            Gets or sets the label for the size column.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileListDataGridColumnLabels.CreatedDate">
            <summary>
            Gets or sets the label for the created date column. 
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManager`1">
            <summary>
            Represents the file manager.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManager`1._isBusy">
            <summary>
            Represents a value indicating if the file manager is busy.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManager`1._fluentCxPathBar">
            <summary>
            Represents the reference to the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar" />.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.FileNavigationViewVisible">
            <summary>
            Gets or sets a value indicating if the file navigation view is visible or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.IsIndeterminateProgress">
            <summary>
            Gets or sets a value indicating if the progess is indeterminate or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.ProgressPercent">
            <summary>
            Gets or sets the percentage of the progression.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.ProgressLabel">
            <summary>
            Gets or sets the label of the progress.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.IsMobile">
            <summary>
            Gets or sets a value indicating if the file manager runs on mobile or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.ItemTemplate">
            <summary>
            Gets or sets the template of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.SelectedItems">
            <summary>
            Gets or sets the selected items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.OnItemDoubleClick">
            <summary>
            Gets or sets the event callback when an item is double clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.ColumnLabels">
            <summary>
            Gets or sets the labels of the columns when the file manager renders the items as list or details.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.SelectedItemsChanged">
            <summary>
            Gets or sets the event callback when the selecteditems has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.Entry">
            <summary>
            Gets or sets the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.Download">
            <summary>
            Gets or sets the event callback when an item is downloaded.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.RootPath">
            <summary>
            Gets or sets the items of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar" />.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.Path">
            <summary>
            Gets or sets the path of the navigation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.OnPathChanged">
            <summary>
            Gets or sets the callback when a path changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.State">
            <summary>
            Gets or sets the state of the file manager.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.OnSelectedItemsChangedAsync">
            <summary>
            Occurs when the selected items has changed.
            </summary>
            <returns>Returns a task which contains the way to process the selecteditems propery when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.OnViewUpdated(System.Object,System.EventArgs)">
            <summary>
            Occurs when the view is updated.
            </summary>
            <param name="sender">Object which invokes the method.</param>
            <param name="e">Events args associated to this method.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.OnUpdated(System.Object,System.EventArgs)">
            <summary>
            Occurs when the state of the file manager is updated.
            </summary>
            <param name="sender">Object which invokes the method.</param>
            <param name="e">Events args associated to this method.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.SetEntry(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Sets the entry to render in the file manager.
            </summary>
            <param name="entry">Entry to set.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.OnItemDoubleTappedAsync(FluentUI.Blazor.Community.Components.FileManagerEntryEventArgs{`0})">
            <summary>
            Occurs when an item is double clicked.
            </summary>
            <param name="e">EventArgs which contains the item which was double clicked.</param>
            <returns>Returns a task which contains the way to process the double clicked item when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.Sort">
            <summary>
            Sort the current entry.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.SetBusy(System.Boolean)">
            <summary>
            Sets if the file manager is busy or not.
            </summary>
            <param name="isBusy">Value indicating if the file manager is busy or not.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.InvalidatePathBarItemSize(System.String)">
            <summary>
            Invalidate the size of a specific item in the path bar.
            </summary>
            <param name="id">Identifier of the item</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.ClearPathBar(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Clears the items of the path bar.
            </summary>
            <param name="value">All segments to remove.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerBase`1">
            <summary>
            Represents the base for the file manager.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.Parent">
            <summary>
            Gets or sets the parent of this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.Entry">
            <summary>
            Gets or sets the entry to view.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.SelectedItems">
            <summary>
            Gets or sets the selected items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.SelectedItemsChanged">
            <summary>
            Gets or sets an event callback which occurs when the <see cref="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.SelectedItems"/> changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnItemTapped">
            <summary>
            Gets or sets an event callback which occurs when an item is tapped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnItemDoubleTapped">
            <summary>
            Gets or sets an event callback which occurs when an item is double tapped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.IsMobile">
            <summary>
            Gets or sets a value indicating if the filemanager runs on mobile.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.IsBusy">
            <summary>
            Gets or sets a value indicating if the filemanager is busy or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.IsIndeterminateProgress">
            <summary>
            Gets or sets a value indicating if the progess is indeterminate or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.ProgressPercent">
            <summary>
            Gets or sets the percentage of the progression.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.ProgressLabel">
            <summary>
            Gets or sets the label of the progress.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.ColumnLabels">
            <summary>
            Gets or sets the labels of the columns when the file manager renders the items as list or details.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnSelectedItemsChangedAsync">
            <summary>
            Occurs when the <see cref="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.SelectedItems"/> has changed.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.SelectedItemsChanged"/> event callback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnItemDoubleTappedAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Occurs when an item is double clicked.
            </summary>
            <param name="entry">Represents the clicked entry.</param>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnItemDoubleTapped"/> event callback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnItemTappedAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Occurs when an item is double clicked.
            </summary>
            <param name="entry">Represents the clicked entry.</param>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnItemTapped"/> event callback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.GetIconFromFile(System.String)">
            <summary>
            Gets the icon from an extension.
            </summary>
            <param name="extension">Extension of the file.</param>
            <returns>Returns the icons to render.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.GetIconFromExtensionAndGridViewOptions(System.String,FluentUI.Blazor.Community.Components.FileView)">
            <summary>
            Gets the icon from an extension and the current used view.
            </summary>
            <param name="extension">Extension of the file.</param>
            <param name="options">Current used view.</param>
            <returns>Returns the icons to render.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.GetFolderIconFromGridViewOptions(FluentUI.Blazor.Community.Components.FileView)">
            <summary>
            Gets the folder icon from the current used view.
            </summary>
            <param name="options">Current used view.</param>
            <returns>Returns the icons to render.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnRenameAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Occurs when a rename operation is performed.
            </summary>
            <param name="entry">Entry to rename.</param>
            <returns>Returns a task which contains the rename process when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerContent">
            <summary>
            Represents the content of an item of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
            <param name="Label">Label of the content.</param>
            <param name="Placeholder">Placeholder of the content.</param>
            <param name="Name">Name of the file or folder.</param>
            <param name="IsDirectory">Value indicating if the item is a directory.</param>
            <param name="IsRenaming">Value indicating if the item will be renamed.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerContent.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Represents the content of an item of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
            <param name="Label">Label of the content.</param>
            <param name="Placeholder">Placeholder of the content.</param>
            <param name="Name">Name of the file or folder.</param>
            <param name="IsDirectory">Value indicating if the item is a directory.</param>
            <param name="IsRenaming">Value indicating if the item will be renamed.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerContent.Label">
            <summary>Label of the content.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerContent.Placeholder">
            <summary>Placeholder of the content.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerContent.IsDirectory">
            <summary>Value indicating if the item is a directory.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerContent.IsRenaming">
            <summary>Value indicating if the item will be renamed.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerContent.Name">
            <summary>
            Gets or sets the name of the file or the folder.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerDetailsDialogContent`1">
            <summary>
            Represents the content for the FileManagerDetailsDialog.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="FileExtensionTypeLabels">Labels for the files.</param>
            <param name="Entries">Represents the selected entries.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerDetailsDialogContent`1.#ctor(FluentUI.Blazor.Community.Components.FileExtensionTypeLabels,System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Represents the content for the FileManagerDetailsDialog.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="FileExtensionTypeLabels">Labels for the files.</param>
            <param name="Entries">Represents the selected entries.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsDialogContent`1.FileExtensionTypeLabels">
            <summary>Labels for the files.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsDialogContent`1.Entries">
            <summary>Represents the selected entries.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels">
            <summary>
            Represents the labels used by the <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.Default">
            <summary>
            Gets the default labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.French">
            <summary>
            Gets the french labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.ElementPlural">
            <summary>
            Gets or sets the plural label for elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.ElementSingular">
            <summary>
            Gets or sets the singular label for element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.NoEntryFoundDescription">
            <summary>
            Gets or sets the label when no entry was found.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.SelectSingleFileToGetMoreInformation">
            <summary>
            Gets or sets the label when multiple files are selected.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.Size">
            <summary>
            Gets or sets the label for size.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.Type">
            <summary>
            Gets or sets the label for type.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.ContentType">
            <summary>
            Gets or sets the label for content type.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.ModifiedDate">
            <summary>
            Gets or sets the label for modified date.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.CreatedDate">
            <summary>
            Gets or sets the label for created date.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.DateFormat">
            <summary>
            Gets or sets the format of the date.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.SelectedElements">
            <summary>
            Gets or sets the label for selected elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.Details">
            <summary>
            Gets or sets the label for details.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerEntriesMovedEventArgs`1">
            <summary>
            Represents the event args for entries which are moved from one place to another.
            </summary>
            <typeparam name="TItem">Type of the folder.</typeparam>
            <param name="DestinationFolder">Represents the destination folder where the entries moved.</param>
            <param name="MovedEntries">Represents the entries that have been moved.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntriesMovedEventArgs`1.#ctor(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Represents the event args for entries which are moved from one place to another.
            </summary>
            <typeparam name="TItem">Type of the folder.</typeparam>
            <param name="DestinationFolder">Represents the destination folder where the entries moved.</param>
            <param name="MovedEntries">Represents the entries that have been moved.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntriesMovedEventArgs`1.DestinationFolder">
            <summary>Represents the destination folder where the entries moved.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntriesMovedEventArgs`1.MovedEntries">
            <summary>Represents the entries that have been moved.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1">
            <summary>
            Represents an entry for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> component.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntry`1._files">
            <summary>
            Represents the files inside the current instance.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntry`1._directories">
            <summary>
            Represents the directories inside the current instance.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntry`1._fileExtensionContentTypeProvider">
            <summary>
            Gets the provider of content type from a file extension.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntry`1._merged">
            <summary>
            Represents the list of files and directories of the current instance.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.#ctor">
            <summary>
            Prevents the creation of an instance of the class <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1"/>.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.#ctor(`0,System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Boolean,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Prevents the creation of an instance of the class <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1"/>.
            </summary>
            <param name="itemData">Represents the data inside the current instance.</param>
            <param name="dataBytesAsyncFunc">Represents the function to get the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="isDirectory">Value indicating if the entry is a directory or a file.</param>
            <param name="size">Size of the entry.</param>
            <param name="createdDate">Creation date of the item of the entry.</param>
            <param name="modifiedDate">Modification date of the item of the entry.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.#ctor(`0,System.Byte[],System.String,System.Boolean,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Prevents the creation of an instance of the class <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1"/>.
            </summary>
            <param name="itemData">Represents the data inside the current instance.</param>
            <param name="dataBytes">Represents the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="isDirectory">Value indicating if the entry is a directory or a file.</param>
            <param name="size">Size of the entry.</param>
            <param name="createdDate">Creation date of the item of the entry.</param>
            <param name="modifiedDate">Modification date of the item of the entry.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Home">
            <summary>
            Gets the home entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Parent">
            <summary>
            Gets the parent of this entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.TotalEntriesCount">
            <summary>
            Gets the total number of entries.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.DataBytesAsyncFunc">
            <summary>
            Gets the function which retrieves the raw data of the entry asynchronously.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.DataBytes">
            <summary>
            Gets the data of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Size">
            <summary>
            Gets the size of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Data">
            <summary>
            Gets the data instance of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreatedDate">
            <summary>
            Gets the creation date of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.ModifiedDate">
            <summary>
            Gets the modified date of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.ContentType">
            <summary>
            Gets the content type of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Name">
            <summary>
            Gets the name of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.NameWithoutExtension">
            <summary>
            Gets the name of the file without its extension.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Count">
            <summary>
            Gets or sets the number of file which contains the same name.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.HasExtension">
            <summary>
            Gets a value indicating if the entry has an extension.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Extension">
            <summary>
            Gets the extension of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.IsDirectory">
            <summary>
            Gets a value indicating if the entry is a directory or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.HasDirectory">
            <summary>
            Gets a value indicating if the entry has directories.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.HasFiles">
            <summary>
            Gets a value indicating if the entry has files.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Id">
            <summary>
            Gets or sets the identifier of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.RelativePath">
            <summary>
            Gets the relative path of the entry.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetContentType">
            <summary>
            Gets the content type of the entry.
            </summary>
            <returns>Returns the content type of the entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetMerged">
            <summary>
            Gets the merged list of entries inside the current entry.
            </summary>
            <returns>Returns the merged entries.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.RemoveEntry(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Remove the <paramref name="entry"/> from specified <paramref name="root"/>;
            </summary>
            <param name="root">Root where the entry to remove is.</param>
            <param name="entry">Entry to remove.</param>
            <returns>Returns <see langword="true"/> if the entry was successfully removed, <see langword="false" /> sinon.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDirectory(System.DateTime,System.DateTime,System.String,System.Int64)">
            <summary>
            Creates a directory inside the current entry.
            </summary>
            <param name="creationDate">Date of creation of the directory.</param>
            <param name="modificationDate">Modification date of the directory.</param>
            <param name="directoryName">Name of the directory.</param>
            <param name="size">Size of the directory.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDirectory(System.String)">
            <summary>
            Creates a directory inside the current entry.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateHomeDirectory">
            <summary>
            Creates the home directory. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.op_Equality(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Check if <paramref name="x"/> is equal to <paramref name="y"/>.
            </summary>
            <param name="x">Left entry to compare with.</param>
            <param name="y">Right entry to compare with.</param>
            <returns>Returns <see langword="true"/> if the entries are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.op_Inequality(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Check if <paramref name="x"/> is inequal to <paramref name="y"/>.
            </summary>
            <param name="x">Left entry to compare with.</param>
            <param name="y">Right entry to compare with.</param>
            <returns>Returns <see langword="true"/> if the entries are not equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Equals(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetHashCode(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetBytesAsync">
            <summary>
            Gets the raw data of the entry in an asynchronous way.
            </summary>
            <returns>Returns the raw data of the entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.SetName(System.String)">
            <summary>
            Sets the name of the entry.
            </summary>
            <param name="newName">Name of the entry.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Add(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Adds an entry in the current instance.
            </summary>
            <param name="entry">Entry to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.AddRange(FluentUI.Blazor.Community.Components.FileManagerEntry{`0}[])">
            <summary>
            Adds a range of entries in the current instance.
            </summary>
            <param name="entries">Entries to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Clear">
            <summary>
            Clears the current entry.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetDirectories">
            <summary>
            Gets the directories of the current entry.
            </summary>
            <returns>Returns the directories of the current entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetFiles">
            <summary>
            Gets the files of the current entry.
            </summary>
            <returns>Returns the files of the current entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Remove(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Removes the entry from the current entry.
            </summary>
            <param name="entry">Entry to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Remove(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Removes all specified entries from the current entry.
            </summary>
            <param name="entries">Entries to removed.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.InvalidateMerge">
            <summary>
            Invalidate the merged entries.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Enumerate">
            <summary>
            Enumerates all the entries in the current entries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Sort(FluentUI.Blazor.Community.Components.FileSortMode,FluentUI.Blazor.Community.Components.FileSortBy)">
            <summary>
            Sorts the entries.
            </summary>
            <param name="sortBy">Type of sort.</param>
            <param name="sortMode">Ascending or descending sort.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Find(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.String)">
            <summary>
            Finds the entry specified <paramref name="id"/> by starting from <paramref name="root"/>.
            </summary>
            <param name="root">Entry to use as a search entry.</param>
            <param name="id">Identifier to find.</param>
            <returns>Returns the entry if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Find(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Func{FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Boolean})">
            <summary>
            Finds an entry from the <paramref name="root"/>.
            </summary>
            <param name="root">Entry to use as a search entry.</param>
            <param name="predicate">Predicate to apply to find the entry.</param>
            <returns>Returns the entry if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Find(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}},System.String)">
            <summary>
            Finds the entry specified with <paramref name="id"/> inside the specified <paramref name="items"/>.
            </summary>
            <param name="items">List of items where the search begins.</param>
            <param name="id">Identifier of the entry to find.</param>
            <returns>Returns the entry if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Find(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}},System.Func{FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Boolean})">
            <summary>
            Finds an entry from the <paramref name="items"/>.
            </summary>
            <param name="items">List of entries to use.</param>
            <param name="predicate">Predicate to apply to find the entry.</param>
            <returns>Returns the entry if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.FindByName(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.String)">
            <summary>
            Finds an entry from its name.
            </summary>
            <param name="entry">Entry to use as search entry.</param>
            <param name="name">Name of the entry.</param>
            <returns>Returns the entry if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDefaultFileEntry(System.Byte[],System.String,System.Int32)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="data">Data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDefaultFileEntry(System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Int64)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDefaultFileEntry(System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <param name="creationDate">Date of the creation of the entry.</param>
            <param name="lastModificationDate">Date of the last modification of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDefaultFileEntryWithData(`0,System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="data">Instance of the item.</param>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <param name="creationDate">Date of the creation of the entry.</param>
            <param name="lastModificationDate">Date of the last modification of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDefaultFileEntryWithData(`0,System.Byte[],System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="data">Instance of the item.</param>
            <param name="value">Raw data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <param name="creationDate">Date of the creation of the entry.</param>
            <param name="lastModificationDate">Date of the last modification of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateEntryWithData(`0,System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="data">Instance of the item.</param>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <param name="creationDate">Date of the creation of the entry.</param>
            <param name="lastModificationDate">Date of the last modification of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateEntryWithData(`0,System.Byte[],System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="data">Instance of the item.</param>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <param name="creationDate">Date of the creation of the entry.</param>
            <param name="lastModificationDate">Date of the last modification of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateEntry(System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <param name="creationDate">Date of the creation of the entry.</param>
            <param name="lastModificationDate">Date of the last modification of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateEntry(System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Int64)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateEntry(System.Byte[],System.String,System.Int64)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="value">Raw data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.InvalidateSize">
            <summary>
            Invalidates the size of the entry.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryComparer`1.Compare(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1">
            <summary>
            Represents the details view for a selected entry.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1._entryDataContent">
            <summary>
            Represents the raw data of the entry.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1._fileContentTypeProvider">
            <summary>
            Represents the provider for the content type from a file extension.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1._fileExtensionTypeProvider">
            <summary>
            Represents the provider for the file extension.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1._isImage">
            <summary>
            Represents a value indicating if the entry is an image.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1._contentType">
            <summary>
            Represents the content type of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.Entries">
            <summary>
            Gets ors sets the selected entries.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.EmptyContent">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> to use when the content is empty.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.DetailsLabel">
            <summary>
            Gets or sets the labels to use for the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.FileExtensionTypeLabels">
            <summary>
            Gets or sets the labels to describe the file extension.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.GetEntryDataContentAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Gets the data of the entry in an asynchronous way.
            </summary>
            <param name="entry">Entry which contains the data to get.</param>
            <returns>Returns a task which get the data of the entry when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.GetBase64Content(System.Byte[],System.String)">
            <summary>
            Gets the data of the entry in base64 format.
            </summary>
            <param name="data">Data to convert.</param>
            <param name="contentType">Type of the content.</param>
            <returns>Returns the data content type as a <see cref="T:System.String" /> in base64 format.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerEntryEventArgs`1">
            <summary>
            Represents the event args for a <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="Entry">Represents the entry to use</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryEventArgs`1.#ctor(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Represents the event args for a <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="Entry">Represents the entry to use</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryEventArgs`1.Entry">
            <summary>Represents the entry to use</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs`1">
            <summary>
            Represents the event args when an entry is created.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="Parent">Entry which contains the <paramref name="Entry"/>.</param>
            <param name="Entry">Represents the created entry.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs`1.#ctor(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Represents the event args when an entry is created.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="Parent">Entry which contains the <paramref name="Entry"/>.</param>
            <param name="Entry">Represents the created entry.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs`1.Parent">
            <summary>Entry which contains the <paramref name="Entry"/>.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs`1.Entry">
            <summary>Represents the created entry.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DeleteFileManagerEntryEventArgs`1">
            <summary>
            Represents the event args when some entries are deleted.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="Parent">Entry which contains the <paramref name="Entries"/> to delete.</param>
            <param name="Entries">Represents the entries to delete.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DeleteFileManagerEntryEventArgs`1.#ctor(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Represents the event args when some entries are deleted.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="Parent">Entry which contains the <paramref name="Entries"/> to delete.</param>
            <param name="Entries">Represents the entries to delete.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeleteFileManagerEntryEventArgs`1.Parent">
            <summary>Entry which contains the <paramref name="Entries"/> to delete.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeleteFileManagerEntryEventArgs`1.Entries">
            <summary>Represents the entries to delete.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerEntryMenuItemDescription`1">
            <summary>
            Represents the description of a menu item.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryMenuItemDescription`1.OnClick">
            <summary>
            Gets or sets the function to execute when the item is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryMenuItemDescription`1.Icon">
            <summary>
            Gets or sets the icon of the menu.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryMenuItemDescription`1.Label">
            <summary>
            Gets or sets the label of the menu.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerEntryTreeViewItemComparer">
            <summary>
            Represents a comparer for the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.ITreeViewItem"/> for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryTreeViewItemComparer.Default">
            <summary>
            Gets the default comparer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryTreeViewItemComparer.Compare(Microsoft.FluentUI.AspNetCore.Components.ITreeViewItem,Microsoft.FluentUI.AspNetCore.Components.ITreeViewItem)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerGrid`1">
            <summary>
            Represents the grid of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerGrid`1.ItemTemplate">
            <summary>
            Gets or sets the template of the items in the grid.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerGrid`1.GetRowHeightFromGridViewOptions">
            <summary>
            Gets the height of the row from the <see cref="T:FluentUI.Blazor.Community.Components.FileView"/> value.
            </summary>
            <returns>Returns the height of the row.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerGrid`1.GetColumnWidthFromGridViewOptions">
            <summary>
            Gets the width of the column from the <see cref="T:FluentUI.Blazor.Community.Components.FileView"/> value.
            </summary>
            <returns>Returns the width of the column.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerGrid`1.GetIconSizeFromGridViewOptions">
            <summary>
            Gets the size of the icon from the <see cref="T:FluentUI.Blazor.Community.Components.FileView"/> value.
            </summary>
            <returns>Returns the size of the icons.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerGrid`1.GetMaxWidthFromGridViewOptions">
            <summary>
            Gets the max width of the text from the <see cref="T:FluentUI.Blazor.Community.Components.FileView"/> value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerGrid`1.OnCheckedItemChangedAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Boolean)">
            <summary>
            Occurs when an item is selected or unselected.
            </summary>
            <param name="entry">Entry on which occurs the selection.</param>
            <param name="isSelected">Value indicating if the entry is selected or unselected.</param>
            <returns>A task which contains the selecteditems when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerLabels">
            <summary>
            Represents the labels used by the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.Default">
            <summary>
            Gets the default labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.French">
            <summary>
            Gets the french labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DialogCloseLabel">
            <summary>
            Gets or sets the label for the close button in a dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ShowDetailsLabel">
            <summary>
            Gets or sets the label for the show details button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SearchPlaceholder">
            <summary>
            Gets or sets the placeholder label for the search text box.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.NewFolderLabel">
            <summary>
            Gets or sets the label for the new folder button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.UploadLabel">
            <summary>
            Gets or sets the label for the upload button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SortByNameLabel">
            <summary>
            Gets or sets the label for the sort by name menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SortByExtensionLabel">
            <summary>
            Gets or sets the label for the sort by extension menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SortBySizeLabel">
            <summary>
            Gets or sets the label for the sort by size menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SortByCreationDate">
            <summary>
            Gets or sets the label for the sort by created date menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SortByModifiedDate">
            <summary>
            Gets or sets the label for the sort by modified date menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DeleteLabel">
            <summary>
            Gets or sets the label for the sort by delete menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DownloadLabel">
            <summary>
            Gets or sets the label for the download button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.RenameLabel">
            <summary>
            Gets or sets the label for the rename button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SortLabel">
            <summary>
            Gets or sets the label for the sort button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ViewLabel">
            <summary>
            Gets or sets the label for the view button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ListViewLabel">
            <summary>
            Gets or sets the label for the list menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.AscendingLabel">
            <summary>
            Gets or sets the label for the ascending menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DescendingLabel">
            <summary>
            Gets or sets the label for the descending menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.FolderDialogTitle">
            <summary>
            Gets or sets the title for the new folder dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.RenameFolderDialogTitle">
            <summary>
            Gets or sets the title for the rename folder dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.RenameFileDialogTitle">
            <summary>
            Gets or sets the title for the rename file dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.FolderLabel">
            <summary>
            Gets or sets the label for the folder name.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.FolderPlaceholder">
            <summary>
            Gets or sets the placeholder label for the folder name.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.FileLabel">
            <summary>
            Gets or sets the label for the file name.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.FilePlaceholder">
            <summary>
            Gets or sets the placeholder label for the file name.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DeleteDescriptionLabel">
            <summary>
            Gets or sets the description for the delete confirmation dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DialogYesLabel">
            <summary>
            Gets or sets the label for the yes button in a dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DialogNoLabel">
            <summary>
            Gets or sets the label for the no button in a dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DialogOkLabel">
            <summary>
            Gets or sets the label for the OK button in a dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DialogCancelLabel">
            <summary>
            Gets or sets the label for the cancel button in a dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DeleteTitle">
            <summary>
            Gets or sets the delete dialog title.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.UploadingLabel">
            <summary>
            Gets or sets the label for an uploading process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DownloadingLabel">
            <summary>
            Gets or sets the label for a download process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DeletingLabel">
            <summary>
            Gets or sets the label for a delete process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.MovingLabel">
            <summary>
            Gets or sets the label for a move process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.PropertiesLabel">
            <summary>
            Gets or sets the label for the properties button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.HierarchicalLabel">
            <summary>
            Gets or sets the label for the hierarchical menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.FlatLabel">
            <summary>
            Gets or sets the label for the flat menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ExceededFileCountMessage">
            <summary>
            Gets or sets the message when the number of files exceeded the maximum allowed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ExceededFileCountTitle">
            <summary>
            Gets or sets the title when the number of files exceeded the maximum allowed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.MoveToLabel">
            <summary>
            Gets or sets the label for the move button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ViewOptionsLabel">
            <summary>
            Gets or sets the label for the options button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ListWithDetailsLabel">
            <summary>
            Gets or sets the label for the details menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.GridViewMosaicLabel">
            <summary>
            Gets or sets the label for the mosaic menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.GridViewSmallIconsLabel">
            <summary>
            Gets or sets the label for the small icons menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.GridViewMediumIconsLabel">
            <summary>
            Gets or sets the label for the medium menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.GridViewLargeIconsLabel">
            <summary>
            Gets or sets the label for the large icons menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.GridViewVeryLargeIconsLabel">
            <summary>
            Gets or sets the label for the very large icons menu item.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerList`1">
            <summary>
            Represents the list view for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerList`1.InternalStyle">
            <summary>
            Gets the style of the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerList`1.OnRowDoubleClickAsync(Microsoft.FluentUI.AspNetCore.Components.FluentDataGridRow{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Occurs when the row is double clicked.
            </summary>
            <param name="e">Event args associated to the clicked row.</param>
            <returns>Returns a task which perform the double click when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerList`1.GetStyle">
            <summary>
            Gets the style of the list.
            </summary>
            <returns>Returns the style of the list.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerState">
            <summary>
            Represents the state of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerState._sortBy">
            <summary>
            Represents the way the files are sorted by.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerState._sortMode">
            <summary>
            Represents the ascending or descending sort.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerState._view">
            <summary>
            Represents the current view of the file manager.
            </summary>
        </member>
        <member name="E:FluentUI.Blazor.Community.Components.FileManagerState.OnSortUpdated">
            <summary>
            Gets or sets the event to raise when the sort is updated.
            </summary>
        </member>
        <member name="E:FluentUI.Blazor.Community.Components.FileManagerState.OnViewUpdated">
            <summary>
            Gets or sets the event to raise when the view is updated.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerState.SortBy">
            <summary>
            Gets or sets the way the files are sorted.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerState.SortMode">
            <summary>
            Gets the sorted mode of the files (ascending or descending).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerState.View">
            <summary>
            Gets the view of the file manager.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerView">
            <summary>
            Represents the available view for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerView.Desktop">
            <summary>
            The <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> is rendered in desktop mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerView.Mobile">
            <summary>
            The <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> is rendered in mobile mode.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileMoverDialog`1">
            <summary>
            Represents the file mover dialog.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileMoverDialog`1._currentSelectedItem">
            <summary>
            Represents the selected item in the tree.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileMoverDialog`1._items">
            <summary>
            Represents the tree.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileMoverDialog`1.IconCollapsed">
            <summary>
            Represents the collapsed node icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileMoverDialog`1.IconExpanded">
            <summary>
            Represents the expanded node icon.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileMoverDialog`1.Dialog">
            <summary>
            Gets or sets the dialog that this content belongs to.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileMoverDialog`1.Content">
            <summary>
            Gets or sets the content of the dialog.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileMoverDialog`1.OnCancelAsync">
            <summary>
            Occurs when the dialog is cancelled.
            </summary>
            <returns>Returns a task which cancels the dialog when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileMoverDialog`1.OnCloseAsync">
            <summary>
            Occurs when the dialog is closed.
            </summary>
            <returns>Returns a task which close the dialog when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileMoverDialog`1.BuildTreeView">
            <summary>
            Build the treeview from the <see cref="P:FluentUI.Blazor.Community.Components.FileMoverDialog`1.Content"/> root.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileMoverDialog`1.BuildTreeViewItem(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Boolean)">
            <summary>
            Build the treeviewitem from the <paramref name="entry"/> node.
            </summary>
            <param name="entry">Entry to build as a treeview item.</param>
            <param name="isExpanded">Value indicating if the node is expanded or not.</param>
            <returns>Returns a <see cref="T:Microsoft.FluentUI.AspNetCore.Components.TreeViewItem"/> which represents the <paramref name="entry"/> node.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileMoverDialog`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileSortBy">
            <summary>
            Represents the way to sort the files.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortBy.Name">
            <summary>
            Sort the file by its name.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortBy.Extension">
            <summary>
            Sort the file by its extension.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortBy.Size">
            <summary>
            Sort the file by its size.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortBy.CreatedDate">
            <summary>
            Sort the file by its creation date.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortBy.ModifiedDate">
            <summary>
            Sort the file by its modification date.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileSortMode">
            <summary>
            Represents the sort mode of the files.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortMode.Ascending">
            <summary>
            The files are sorted in ascending order according to its key. 
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortMode.Descending">
            <summary>
            The files are sorted in descending order according to its key.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileStructureView">
            <summary>
            Represents the view of the file structure.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileStructureView.Hierarchical">
            <summary>
            The structure is rendered in a hierarchical way.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileStructureView.Flat">
            <summary>
            The structure is rendered in a flat way.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileView">
            <summary>
            Represents the available views for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.List">
            <summary>
            The items are rendered in a list.
            </summary>
            <remarks>Only the name of the file is rendered.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.Details">
            <summary>
            The items are rendered in a list.
            </summary>
            <remarks>Each item is rendered with : Name, Size, Creation date information.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.Mosaic">
            <summary>
            The items are rendered in a mosaic view.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.SmallIcons">
            <summary>
            The items are rendered in a small icons view.
            </summary>
            <remarks>The icons are in 24x24 format</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.MediumIcons">
            <summary>
            The items are rendered in a medium icons view.
            </summary>
            <remarks>The icons are in 72x72 format</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.LargeIcons">
            <summary>
            The items are rendered in a large icons view.
            </summary>
            <remarks>The icons are in 96x96 format</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.VeryLargeIcons">
            <summary>
            The items are rendered in a very large icons view.
            </summary>
            <remarks>The icons are in 128x128 format</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileZipper">
            <summary>
            Represents a file zipper.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileZipper.GetFileDataAsync(System.String)">
            <summary>
            Gets an array of <see cref="T:System.Byte"/> which represents the data of a file in an asynchronous way.
            </summary>
            <param name="path">The file to open to get the data.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1"/> which contains the array of byte of the file.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileZipper.ZipInternalAsync``1(System.String,System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{``0}})">
            <summary>
            Zip a collection of files.
            </summary>
            <typeparam name="TItem">Type of the image.</typeparam>
            <param name="folder">Destination folder where we transfert the files.</param>
            <param name="entries">Entries to zip.</param>
            <returns>Returns a task which zip the entries.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileZipper.ZipAsync``1(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{``0}})">
            <summary>
            Zip the entries in an asynchronous way.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="entries">Entries to zip.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1" /> which contains a <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1"/>
             which contains the zipped file.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1">
            <summary>
            Represents a fluent file manager.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressState">
            <summary>
            Represents the progress state to display the good label.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressState.None">
            <summary>
            No progress.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressState.Uploading">
            <summary>
            Uploading a file.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressState.Downloading">
            <summary>
            Downloading a file.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressState.Deleting">
            <summary>
            Deleting a file.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressState.Moving">
            <summary>
            Moving a file.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._showDetails">
            <summary>
            Represents a value indicating if the details of an entry is shown.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._hasRootChanged">
            <summary>
            Represents a value indicating if the root has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._forceMobileView">
            <summary>
            Represents a value indicating if the mobile view is forced.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._fileManagerView">
            <summary>
            Represents the file manager component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._currentEntry">
            <summary>
            Represents the current selected entry.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._treeViewItems">
            <summary>
            Represents the tree view (only shown in Desktop mode)
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IconCollapsed">
            <summary>
            Represents the collapsed node icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IconExpanded">
            <summary>
            Represents the expanded node icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._currentTreeViewItem">
            <summary>
            Represents the current treeview item.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._currentSelectedItems">
            <summary>
            Represents the selected items.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._searchValue">
            <summary>
            Represents the value to search inside the current node.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._searchEntry">
            <summary>
            Represents the entry which contains all the found entries during a search operation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._progressState">
            <summary>
            Represents the current state of a progress.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._isDisabled">
            <summary>
            Represents a value indicating if the component is disabled or not.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._fileBufferDictionary">
            <summary>
            Represents the buffer dictionary of all files currenlty uploading.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._rootPath">
            <summary>
            Represents the list of all navigation items.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._flattenEntry">
            <summary>
            Represents the flatten entry.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._module">
            <summary>
            Represents the javascript module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.JavascriptFilename">
            <summary>
            Represents the javascript filename to use for interop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._contentTypeProvider">
            <summary>
            Represents the provider to get the content type from a file extension.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._path">
            <summary>
            Represents the path for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar"/> component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._renderLabel">
            <summary>
            Represents the render fragment to use for the label of a button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.State">
            <summary>
            Gets or sets the state of the file manager.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.JSRuntime">
            <summary>
            Gets or sets the javascript runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.DialogService">
            <summary>
            Gets or sets the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.IDialogService"/> instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.Width">
            <summary>
            Gets or sets the width of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.Height">
            <summary>
            Gets or sets the height of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ShowCreateFolderButton">
            <summary>
            Gets or sets a value indicating if the create folder button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ShowUploadButton">
            <summary>
            Gets or sets a value indicating if the upload button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ShowViewButton">
            <summary>
            Gets or sets a value indicating if the view button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ShowSortButton">
            <summary>
            Gets or sets a value indicating if the sort button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ShowPropertiesButton">
            <summary>
            Gets or sets a value indicating if the properties button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ShowDetailsButton">
            <summary>
            Gets or sets a value indicating if the details button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.FileManagerLabels">
            <summary>
            Gets or sets the labels to use for the text of the UI.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.DetailsLabels">
            <summary>
            Gets or sets the labels to use for the details panel.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.FileExtensionTypeLabels">
            <summary>
            Gets or sets the labels to use for the file from its extension.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ColumnLabels">
            <summary>
            Gets or sets the labels to use for the list view.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressPercent">
            <summary>
            Gets or sets the percentage of the progression.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IsBusy">
            <summary>
            Gets or sets a value indicating if the manager is busy or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.View">
            <summary>
            Gets or sets the view of the file manager.
            </summary>
            <remarks>
            By default, the view is desktop.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.Root">
            <summary>
            Gets or sets the root of the file manager.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.Accept">
            <summary>
            Gets or sets the allowed files to be uploaded.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.AcceptFiles">
            <summary>
            Gets or sets the allowed files to be uploaded in an enum way.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.MaximumFileCount">
            <summary>
            Gets or sets the maximum file count that can be uploaded in one time.
            </summary>
            <remarks>Default is 100.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.MaximumFileSize">
            <summary>
            Gets or sets the maximum file size.
            </summary>
            <remarks>Default is 100 MiB</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.BufferSize">
            <summary>
            Gets or sets the size of the buffer.
            </summary>
            <remarks>Default is 10 KiB</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFolderCreated">
            <summary>
            Gets or sets the callback to use when a folder is created.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnRename">
            <summary>
            Gets or sets the callback to use when a file or a folder is renamed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnDelete">
            <summary>
            Gets or sets the callback to use when a file or a folder is deleted.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFileUploaded">
            <summary>
            Gets or sets the callback to use when a file is uploaded.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ToolbarItems">
            <summary>
            Gets or sets extra buttons on the toolbar.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.FileStructureView">
            <summary>
            Gets or sets the view of the file structure.
            </summary>
            <remarks>Default is <see cref="F:FluentUI.Blazor.Community.Components.FileStructureView.Hierarchical"/>.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.Moved">
            <summary>
            Gets or sets the callback to use when a file or a folder is moved.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.SmartphoneSwitchViewWidth">
            <summary>
            Gets or sets the width of the component when the view is switched to smartphone.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.SmartphoneSwitchViewWidthQuery">
            <summary>
            Gets the smartphone switch view width query.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.AcceptFilter">
            <summary>
            Gets the accept filter to use for the upload input.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IsRenameButtonDisabled">
            <summary>
            Gets a value indicating if the rename button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IsDownloadButtonDisabled">
            <summary>
            Gets a value indicating if the download button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IsDeleteButtonDisabled">
            <summary>
            Gets a value indicating if the delete button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IsMoveToButtonDisabled">
            <summary>
            Gets a value indicating if the move button is disabled.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.GetEntry">
            <summary>
            Gets the current entry to use depending of the view.
            </summary>
            <returns>Returns the entry to use depending of the view.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnMoveAsync">
            <summary>
            Occurs when the user wants to move a file or a folder into an another folder.
            </summary>
            <returns>Returns a task which moves the file or the folder into the selected folder when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFileCountExceededAsync(System.Int32)">
            <summary>
            Shows an error message when the user selects a too big number of files.
            </summary>
            <param name="maximumFileCount">Maximum number of files the user can take in one upload.</param>
            <returns>Returns a task that show an error dialog message when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.BuildFlatView">
            <summary>
            Build the flat entry.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.BuildFlatViewItem(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Build a flat item.
            </summary>
            <param name="entry">Entry to use to append the <paramref name="item"/>.</param>
            <param name="item">Item to add in the entry.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnChangeSort(FluentUI.Blazor.Community.Components.FileSortBy)">
            <summary>
            Change the sort of the view.
            </summary>
            <param name="sortBy">Sort to use.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnChangeView(FluentUI.Blazor.Community.Components.FileView)">
            <summary>
            Change the view of the file manager.
            </summary>
            <param name="view">View to use.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnSortAscending">
            <summary>
            Sort the entries in ascending order.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnSortDescending">
            <summary>
            Sort the entries in descending order.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFolderCreatedAsync(FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs{`0})">
            <summary>
            Occurs when a folder is created in asynchronous way.
            </summary>
            <param name="e">Event args for the created folder.</param>
            <returns>Returns a task which raised the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFolderCreated"/> event callback when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.UpdateTreeView(FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs{`0})">
            <summary>
            Updates the tree view when a folder is created.
            </summary>
            <param name="e">Event args of the created folder.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.UpdatePathBar(FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs{`0})">
            <summary>
            Updates the path bar when a folder is created.
            </summary>
            <param name="e">Event args of the created folder.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnShowDetailsAsync">
            <summary>
            Occurs when the user clicks on the show details button.
            </summary>
            <returns>Returns a task which show the details of the current selected entries.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnRenameAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Occurs when the user clicks on the rename button.
            </summary>
            <param name="entry">Entry to rename.</param>
            <returns>Returns a task which rename the entry when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.BuildPathRoot">
            <summary>
            Build the complete path root for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnPathChanged(System.String)">
            <summary>
            Occurs when the path is changed.
            </summary>
            <param name="path">Represents the new path.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.BuildTreeView">
            <summary>
            Build a tree view.
            </summary>
            <remarks>The tree view is only build in <see cref="F:FluentUI.Blazor.Community.Components.FileManagerView.Desktop"/></remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.BuildTreeViewItem(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Boolean)">
            <summary>
            Build a <see cref="T:Microsoft.FluentUI.AspNetCore.Components.TreeViewItem"/>.
            </summary>
            <param name="entry">Entry to use to create the item.</param>
            <param name="isExpanded">Value indicating if the node is expanded or not.</param>
            <returns>Returns the created <see cref="T:Microsoft.FluentUI.AspNetCore.Components.TreeViewItem"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnUpdateEntry(FluentUI.Blazor.Community.Components.FileManagerEntryEventArgs{`0})">
            <summary>
            Updates the selected entry.
            </summary>
            <param name="e">The current selected entry.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.FindTreeViewItem(System.Collections.Generic.IEnumerable{Microsoft.FluentUI.AspNetCore.Components.ITreeViewItem},System.String)">
            <summary>
            Finds the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.TreeViewItem"/> specified by <paramref name="id"/> inside the <paramref name="items"/> nodes.
            </summary>
            <param name="items">Items to use for the search.</param>
            <param name="id">Identifier of the item.</param>
            <returns>Returns the item if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnUpdateCurrentEntry">
            <summary>
            Updates the current entry.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.CleanPath(System.String)">
            <summary>
            Clean the path (removes the last backslash if found)
            </summary>
            <param name="path">Path to clean.</param>
            <returns>Returns the cleaned path.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnCreateFolderAsync">
            <summary>
            Occurs when the user wants to create a folder.
            </summary>
            <returns>Returns a task which creates a folder when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnDownloadSingleAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Download a single entry as a file.
            </summary>
            <param name="e">Entry to download.</param>
            <returns>Returns a task which download a file when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnDownloadMultiAsync(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Download a multiple entries as a zip file.
            </summary>
            <param name="items">Entries to download.</param>
            <returns>Returns a task which download a zip file when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.DownloadFileAsync(System.String,System.Byte[],System.String)">
            <summary>
            Download a file in an asynchronous way.
            </summary>
            <param name="filename">Name of the file.</param>
            <param name="data">Binary content of the file.</param>
            <param name="extension">Extension of the file.</param>
            <returns>Returns a task which download the file when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnDownloadAsync">
            <summary>
            Occurs when the user clicks the download button.
            </summary>
            <returns>Returns a task which download the selected files when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnDeleteAsync">
            <summary>
            Deletes an entry in an asynchronous way.
            </summary>
            <returns>Returns a task which deletes the entry when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.DeleteFromPathBar(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes the items from the path bar.
            </summary>
            <param name="idCollection">Collection of segments to remove from the pathbar.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.RemoveSelectedItemFromMainEntries(System.String,System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Removes the <paramref name="items"/> from the node specified by <paramref name="id"/>.
            </summary>
            <param name="id">Identifier of the node.</param>
            <param name="items">Items to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnSearchEntries">
            <summary>
            Search the entries.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.SetDisabled(System.Boolean)">
            <summary>
            Disable the component.
            </summary>
            <param name="isDisabled">Value indicating if the component is disabled or not.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.SetDisabled(System.Collections.Generic.IEnumerable{Microsoft.FluentUI.AspNetCore.Components.ITreeViewItem},System.Boolean)">
            <summary>
            Disable all the specified <paramref name="items"/>.
            </summary>
            <param name="items">Items to disable.</param>
            <param name="isDisabled">Value indicating if the items are disabled or not.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnProgressChange(Microsoft.FluentUI.AspNetCore.Components.FluentInputFileEventArgs)">
            <summary>
            Occurs when a file is uploading.
            </summary>
            <param name="e">Event args of the current uploading file.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFileUploadedAsync(Microsoft.FluentUI.AspNetCore.Components.FluentInputFileEventArgs)">
            <summary>
            Occurs when a file is uploaded.
            </summary>
            <param name="e">Event args of the uploaded file.</param>
            <returns>Returns a task which raised the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFileUploaded"/> event callback when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnCompleted(System.Collections.Generic.IEnumerable{Microsoft.FluentUI.AspNetCore.Components.FluentInputFileEventArgs})">
            <summary>
            Occurs when all file have been uploaded.
            </summary>
            <param name="_">Event args of all uploaded files.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.GetProgressLabelFromState">
            <summary>
            Gets the label for the progress part.
            </summary>
            <returns>Returns the label for the progress part.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> class.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IDeletable">
            <summary>
            Represents an interface to allow a file to be deleted or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IDeletable.IsDeleteable">
            <summary>
            Gets a value indicating if the file can be deleted or not.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IDownloadable">
            <summary>
            Represents an interface to allow a file to be downloaded or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IDownloadable.IsDownloadAllowed">
            <summary>
            Gets a value indicating if the file can be downloaded or not.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IFileManagerItemsProvider`1">
            <summary>
            Represents the items provider of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IFileManagerItemsProvider`1.GetItemsAsync">
            <summary>
            Gets the items of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> in an asynchronous way.
            </summary>
            <returns>Returns a <see cref="T:System.Threading.Tasks.ValueTask`1"/> which contains the items.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IRenamable">
            <summary>
            Represents an interface to allow a file to be renamed or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IRenamable.IsRenamable">
            <summary>
            Gets a value indicating if the file can be renamed or not.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.NoFileEntryData">
            <summary>
            Represents an entry which no data.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.NoFileEntryData.IsDownloadAllowed">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.NoFileEntryData.IsRenamable">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.NoFileEntryData.IsDeleteable">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.UploadFileEventArgs">
            <summary>
            Represents the event args for an uploaded file.
            </summary>
            <param name="Name">Name of the file.</param>
            <param name="Data">Data of the file.</param>
            <param name="Extension">Extension of the file.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.UploadFileEventArgs.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Represents the event args for an uploaded file.
            </summary>
            <param name="Name">Name of the file.</param>
            <param name="Data">Data of the file.</param>
            <param name="Extension">Extension of the file.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.UploadFileEventArgs.Name">
            <summary>Name of the file.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.UploadFileEventArgs.Data">
            <summary>Data of the file.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.UploadFileEventArgs.Extension">
            <summary>Extension of the file.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FloatingPosition">
            <summary>
            Represents the position of the floating button.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.TopLeft">
            <summary>
            The button is placed at the top left based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.TopCenter">
            <summary>
            The button is placed at the top center based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.TopRight">
            <summary>
            The button is placed at the top right based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.MiddleLeft">
            <summary>
            The button is placed at the middle left based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.MiddleCenter">
            <summary>
            The button is placed at the middle center based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.MiddleRight">
            <summary>
            The button is placed at the middle right based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.BottomLeft">
            <summary>
            The button is placed at the bottom left based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.BottomCenter">
            <summary>
            The button is placed at the bottom center based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.BottomRight">
            <summary>
            The button is placed at the bottom right based on its relative parent container.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxFloatingButton">
            <summary>
            Represents a floating button.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFloatingButton._isFixed">
            <summary>
            Represents a value indicating if the floating button is fixed position.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.JavascriptFilename">
            <summary>
            Represents the javascript file to use.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFloatingButton._module">
            <summary>
            Represents the loaded javascript module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFloatingButton._updateTarget">
            <summary>
            Represents indicating if the target has changed and we need to check if the new target is valid.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFloatingButton"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.InternalStyle">
            <summary>
            Gets the style of the button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.IsVisible">
            <summary>
            Gets or sets if the button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.Position">
            <summary>
            Gets or sets the position of the floating button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.RelativeContainerId">
            <summary>
            Gets or sets the identifier of the relative container the current button belongs to.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.OnMouseEnter">
            <summary>
            Gets or sets the callback when the mouse enters the button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.OnKeyDown">
            <summary>
            Gets or sets the callback when a key is pressed when the button is focused.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.JSRuntime">
            <summary>
            Gets or sets the javascript runtime to use.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.GetIsFixedAsync">
            <summary>
            Gets if the position of the button is fixed or not.
            </summary>
            <returns>Returns a task which set the position of the button when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GridLayoutBase">
            <summary>
            Represents a base for a grid layout.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GridLayoutBase._items">
            <summary>
            Represents the items inside the layout.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayoutBase.Items">
            <summary>
            Gets the items inside the layout.
            </summary>
        </member>
        <member name="E:FluentUI.Blazor.Community.Components.GridLayoutBase.SaveRequested">
            <summary>
            Event to invoke when a save is requested.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayoutBase.IsDirty">
            <summary>
            Gets or sets a value indicating is dirty or not.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.Get``1(System.String)">
            <summary>
            Gets the item from its key.
            </summary>
            <typeparam name="T">Type of the item.</typeparam>
            <param name="key">Key to find.</param>
            <returns>Returns the item if found, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.Get``1(System.Int32)">
            <summary>
            Gets the item from its index.
            </summary>
            <typeparam name="T">Type of the item.</typeparam>
            <param name="index">Index of the item.</param>
            <returns>Returns the index of the item.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.AddRange(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.GridLayoutBaseItem})">
            <summary>
            Adds a range of <paramref name="items"/> into the layout.
            </summary>
            <param name="items">Items to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.Add``1(System.String,System.Int32)">
            <summary>
            Adds an item into the layout.
            </summary>
            <typeparam name="T">Type of the item.</typeparam>
            <param name="key">Key of the item.</param>
            <param name="index">Index of the item.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.Remove(System.Int32)">
            <summary>
            Removes an item from its index.
            </summary>
            <param name="index">Index to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.RequestSave">
            <summary>
            Request a save.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.Update``1(System.Func{``0,System.String},System.Collections.Generic.IList{``0})">
            <summary>
            Updates the items.
            </summary>
            <typeparam name="TItem">Type of the items.</typeparam>
            <param name="keyFunc">Function to extract a key from an item.</param>
            <param name="items">Items to rearrange.</param>
            <exception cref="T:System.InvalidOperationException">Occurs when <paramref name="keyFunc"/> is
             <see langword="null" />.</exception>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GridLayoutBaseItem">
            <summary>
            Represents an item of a <see cref="T:FluentUI.Blazor.Community.Components.GridLayoutBase"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayoutBaseItem.Index">
            <summary>
            Gets or sets the index of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayoutBaseItem.Key">
            <summary>
            Gets or sets the key of the item.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxImageGroup">
            <summary>
            Represents a group of images.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxImageGroup._children">
            <summary>
            Represents the images inside this component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxImageGroup._isPopoverOpen">
            <summary>
            Represents a value if the popover is opened.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxImageGroup"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.MaxVisibleItems">
            <summary>
            Gets or sets the number of visible items in the group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.Size">
            <summary>
            Gets or sets the size of each image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.Shape">
            <summary>
            Gets or sets the shape of each image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.BorderStyle">
            <summary>
            Gets or sets the border style of each image.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.BackgroundStyle">
            <summary>
            Gets or sets the background style of each image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.GroupLayout">
            <summary>
            Gets or sets the layout of the group.
            </summary>
            <remarks>
            By default, the layout is set to <see cref="F:FluentUI.Blazor.Community.Components.ImageGroupLayout.Spread"/>.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.VisibleCount">
            <summary>
            Gets the number of visible items.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.Add(FluentUI.Blazor.Community.Components.FluentCxImageGroupItem)">
            <summary>
            Add an image into the group.
            </summary>
            <param name="imageGroupItem">Image to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.Remove(FluentUI.Blazor.Community.Components.FluentCxImageGroupItem)">
            <summary>
            Remove an image from the group.
            </summary>
            <param name="imageGroupItem"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.GetSpreadMarginLeft(FluentUI.Blazor.Community.Components.FluentCxImageGroupItem)">
            <summary>
            Gets the margin left for the spread layout.
            </summary>
            <param name="imageGroupItem">Image where the margin left will be set.</param>
            <returns>Returns the margin left.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.GetStackMarginLeft(FluentUI.Blazor.Community.Components.FluentCxImageGroupItem)">
            <summary>
            Gets the margin left for the stack layout.
            </summary>
            <param name="imageGroupItem">Image where the margin left will be set.</param>
            <returns>Returns the margin left.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.IsInPopover(FluentUI.Blazor.Community.Components.FluentCxImageGroupItem)">
            <summary>
            Gets a value indicating if the current image is inside the popover.
            </summary>
            <param name="imageGroupItem">Image to check if it is inside a popover.</param>
            <returns>Returns <see langword="true" /> if the image is inside a popover, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.GetButtonStyle">
            <summary>
            Gets the style of the popover button.
            </summary>
            <returns>Returns the style of the button.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.OnItemParemetersChanged(FluentUI.Blazor.Community.Components.FluentCxImageGroupItem)">
            <summary>
            Occurs when a parameter of a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem"/> changed.
            </summary>
            <param name="imageGroupItem">Image which the parameters have changed.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem">
            <summary>
            Represents an image.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem._hasParameterChanged">
            <summary>
            Represents a value indicating if a parameter has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.Source">
            <summary>
            Gets or sets the source of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.Alt">
            <summary>
            Gets or sets the alt property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.Title">
            <summary>
            Gets or sets the title property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.Parent">
            <summary>
            Gets the parent of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.InternalStyle">
            <summary>
            Gets the style of the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.GetMarginLeft">
            <summary>
            Gets the margin-left of the component.
            </summary>
            <returns>Returns the margin-left of the component.</returns>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.InternalRenderer">
            <summary>
            Gets or sets the internal renderer for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ImageGroupLayout">
            <summary>
            Represents the layout of the image group.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageGroupLayout.Spread">
            <summary>
            The images are represented in a spread way in the group.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageGroupLayout.Stack">
            <summary>
            The images are represented in an horizontal stack in the group.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ImageShape">
            <summary>
            Represents the shape of the image.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageShape.Square">
            <summary>
            The image is square.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageShape.RoundSquare">
            <summary>
            The image is round square.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageShape.Circle">
            <summary>
            The image is circle.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ImageShapeExtensions">
            <summary>
            Extensions for the <see cref="T:FluentUI.Blazor.Community.Components.ImageShape"/> enum.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ImageShapeExtensions.ToBorderRadius(FluentUI.Blazor.Community.Components.ImageShape)">
            <summary>
            Converts the <see cref="T:FluentUI.Blazor.Community.Components.ImageShape"/> to a CSS class.
            </summary>
            <param name="shape">The image shape.</param>
            <returns>The CSS class representing the image shape.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ImageSize">
            <summary>
            Represents the sizes options for the image group.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size16">
            <summary>
            Uniform size : 16px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size20">
            <summary>
            Uniform size : 20px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size24">
            <summary>
            Uniform size : 24px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size28">
            <summary>
            Uniform size : 28px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size32">
            <summary>
            Uniform size : 32px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size36">
            <summary>
            Uniform size : 36px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size40">
            <summary>
            Uniform size : 40px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size48">
            <summary>
            Uniform size : 48px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size56">
            <summary>
            Uniform size : 56px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size64">
            <summary>
            Uniform size : 64px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size72">
            <summary>
            Uniform size : 72px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size96">
            <summary>
            Uniform size : 96px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size120">
            <summary>
            Uniform size : 120px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size128">
            <summary>
            Uniform size : 128px.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Internal.ChildComponentValueEqualityComparer`1">
            <summary>
            Represents the comparer for a value item of a component.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <remarks>The component must implement <see cref="T:FluentUI.Blazor.Community.Components.IItemValue`1"/>.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.ChildComponentValueEqualityComparer`1.Default">
            <summary>
            Gets the default instance of the comparer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.ChildComponentValueEqualityComparer`1.Equals(Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase,Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.ChildComponentValueEqualityComparer`1.GetHashCode(Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1">
            <summary>
            Represents the state of a drop zone.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1.ActiveItem">
            <summary>
            Gets the active item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1.TargetItem">
            <summary>
            Gets the target item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1.ActivePlaceholderId">
            <summary>
            Gets the identifier of the active placeholder.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1.Items">
            <summary>
            Gets the list of items inside the container.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1.RemoveActiveItem">
            <summary>
            Remove the active item from the list of item.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1.Reset">
            <summary>
            Reset the drop zone.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1">
            <summary>
            Represents the drop zone component.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1._renderDropZone">
            <summary>
            Represents the fragment to render the drop zone.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1._dragEnter">
            <summary>
            Represents a value indicating if the cursor enters into the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.DropZoneContainer">
            <summary>
            Gets or sets the parent component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.ItemCss">
            <summary>
            Gets or sets the css for the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.IsDragAllowed">
            <summary>
            Gets or sets a value indicating if the component can be dragged.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.IsItemDropAllowed">
            <summary>
            Gets or sets a value indicating if the component can be dropped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.State">
            <summary>
            Gets the state of the parent container.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.Value">
            <summary>
            Gets or sets the value of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.ForceRender">
            <summary>
            Gets or sets a value indicating wether the component will render. 
            </summary>
            <remarks>
            This value is used internally by <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1"/>.
            You mustn't use it.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.AddInContainer">
            <summary>
            Gets or sets a value indicating wether the component will be inserted into the container. 
            </summary>
            <remarks>
            This value is used internally by <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1"/>.
            You mustn't use it.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.Index">
            <summary>
            Gets the index of the current component inside the container.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.Component">
            <summary>
            Gets the render of the current component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.GetItemStyle">
            <summary>
            Gets the style of the item.
            </summary>
            <returns>Returns the style of the item.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.GetItemCss">
            <summary>
            Gets the css of the item.
            </summary>
            <returns>Returns the css of the item.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.GetIsDragTargetDenied">
            <summary>
            Gets the value indicating if the target is not allowed to be dragged.
            </summary>
            <returns>Returns <see langword="true" /> if the target cannot be dragged, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.GetIsDragTarget">
            <summary>
            Gets a value indicating if the target can be dragged.
            </summary>
            <returns>Returns <see langword="true" /> if the target can be dragged, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.GetPlaceholderCss(System.Int32)">
            <summary>
            Gets the css for the placeholder.
            </summary>
            <param name="index">Index of the placeholder.</param>
            <returns>Returns the css of the placeholder.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.OnDragLeave">
            <summary>
            Occurs when the component leaves a drop zone.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.OnDragEndAsync">
            <summary>
            Occurs when the user has finished dragging the component.
            </summary>
            <returns>Returns a task which completes the drag.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.OnDropItemOnPlaceholderAsync(System.Int32)">
            <summary>
            Occurs when the components drops into a valid placeholder.
            </summary>
            <param name="index">Index of the placeholder.</param>
            <returns>Returns a task which process the placeholder when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.OnDragStart">
            <summary>
            Occurs when the drag starts.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.OnDragEnterAsync">
            <summary>
            Occurs when the component enters a valid drop zone.
            </summary>
            <returns>Returns a task which swap the components when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.RenderInternal">
            <summary>
            Force the rendering of the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1">
            <summary>
            Represents a drop zone container.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1._children">
            <summary>
            Represents the children inside the component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1._renderItem">
            <summary>
            Represents the fragment to render an item.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.State">
            <summary>
            Gets or sets the state of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Virtualize">
            <summary>
            Gets or sets if the component is virtualized.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ItemSize">
            <summary>
            Gets or sets the size of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.MaxItems">
            <summary>
            Gets or sets the maximum items which can be dragged.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ItemKey">
            <summary>
            Gets or sets the function to extract a key from an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Layout">
            <summary>
            Gets or sets the layout of the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.InternalCss">
            <summary>
            Gets the css of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.InternalStyle">
            <summary>
            Gets the style of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.CanOverflow">
            <summary>
            Gets or sets a value indicating if the component can overflow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsDropAllowed">
            <summary>
            Gets or sets a function which indicates if a component can be dropped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ItemContent">
            <summary>
            Gets or sets the content of an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsDragAllowed">
            <summary>
            Gets or sets a function which indicates if the component can be dragged.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Immediate">
            <summary>
            Gets or sets a value indicating if the drag and drop is immediate.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.CloneItem">
            <summary>
            Gets or sets a function to clone an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ItemCss">
            <summary>
            Gets or sets a function to set the css of an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsDragEnabled">
            <summary>
            Gets or sets if the drag is enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Items">
            <summary>
            Gets or sets the list of the items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Overflow">
            <summary>
            Gets or sets the event callback to raise when the component overflows.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.DragEnd">
            <summary>
            Gets or sets the event callback to raise when the drag ends.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnItemDropRejected">
            <summary>
            Gets or sets the event callback to raise when the drop is rejected for an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnItemDrop">
            <summary>
            Gets or sets the event callback to raise when an item is dropped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnReplacedItemDrop">
            <summary>
            Gets or sets the event callback to raise when an item is replaced after drop.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.TileGridSettings">
            <summary>
            Gets or sets the settings of the tile grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.PersistenceEnabled">
            <summary>
            Gets or sets if the layout is persisted.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.CheckEquality(`0,`0)">
            <summary>
            Checks equality between two items.
            </summary>
            <param name="left">Left item to compare.</param>
            <param name="right">Right item to compare.</param>
            <returns>Returns <see langword="true" /> if the items are equal, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnDropAsync(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Occurs when an item is dropped into the component.
            </summary>
            <param name="e">Event args associated to the drop.</param>
            <returns>Returns a task which manages the drop when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsItemDraggable(`0)">
            <summary>
            Gets a value indicating if an item is draggable or not.
            </summary>
            <param name="item">Item to check.</param>
            <returns>Returns <see langword="true" /> if the item is draggable, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsOverflow">
            <summary>
            Gets if the component overflows.
            </summary>
            <returns>Returns <see langword="true" /> if the component overflows, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsItemDropAllowed(`0)">
            <summary>
            Gets a value indicating if the item is allowed to drop.
            </summary>
            <param name="item">Item to check.</param>
            <returns>Returns <see langword="true" /> if the item is allowed to drop, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IndexOf(`0)">
            <summary>
            Gets the index of the item.
            </summary>
            <param name="item">Item to get the index.</param>
            <returns>Returns the index of the item.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified <paramref name="index"/>.
            </summary>
            <param name="index">Index of the item.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index">Index of the item.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsDropAllowedAsync">
            <summary>
            Gets a value indicating if the drop is allowed.
            </summary>
            <returns>Returns a task which contains <see langword="true"/> if the drop is allowed, <see langword="false" /> otherwise
             when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnItemDropAsync(`0)">
            <summary>
            Drops an item in an asynchronous way.
            </summary>
            <param name="item">Item to drop.</param>
            <returns>Returns a task which drops an item when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnDragEndAsync">
            <summary>
            Finish the drag.
            </summary>
            <returns>Returns a task which completes the drag when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.UpdateItems">
            <summary>
            Updates the items.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Add(Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase)">
            <summary>
            Adds a child into the container.
            </summary>
            <param name="child">Child to add.</param>
            <exception cref="T:System.InvalidOperationException">Occurs when the child is not <see cref="T:FluentUI.Blazor.Community.Components.IItemValue`1"/> and
             when the value of the child is <see langword="null" /></exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Remove(Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase)">
            <summary>
            Removes a child from the container.
            </summary>
            <param name="child">Child to remove.</param>
            <exception cref="T:System.InvalidOperationException">Occurs when the child is not <see cref="T:FluentUI.Blazor.Community.Components.IItemValue`1"/> and
             when the value of the child is <see langword="null" /></exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.SwapAsync(`0,`0)">
            <summary>
            Swap the <paramref name="overItem"/> with the <paramref name="activeItem"/>.
            </summary>
            <param name="overItem">First item to swap.</param>
            <param name="activeItem">Second item to swap.</param>
            <returns>Returns a task which swap the items when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Refresh">
            <summary>
            Refresh the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnDropItemPlaceholderAsync(System.Int32)">
            <summary>
            Drops the item inside a placeholder in an asynchronous way.
            </summary>
            <param name="index">Index of the placeholder.</param>
            <returns>Returns a task which drops the item in the placeholder when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.GetStyle(`0)">
            <summary>
            Gets the style of the <paramref name="value"/>.
            </summary>
            <param name="value">Value to get the style.</param>
            <returns>Returns the style of the item.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ReorderItemsFromLayout">
            <summary>
            Reorders the items using a layout.
            </summary>
            <returns>Returns the ordered items.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ReorderChildrenFromLayout">
            <summary>
            Reorders the children using a layout.
            </summary>
            <returns>Returns the ordered components.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Internal.TileGridSettings">
            <summary>
            Represents the settings of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.ColumnWidth">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.MinimumColumnWidth">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.Columns">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.RowHeight">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.Width">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.Height">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.MinimumRowHeight">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.GetRows">
            <summary>
            Gets the style of the rows of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.
            </summary>
            <returns>Returns the style of the rows of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.GetColumns">
            <summary>
            Gets the style of the columns of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.
            </summary>
            <returns>Returns the style of the rows of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.ToString">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ITileGridSettings">
            <summary>
            Represents the settings for a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridSettings.ColumnWidth">
            <summary>
            Gets the width of the column.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridSettings.MinimumColumnWidth">
            <summary>
            Gets the minimum width of the column.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridSettings.Columns">
            <summary>
            Gets the number of columns.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridSettings.RowHeight">
            <summary>
            Gets the height of the row.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridSettings.Width">
            <summary>
            Gets the width of the tile grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridSettings.Height">
            <summary>
            Gets the height of the tile grid.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AccountLabels">
            <summary>
            Represents a set of localized labels and display texts used for login and authentication user interface elements.
            </summary>
            <remarks>Use this record to provide custom or localized text for login forms, registration prompts, and
            related authentication UI components. Predefined instances such as <see cref="P:FluentUI.Blazor.Community.Components.AccountLabels.Default"/> and <see cref="P:FluentUI.Blazor.Community.Components.AccountLabels.French"/>
            are available for common scenarios, or you can create custom instances for additional languages or branding
            requirements.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.Default">
            <summary>
            Gets the default set of labels for login-related user interface elements.
            </summary>
            <remarks>Use this property to access a standard set of login labels when no customization is required.
            The returned instance is read-only and shared across the application.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.French">
            <summary>
            Gets the set of login-related labels localized in French.
            </summary>
            <remarks>Use this property to access French translations for common authentication UI elements, such
            as login, registration, and password fields. This is useful for applications that support multiple languages and
            need to display user interface text in French.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.Login">
            <summary>
            Gets the login identifier associated with the user or entity.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.Logout">
            <summary>
            Gets the display text for the logout action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.Register">
            <summary>
            Gets the name of the register associated with this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.UserName">
            <summary>
            Gets the user name associated with the current instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.Password">
            <summary>
            Gets the password associated with the current instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.RememberMe">
            <summary>
            Gets the display text for the 'Remember Me' option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ExternalLogin">
            <summary>
            Gets the display text for the external login option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ConnectWithProvider">
            <summary>
            Gets the format string used to display the 'Connect with' prompt for a specific provider.
            </summary>
            <remarks>The format string should contain a placeholder (such as "{0}") that will be replaced with the
            provider's name at runtime.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.SignUpWithProvider">
            <summary>
            Gets the format string used to display a sign-up prompt with a specific authentication provider.
            </summary>
            <remarks>This string is intended to be formatted with the name of the authentication provider. For
            example, formatting with "Google" produces "Sign up with Google".</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.Email">
            <summary>
            Gets the email address associated with the login model.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.EmailPlaceholder">
            <summary>
            Gets the placeholder text displayed in the email input field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.PasswordPlaceholder">
            <summary>
            Gets the placeholder text displayed in the password input field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ForgotPassword">
            <summary>
            Gets the display text for the 'Forgot Password' link or button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.DontHaveAnAccount">
            <summary>
            Gets the default message displayed to users who do not have an account.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.AlreadyHaveAnAccount">
            <summary>
            Gets the localized text displayed to prompt users who already have an account.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.SignUp">
            <summary>
            Gets the localized display text for the sign-up action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ForgotPasswordInstructions">
            <summary>
            Gets or sets the instructions displayed to users for resetting a forgotten password.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.SendInstructions">
            <summary>
            Gets or sets the text displayed on the button to send password reset instructions.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ConfirmPassword">
            <summary>
            Gets the confirmation password value used for validating user input.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ConfirmPasswordPlaceholder">
            <summary>
            Gets the placeholder text displayed in the confirm password input field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.DisplayName">
            <summary>
            Gets the display name value used for validating user input.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.DisplayNamePlaceholder">
            <summary>
            Gets the placeholder text displayed in the display name input field before the user enters a value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ForgotPasswordConfirmation">
            <summary>
            Gets the confirmation message displayed after a successful password reset request.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ForgotPasswordConfirmationInstructions">
            <summary>
            Gets the confirmation instructions displayed to users after they request a password reset.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.EmailNotReceived">
            <summary>
            Gets the message displayed when an email has not been received.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ResendEmail">
            <summary>
            Gets the display text for the resend email action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ResetPassword">
            <summary>
            Gets the display text for the reset password action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.Reset">
            <summary>
            Gets the string value representing the reset action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ResetPasswordError">
            <summary>
            Gets the error message to display when a password reset operation fails.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.InvalidPasswordReset">
            <summary>
            Gets the default message displayed when a password reset request is invalid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ResetPasswordInvalidLink">
            <summary>
            Gets the message displayed when a password reset link is invalid or has expired.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ResetPasswordConfirmation">
            <summary>
            Gets the confirmation message displayed to the user after a password reset operation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ResetPasswordConfirmationInstructions">
            <summary>
            Gets the confirmation instructions displayed to the user after a successful password reset.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.InvalidCredentials">
            <summary>
            Gets the default error message displayed when user credentials are invalid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.InvalidCredentialsMessage">
            <summary>
            Gets the default message displayed when user credentials are invalid during authentication.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.AuthenticationTwoFactor">
            <summary>
            Gets the display name for two-factor authentication.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.AuthenticationTwoFactorMessage">
            <summary>
            Gets the message displayed to users when two-factor authentication is required during login.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.AuthenticationCode">
            <summary>
            Gets the authentication code used to verify user identity during authentication processes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.RememberMachine">
            <summary>
            Gets the display text used to prompt the user to remember this machine during authentication.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.DontHaveTwoFactorAccess">
            <summary>
            Gets the message displayed when the user does not have access to their two-factor authentication app.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.LoginWithRecoveryCode">
            <summary>
            Gets the text to display for the option to log in using a recovery code.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.SummaryErrorMessage">
            <summary>
            Gets the default error message displayed when validation fails for a summary section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.VerifyRecoveryCode">
            <summary>
            Gets the label to display for verifying a recovery code.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.VerifyRecoveryCodeDescription">
            <summary>
            Gets the description text displayed when verifying a recovery code.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.RecoveryCode">
            <summary>
            Gets the label for the recovery code input field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.RecoveryCodePlaceholder">
            <summary>
            Gets the placeholder text displayed in the recovery code input field.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.InvalidRecoveryCodeMessage">
            <summary>
            Gets the message displayed when a user enters an invalid recovery code.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.AccountLocked">
            <summary>
            Gets the status message indicating that the user account is locked out.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.AccountLockedMessage">
            <summary>
            Gets the message displayed to users when their account is locked due to multiple unsuccessful login attempts.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.AccountDisabled">
            <summary>
            Gets the status message indicating that the user account is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.AccountDisabledMessage">
            <summary>
            Gets the default message displayed when a user's account has been disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.EmailNotFoundErrorMessage">
            <summary>
            Gets the error message displayed when a specified email address is not found.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.EmailAlreadyInUseErrorMessage">
            <summary>
            Gets the error message displayed when an email address is already associated with an existing account.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.NoServerResponseErrorMessage">
            <summary>
            Gets the error message displayed when there is no response from the server.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.UserNameAlreadyInUse">
            <summary>
            Gets the message template displayed when a username is already in use.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.UserNotConfirmed">
            <summary>
            Gets the label displayed when a user has not confirmed their account.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.UserNotConfirmedMessage">
            <summary>
            Gets the message displayed to users whose accounts have not been confirmed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.UnknownError">
            <summary>
            Gets the default error message used when the specific error is unknown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.UnknownErrorMessage">
            <summary>
            Gets the default message displayed when an unspecified error occurs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.AssociateProviderNameAccount">
            <summary>
            Gets or sets the format string used to prompt users to associate their account with a specified provider.
            </summary>
            <remarks>The format string should include a placeholder, such as "{0}", which will be replaced with
            the provider's name at runtime. For example, if the provider is "Microsoft", the resulting prompt will be
            "Associate your Microsoft account."</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.AssociateProviderNameAccountMessage">
            <summary>
            Gets or sets the message displayed to users after successful authentication with an external provider, prompting
            them to enter an email address and complete registration.
            </summary>
            <remarks>The message may include a placeholder, such as "{0}", which is replaced with the name of the
            external authentication provider at runtime.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ExternalProviderAuthentication">
            <summary>
            Gets or sets the authentication method used by an external provider.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ExternalProviderProcessing">
            <summary>
            Gets or sets the message displayed while processing external provider authentication.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.RegisterConfirmation">
            <summary>
            Gets or sets the confirmation message displayed after a successful registration.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.RegisterConfirmationMessage">
            <summary>
            Gets or sets the message displayed to users after successful registration.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.EmailConfirmation">
            <summary>
            Gets or sets the label for email confirmation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.EmailConfirmationMessage">
            <summary>
            Gets or sets the message displayed to users after successful email confirmation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ErrorEmailMessage">
            <summary>
            Gets or sets the message displayed when an error occurs while confirming an email.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.EmailConfirmationProcessing">
            <summary>
            Gets or sets the message displayed while processing email confirmation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.ProcessingLogin">
            <summary>
            Gets or sets the message displayed while a login operation is in progress.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.TwoFactorUnknownError">
            <summary>
            Gets the error message to display when an unknown error occurs during two-factor authentication.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLabels.InvalidTwoFactorCodeMessage">
            <summary>
            Gets the message displayed when a user enters an invalid two-factor authentication code.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AccountDisabled">
            <summary>
            Represents a component that displays an account disabled message and provides options for user login.
            </summary>
            <remarks>Use this class to present users with information and actions when their account is disabled, such as
            displaying custom labels and handling login attempts. The component can be customized via the provided
            parameters.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountDisabled.Parent">
            <summary>
            Gets or sets the callback for when the user clicks the login button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AccountDisabled.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AccountLocked">
            <summary>
            Represents a component that displays an account locked message and provides options for user login.
            </summary>
            <remarks>Use this component to inform users that their account is locked and to offer a way to initiate the
            login process. The component can be customized with specific labels and a callback for login actions.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountLocked.Parent">
            <summary>
            Gets or sets the callback for when the user clicks the login button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AccountLocked.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.UnknownError">
            <summary>
            Represents a component that displays an unknown error message and provides options for user login.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.UnknownError.Parent">
            <summary>
            Gets or sets the callback for when the user clicks the login button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.UnknownError.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.UserNotConfirmed">
            <summary>
            Represents a component that displays an user not confirmed message and provides options for user login.
            </summary>
            <remarks>Use this component to inform users that their account is locked and to offer a way to initiate the
            login process. The component can be customized with specific labels and a callback for login actions.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.UserNotConfirmed.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> component.  
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.UserNotConfirmed.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.UserNotConfirmed.OnLoginAsync">
            <summary>
            Asynchronously transitions the parent view to the login screen.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.EmailConfirmation">
            <summary>
            Represents the confirmation component displayed after a user confirms their email address.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EmailConfirmation._isProcessing">
            <summary>
            Value indicating whether the component is currently processing the email confirmation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EmailConfirmation._isSuccessful">
            <summary>
            Value indicating whether the email confirmation was successful.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.EmailConfirmation.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.EmailConfirmation.OnConfirmEmail">
            <summary>
            Gets or sets the callback that is invoked when the user confirms their email address.
            </summary>
            <remarks>Use this event to handle actions that should occur after a user successfully confirms their
            email, such as updating user status or displaying a confirmation message. The event provides details about the
            confirmation through the <see cref="T:FluentUI.Blazor.Community.Components.ConfirmEmailEventArgs"/> parameter.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.EmailConfirmation.UserId">
            <summary>
            Gets or sets the user identifier provided in the query string.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.EmailConfirmation.Code">
            <summary>
            Gets or sets the code value supplied from the query string.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.EmailConfirmation.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.EmailConfirmation.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.EmailConfirmation.OnLoginAsync">
            <summary>
            Handles the login event asynchronously by updating the parent view to the login screen, if a parent is
            available.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ExternalProvider">
            <summary>
            Represents an external provider component that manages account-related display labels.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ExternalProvider._model">
            <summary>
            Represents the model for external provider data.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ExternalProvider._fluentEditForm">
            <summary>
            Represents the FluentEditForm component used for user input.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ExternalProvider._errors">
            <summary>
            Represents the collection of error messages.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ExternalProvider._isProcessing">
            <summary>
            Value indicating whether the component is currently processing an operation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ExternalProvider._mustRegister">
            <summary>
            Value indicating whether the user must register an account.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProvider.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> component in the cascading parameter hierarchy.
            </summary>
            <remarks>This property is typically set by the Blazor framework to provide access to the nearest
            ancestor <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> component. It should not be set manually in application code.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProvider.State">
            <summary>
            Gets or sets the account state service that provides information about the current account status.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProvider.OnProcessing">
            <summary>
            Gets or sets the callback that is invoked when external provider processing occurs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProvider.NavigationManager">
            <summary>
            Gets or sets the <see cref="P:FluentUI.Blazor.Community.Components.ExternalProvider.NavigationManager"/> used for managing URI navigation and location state within the
            application.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProvider.OnRegister">
            <summary>
            Gets or sets the callback that is invoked when a user registers using an external authentication provider.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProvider.IsDisabled">
            <summary>
            Gets a value indicating whether the registration action is disabled based on the email field in the model.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalProvider.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalProvider.GetAssociateProviderNameAccount">
            <summary>
            Formats and returns the associate provider name and account information using the current culture.
            </summary>
            <returns>A string containing the formatted associate provider name and account, localized according to the current
            culture.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalProvider.GetAssociateProviderNameAccountMessage">
            <summary>
            Generates a formatted message associating the provider name with the account, using the current culture.
            </summary>
            <returns>A string containing the localized message with the provider name inserted.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalProvider.OnRegisterAsync">
            <summary>
            Handles the asynchronous registration process for the current context.
            </summary>
            <returns>A task that represents the asynchronous registration operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalProvider.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalProvider.OnFirstAfterRenderAsync">
            <summary>
            Handles the initial post-render processing for an external authentication provider, updating the UI and
            navigation state based on the outcome of the external provider event.
            </summary>
            <remarks>This method should be called after the component's first render to process the result of an
            external authentication attempt. Depending on the outcome, it may navigate to a return URL, update the view to
            prompt for registration, or display account lockout information.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ExternalProviderPicker">
            <summary>
            Represents a Blazor component that displays and manages external authentication provider options for user sign-in or
            sign-up.
            </summary>
            <remarks>Use this component to present external login buttons (such as Google or Facebook) within a login or
            registration form. The component supports customization of provider icons, button text, and UI labels, and
            integrates with navigation and authentication services to initiate external authentication flows. It is typically
            used in scenarios where users can authenticate using third-party providers.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ExternalProviderPicker.s_culture">
            <summary>
            Provides a culture-independent, invariant culture for formatting and parsing operations.
            </summary>
            <remarks>Use this field when culture-specific formatting is not required, ensuring consistent results
            regardless of the user's locale.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ExternalProviderPicker._providers">
            <summary>
            Represents the collection of external authentication providers available for user sign-in.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ExternalProviderPicker._renderTextContent">
            <summary>
            Represents a render fragment that generates the text content for each external authentication provider button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderPicker.IconFromExternal">
            <summary>
            Gets or sets a delegate that retrieves an <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> instance for a given external icon name.
            </summary>
            <remarks>The delegate should accept a string representing the external icon name and return the
            corresponding <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/>. If no icon is found, the delegate may return <c>null</c>. This property allows
            customization of icon sourcing from external providers or resources.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderPicker.ShowText">
            <summary>
            Gets or sets a value indicating whether to display the text associated with each external authentication provider.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderPicker.Labels">
            <summary>
            Gets or sets the set of labels used for the login form UI elements.
            </summary>
            <remarks>Use this property to customize the text displayed for fields, buttons, and messages in the
            login form. If not set, default labels are used. This property is typically set via component parameters in
            Blazor applications.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderPicker.SignUp">
            <summary>
            Gets or sets a value indicating whether the component is being used for sign-in (false) or sign-up (true).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderPicker.OnExternalProviderSelected">
            <summary>
            Gets or sets the callback that is invoked when an external authentication provider is selected.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderPicker.ExternalProviderService">
            <summary>
            Gets or sets the service used to interact with external providers.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderPicker.State">
            <summary>
            Gets or sets the current login state for the user session.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalProviderPicker.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalProviderPicker.OnProviderSelectedAsync(System.String)">
            <summary>
            Navigates to the external login page for the specified authentication provider.
            </summary>
            <remarks>This method initiates a navigation to the external login flow, typically used to authenticate
            users via third-party providers such as Google or Facebook. The navigation is performed with a full page reload
            to ensure the external authentication process starts correctly.</remarks>
            <param name="provider">The name of the external authentication provider to use for login. Cannot be null or empty.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalProviderPicker.GetIconFrom(System.String)">
            <summary>
            Retrieves an icon associated with the specified provider name using an external icon provider, if available.
            </summary>
            <remarks>If no external icon provider is set or the provider does not supply an icon for the given
            name, the method returns <see langword="null"/>.</remarks>
            <param name="providerName">The name of the provider for which to retrieve the icon. Cannot be null.</param>
            <returns>An <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> instance representing the icon for the specified provider if found; otherwise, <see
            langword="null"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalProviderPicker.GetTextContent(System.String)">
            <summary>
            Generates the localized text content for a provider button based on the current sign-up or connect state.
            </summary>
            <remarks>The returned text varies depending on whether the control is in sign-up mode or connect mode.
            The format and language are determined by the current culture and resource labels.</remarks>
            <param name="providerName">The display name of the authentication provider to include in the generated text. Cannot be null.</param>
            <returns>A localized string containing the appropriate button text for the specified provider. Returns null if the
            provider name is null.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalProviderPicker.#ctor">
            <summary>
            Initializes a new instance of the ExternalProviderPicker class with a unique identifier.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxLogin">
            <summary>
            Represents a component that provides user login functionality with customizable labels and responsive layout
            options.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLogin._renderImagePanelFragment">
            <summary>
            Represents the render fragment for the image panel.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLogin._animation">
            <summary>
            Represents the animation settings for the component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLogin._isMobile">
            <summary>
            Value indicating whether the component is being viewed on a mobile device.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLogin._source">
            <summary>
            Represents the current source of the image being displayed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLogin._imageViews">
            <summary>
            Represents a collection of ImageView instances, each associated with a specific login view.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLogin._loginComponent">
            <summary>
            Reference to the internal login component instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.Labels">
            <summary>
            Gets or sets the labels used in the login component for various UI elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.PanelPosition">
            <summary>
            Gets or sets the position of the login panel within the component.
            </summary>
            <remarks>The default value is <see cref="F:FluentUI.Blazor.Community.Components.LoginPanelPosition.Right"/>. Set this property to control
            where the login panel appears, such as on the left or right side of the layout.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.Width">
            <summary>
            Gets or sets the width, in pixels, of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.Height">
            <summary>
            Gets or sets the height, in pixels, of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.QueryMobileWidth">
            <summary>
            Gets or sets the CSS media query width value that determines when the component should be considered in a mobile
            layout.
            </summary>
            <remarks>Set this property to specify the maximum viewport width (such as "600px" or "40em") at which
            the component switches to its mobile presentation. The value should be a valid CSS width expression.
            you must write the media query like "(max-width: 600px)".
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.LayoutOptions">
            <summary>
            Gets or sets the layout options for the login component, allowing customization of its appearance and behavior.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.LoginContent">
            <summary>
            Gets or sets the content to be rendered within the login component, allowing for customization of the login form
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.RegisterContent">
            <summary>
            Gets or sets the content to be rendered within the registration view of the component, allowing for customization.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.RegisterConfirmationContent">
            <summary>
            Gets or sets the content to display in the register confirmation area.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.EmailConfirmationContent">
            <summary>
            Gets or sets the content to display for email confirmation within the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.UseExternalProviders">
            <summary>
            Gets or sets a value indicating whether external authentication providers are enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.Source">
            <summary>
            Gets or sets the source identifier or URI for the image.
            </summary>
            <remarks>
            This property is only used when the component is in desktop mode (i.e., not on a mobile device).
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.AltText">
            <summary>
            Gets or sets the alternative text description for the image, enhancing accessibility.
            </summary>
            <remarks>
            This property is only used when the component is in desktop mode (i.e., not on a mobile device).
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.Title">
            <summary>
            Gets or sets the title for the image.
            </summary>
            <remarks>
            This property is only used when the component is in desktop mode (i.e., not on a mobile device).
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.OverlayContent">
            <summary>
            Gets or sets the content to be rendered in the overlay section of the component, allowing for additional
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.OnViewChanged">
            <summary>
            Gets or sets the callback that is invoked when the login view changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.ImageViews">
            <summary>
            Gets or sets the custom content to display as the image within the component.
            </summary>
            <remarks>Use this property to provide a custom image or image-related markup using a <see
            cref="T:Microsoft.AspNetCore.Components.RenderFragment"/>. If not set, no image content will be rendered.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.AccountDisabledContent">
            <summary>
            Gets or sets the content to display when the account is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.AccountLockedContent">
            <summary>
            Gets or sets the content to display when the account is locked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.ExternalProviderContent">
            <summary>
            Gets or sets the content to display for external authentication providers.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.ForgotPasswordConfirmationContent">
            <summary>
            Gets or sets the content to display in the forgot password confirmation area.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.ForgotPasswordContent">
            <summary>
            Gets or sets the content to display in the forgot password view.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.InvalidCredentialsContent">
            <summary>
            Gets or sets the content to display when invalid credentials are provided.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.ResetPasswordContent">
            <summary>
            Gets or sets the content to display in the reset password section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.ResetPasswordConfirmationContent">
            <summary>
            Gets or sets the content to display in the reset password confirmation view.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.InvalidPasswordResetContent">
            <summary>
            Gets or sets the content to display when an invalid password reset token is encountered.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.RecoveryCodeContent">
            <summary>
            Gets or sets the content to display in the recovery code section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.RequiredTwoFactorContent">
            <summary>
            Gets or sets the content to display in the two-factor authentication required section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.UnknownErrorContent">
            <summary>
            Gets or sets the content to display when an unknown error occurs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.UserNotConfirmedContent">
            <summary>
            Gets or sets the content to display when a user's account is not confirmed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.OnLogin">
            <summary>
            Gets or sets the callback that is invoked when a login event occurs.
            </summary>
            <remarks>Use this property to handle login events, such as when a user successfully signs in. The
            callback receives a <see cref="T:FluentUI.Blazor.Community.Components.LoginEventArgs"/> instance containing details about the login event.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.OnExternalProviderRegister">
            <summary>
            Gets or sets the callback that is invoked when a user attempts to register using an external authentication
            provider.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.OnExternalProviderProcessing">
            <summary>
            Gets or sets the callback that is invoked when external provider processing occurs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.OnRecoveryCode">
            <summary>
            Gets or sets the callback that is invoked when a recovery code event occurs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.OnSendInstructions">
            <summary>
            Gets or sets the callback that is invoked when instructions to send a password are triggered.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.OnResendEmail">
            <summary>
            Gets or sets the callback that is invoked when the user requests to resend a verification email.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.OnSignUp">
            <summary>
            Gets or sets the callback that is invoked when a registration event occurs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.OnResetPassword">
            <summary>
            Gets or sets the callback that is invoked when a reset password event occurs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.ShowExternalProviderText">
            <summary>
            Gets or sets a value indicating whether to display additional text for external authentication providers.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.OnLoggedIn">
            <summary>
            Gets or sets the callback that is invoked when the user has successfully logged in.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.ExternalIconProvider">
            <summary>
            Gets or sets a delegate that provides a custom icon for a given icon name.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.ViewRaw">
            <summary>
            Gets or sets the view model containing data and settings for the account manager UI.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.ReturnUrl">
            <summary>
            Gets or sets the return URL to redirect to after a successful login.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.RememberMe">
            <summary>
            Gets or sets a value indicating whether the user's login session should be persisted across browser restarts.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.IsMobile">
            <summary>
            Gets or sets a value indicating whether the component is being viewed on a mobile device.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.IsInternalMobile">
            <summary>
            Gets a value indicating whether the component is being viewed on a mobile device,
             considering both internal and external indicators.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.State">
            <summary>
            Gets or sets the current login state for the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLogin.View">
            <summary>
            Gets the current view state of the account manager, reflecting the login component's view if available.
            </summary>
            <remarks>If the login component is not initialized, the property returns the default login view. This
            property is intended for internal use and may change as the account manager's state evolves.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLogin.SetViewAsync(FluentUI.Blazor.Community.Components.AccountManagerView)">
            <summary>
            Sets the current login view to the specified view.
            </summary>
            <param name="view">The login view to display. Cannot be null.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLogin.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLogin.Add(FluentUI.Blazor.Community.Components.ImageView)">
            <summary>
            Adds the specified ImageView to the collection, associating it with its corresponding view.
            </summary>
            <param name="imageView">The ImageView instance to add. Must not reference a view that is already associated with another ImageView in
            the collection.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if an ImageView for the specified view has already been added.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLogin.Remove(FluentUI.Blazor.Community.Components.ImageView)">
            <summary>
            Removes the specified image view from the collection.
            </summary>
            <param name="imageView">The image view to remove from the collection. Cannot be null.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLogin.UpdateSourceAsync(FluentUI.Blazor.Community.Components.AccountManagerView)">
            <summary>
            Updates the image source with the current state of the specified login view.
            </summary>
            <param name="view">The login view whose state is used to update the data source. Cannot be null.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLogin.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLogin.RestartAsync">
            <summary>
            Asynchronously restarts the animation if one is currently associated with the instance.
            </summary>
            <returns>A task that represents the asynchronous restart operation. The task completes when the animation has been
            restarted.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ForgotPassword">
            <summary>
            Represents a view component that provides the user interface and logic for the 'Forgot Password' workflow in a login
            form.
            </summary>
            <remarks>Use this component to display and manage the password recovery process within an authentication UI.
            The component exposes parameters to customize labels and handle login or sign-up actions. It is typically used as
            part of a larger authentication or account management system.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ForgotPassword._model">
            <summary>
            Represents the data model for the forgot password form, including the email address field.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ForgotPassword._fluentEditForm">
            <summary>
            Represents the FluentEditForm instance used for form validation and submission.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ForgotPassword._errorMessage">
            <summary>
            Represents an error message to be displayed in the forgot password view.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ForgotPassword._isProcessing">
            <summary>
            Represents whether the component is currently processing an operation, such as sending instructions.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ForgotPassword.OnSendInstructions">
            <summary>
            Gets or sets the callback that is invoked when instructions to send a password are triggered.
            </summary>
            <remarks>Use this event to handle custom logic when password sending instructions need to be
            processed, such as sending an email or displaying a notification. The event provides details about the send
            operation through the <see cref="T:FluentUI.Blazor.Community.Components.SendPasswordEventArgs"/> parameter.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ForgotPassword.OnInstructionsSent">
            <summary>
            Gets or sets the callback that is invoked when instructions have been sent.
            </summary>
            <remarks>Use this event to execute custom logic after the instructions are successfully sent. The
            callback is triggered in response to the relevant user action or process completion.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ForgotPassword.AriaDisabled">
            <summary>
            Gets the value for the 'aria-disabled' attribute based on the current processing state.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ForgotPassword.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> component in the cascading parameter hierarchy.
            </summary>
            <remarks>This property is set automatically by the Blazor framework when the component is used within
            a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> context. It should not be set manually.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ForgotPassword.IsDisabled">
            <summary>
            Gets a value indicating whether the current operation is disabled due to ongoing processing or validation
            errors.
            </summary>
            <remarks>The property returns <see langword="true"/> if either a process is currently active or if
            there are validation messages present in the associated edit form. This can be used to control UI elements such
            as disabling buttons or inputs when user interaction should be prevented.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ForgotPassword.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ForgotPassword.OnLoginAsync">
            <summary>
            Invokes the login event asynchronously if it is not already being processed.
            </summary>
            <remarks>If a login operation is already in progress, this method returns immediately without invoking
            the login event.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ForgotPassword.OnSignUpAsync">
            <summary>
            Handles the sign-up action asynchronously by invoking the associated sign-up event if it is assigned.
            </summary>
            <remarks>If a sign-up operation is already in progress, this method returns immediately without
            invoking the event. This method should be awaited to ensure that the sign-up process completes before
            proceeding.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ForgotPassword.OnSendInstructionsAsync">
            <summary>
            Handles the process of sending password reset instructions asynchronously based on the current model state and
            event handlers.
            </summary>
            <remarks>This method checks for the presence of required event handlers and a valid email address
            before attempting to send instructions. Depending on the outcome, it invokes additional event handlers to signal
            success or specific failure reasons. This method is typically used within a component to coordinate password
            reset workflows.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ForgotPasswordConfirmation">
            <summary>
            Represents the confirmation component displayed after a user initiates a password reset request.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ForgotPasswordConfirmation.Parent">
            <summary>
            Gets or sets the parent login component that contains this confirmation component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ForgotPasswordConfirmation.OnResendEmail">
            <summary>
            Gets or sets the callback that is invoked when the resend email action is triggered.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ForgotPasswordConfirmation.Email">
            <summary>
            Gets or sets the email address associated with the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ForgotPasswordConfirmation.OnResendEmailAsync">
            <summary>
            Invokes the resend email callback asynchronously if a valid email address is available.
            </summary>
            <remarks>The callback is only invoked if the email address is not null, empty, or whitespace, and if a
            delegate is assigned to handle the resend email action.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ForgotPasswordConfirmation.OnLoginAsync">
            <summary>
            Handles the login action by updating the parent view to display the login interface asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ImageView">
            <summary>
            Represents a component that displays an image within a login view.
            </summary>
            <remarks>Use this component to render an image as part of a login interface. The image source and the specific
            login view can be configured through parameters. This component is typically used as a child of a <see
            cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> component.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ImageView.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> component in the cascading parameter hierarchy.
            </summary>
            <remarks>This property is typically set automatically by the Blazor framework when the component is
            used within a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> parent. It enables child components to access shared state or
            functionality provided by the parent component.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ImageView.View">
            <summary>
            Gets or sets the view mode for the account manager component.
            </summary>
            <remarks>Use this property to specify which view should be displayed in the account manager. Changing
            the value updates the UI to reflect the selected view.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ImageView.Source">
            <summary>
            Gets or sets the source identifier or URI for the component's data or content.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ImageView.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ImageView.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LoginBaseComponent">
            <summary>
            Provides a base component for rendering customizable login, registration, and password recovery views with support
            for external authentication providers and configurable UI elements.
            </summary>
            <remarks>Use this component as a foundation for building authentication interfaces in Blazor applications. The
            component exposes parameters for customizing content, labels, icons, and layout, enabling integration with various
            authentication scenarios. Thread safety is not guaranteed; use this component within the standard Blazor component
            lifecycle.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginBaseComponent._accountViewFragments">
            <summary>
            Represents a collection of RenderFragment instances, each associated with a specific account manager view.
            </summary>
            <remarks>
            Use a dictionary when an enumeration has more than 10 values is more efficient than a switch statement.
            </remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginBaseComponent._email">
            <summary>
            Represents the email address associated with the user, used for operations like password recovery.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.LoginContent">
            <summary>
            Gets or sets the content to be rendered within the login component, allowing for customization of the login form
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.RegisterContent">
            <summary>
            Gets or sets the content to be rendered within the registration view of the component, allowing for customization.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.ForgotPasswordContent">
            <summary>
            Gets or sets the content to be rendered within the forgot password view of the component, allowing for customization.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.AccountDisabledContent">
            <summary>
            Gets or sets the content to display when the account is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.AccountLockedContent">
            <summary>
            Gets or sets the content to display when the user's account is locked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.InvalidCredentialsContent">
            <summary>
            Gets or sets the content to display when user credentials are invalid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.UnknownErrorContent">
            <summary>
            Gets or sets the content to display when an unknown error occurs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.UserNotConfirmedContent">
            <summary>
            Gets or sets the content to display when the user has not confirmed their account.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.ForgotPasswordConfirmationContent">
            <summary>
            Gets or sets the content to display in the forgot password confirmation view.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.ResetPasswordContent">
            <summary>
            Gets or sets the custom content to display in the reset password section of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.InvalidPasswordResetContent">
            <summary>
            Gets or sets the content to display when a password reset attempt is invalid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.RequiredTwoFactorContent">
            <summary>
            Gets or sets the content to display when two-factor authentication is required.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.RecoveryCodeContent">
            <summary>
            Gets or sets the custom content to display for the recovery code section of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.ResetPasswordConfirmationContent">
            <summary>
            Gets or sets the content to display in the reset password confirmation view.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.EmailConfirmationContent">
            <summary>
            Gets or sets the content to display for email confirmation within the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.RegisterConfirmationContent">
            <summary>
            Gets or sets the content to display in the register confirmation area.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.OnExternalProviderProcessing">
            <summary>
            Gets or sets the callback that is invoked when external provider processing occurs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.OnExternalProviderRegister">
            <summary>
            Gets or sets the callback that is invoked when an external provider registration event occurs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.OnResetPassword">
            <summary>
            Gets or sets the callback that is invoked when a password reset is requested.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.UseExternalProviders">
            <summary>
            Gets or sets a value indicating whether external authentication providers are enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.View">
            <summary>
            Gets or sets the view model representing the current login view state.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.Width">
            <summary>
            Gets or sets the CSS width value to apply to the component.
            </summary>
            <remarks>Specify a valid CSS width value, such as "100px", "50%", or "auto". If not set, the component
            uses its default width.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.Labels">
            <summary>
            Gets or sets the labels used in the login component for various UI elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.ExternalIconProvider">
            <summary>
            Gets or sets a delegate that provides an icon for a given icon name from an external source.
            </summary>
            <remarks>If set, this delegate is called with the icon name to retrieve a custom icon. If not set, the
            default icon provider is used. Use this property to supply icons that are not included in the built-in set or to
            override existing icons.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.OnLogin">
            <summary>
            Gets or sets the callback that is invoked when a login action is requested.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.OnSignUp">
            <summary>
            Gets or sets the callback that is invoked when a user completes the sign-up process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.OnLoggedIn">
            <summary>
            Gets or sets the callback that is invoked when the user has successfully logged in.
            </summary>
            <remarks>Use this callback to perform additional actions after a successful login, such as redirecting
            the user or updating application state.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.ShowExternalProviderText">
            <summary>
            Gets or sets a value indicating whether to display additional text for external authentication providers.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.OnSendInstructions">
            <summary>
            Gets or sets the callback that is invoked when a new password is required.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.OnViewChanged">
            <summary>
            Gets or sets the callback that is invoked when the login view changes.
            </summary>
            <remarks>Use this property to handle changes in the current login view, such as switching between
            sign-in and registration forms. The callback receives the new <see cref="T:FluentUI.Blazor.Community.Components.LoginView"/> value as its
            argument.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.OnResendEmail">
            <summary>
            Gets or sets the callback that is invoked when the user requests to resend a verification email.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.OnRecoveryCode">
            <summary>
            Gets or sets the callback that is invoked when a recovery code is submitted.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginBaseComponent.ExternalProviderContent">
            <summary>
            Gets or sets the custom content to display for an external authentication provider.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LoginBaseComponent.OnInstructionsSentAsync(System.String)">
            <summary>
            Handles the completion of sending password reset instructions and updates the view accordingly.
            </summary>
            <param name="email">The email address to which the password reset instructions were sent. Cannot be null or empty.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LoginBaseComponent.SetViewAsync(FluentUI.Blazor.Community.Components.AccountManagerView)">
            <summary>
            Sets the current login view to the specified view and updates the component state.
            </summary>
            <param name="view">The login view to display. Cannot be null.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LoginCardContainer">
            <summary>
            Represents a container component for displaying a login card with customizable title, icon, body, and footer
            content.
            </summary>
            <remarks>Use this component to structure authentication or login-related UI with flexible content areas. The
            title, icon, and content sections can be customized using parameters or templates to fit various authentication
            scenarios.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginCardContainer.Title">
            <summary>
            Gets or sets the title text to be displayed in the login card container.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginCardContainer.TitleIcon">
            <summary>
            Gets or sets the icon displayed alongside the title.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginCardContainer.TitleTemplate">
            <summary>
            Gets or sets a custom template for rendering the title section of the login card container.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginCardContainer.Body">
            <summary>
            Gets or sets the body content to be rendered within the login card container.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginCardContainer.Footer">
            <summary>
            Gets or sets the content to render in the footer section of the component.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LoginLayoutOptions">
            <summary>
            Represents configuration options for the layout and animation of a login interface transition.
            </summary>
            <remarks>Use this record to specify visual transition parameters, such as opacity range, animation duration,
            and slide direction, when customizing the appearance of a login screen. All properties are immutable and should be
            set during initialization.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginLayoutOptions.StartOpacity">
            <summary>
            Gets the initial opacity value to apply at the start of an animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginLayoutOptions.EndOpacity">
            <summary>
            Gets the target opacity value at the end of the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginLayoutOptions.AnimationDuration">
            <summary>
            Gets the duration of the animation transition.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginLayoutOptions.Direction">
            <summary>
            Gets the direction in which the slide animation is performed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginLayoutOptions.EasingFunction">
            <summary>
            Gets the easing function used to control the animation's acceleration and deceleration.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginLayoutOptions.EasingMode">
            <summary>
            Gets the easing mode that determines how the interpolation is applied at the start and end of the animation.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.InvalidCredentials">
            <summary>
            Represents an invalid credentials component that is displayed when a user attempts to log in with incorrect credentials.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.InvalidCredentials.Parent">
            <summary>
            Gets or sets the callback for when the user clicks the login button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.InvalidCredentials.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LoginView">
            <summary>
            Represents a login form component that supports customizable labels, external authentication providers, and optional
            icon customization.
            </summary>
            <remarks>Use this component to present a user login interface with support for both standard and external
            authentication methods. The component allows customization of form labels and icons, enabling localization and
            branding. Set the relevant parameters to configure the appearance and behavior of the login form according to your
            application's requirements.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginView._isLoading">
            <summary>
            Represents a value indicating whether the login process is currently in progress.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginView._fluentEditForm">
            <summary>
            References the internal <see cref="T:Microsoft.FluentUI.AspNetCore.Components.FluentEditForm"/> used for handling user input and validation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginView.Parent">
            <summary>
            Gets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> component in the component hierarchy.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginView.UseExternalProviders">
            <summary>
            Gets or sets a value indicating whether external authentication providers are enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginView.ExternalIconProvider">
            <summary>
            Gets or sets a delegate that provides a custom icon for a given icon name.
            </summary>
            <remarks>If set, this delegate is invoked to retrieve an icon when a custom icon is required. The
            delegate receives the icon name as a parameter and should return an appropriate <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> instance, or
            <see langword="null"/> if no icon is available for the specified name.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginView.ShowExternalProviderText">
            <summary>
            Gets or sets a value indicating whether to display text for external authentication providers.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginView.OnLogin">
            <summary>
            Gets or sets the callback that is invoked when a login event occurs.
            </summary>
            <remarks>Use this property to handle login events, such as when a user successfully signs in. The
            callback receives a <see cref="T:FluentUI.Blazor.Community.Components.LoginEventArgs"/> instance containing details about the login event.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginView.OnLoggedIn">
            <summary>
            Gets or sets the callback that is invoked when the user has successfully logged in.
            </summary>
            <remarks>Use this callback to perform additional actions after a successful login, such as redirecting
            the user or updating application state.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginView.Model">
            <summary>
            Gets the current login model containing user input and authentication state for the login process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginView.IsDisabled">
            <summary>
            Gets a value indicating whether the form is currently disabled due to loading or validation errors.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LoginView.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LoginView.OnForgotPasswordAsync">
            <summary>
            Handles the forgot password action by updating the parent view asynchronously.
            </summary>
            <remarks>This method changes the parent view to the forgot password screen if a parent is available.
            It should be awaited to ensure the view transition completes before proceeding.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LoginView.OnSignUpAsync">
            <summary>
            Initiates the sign-up process by updating the parent view to the registration screen asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LoginView.OnLoginAsync">
            <summary>
            Handles the login process asynchronously, raising the appropriate events based on the login outcome.
            </summary>
            <remarks>This method triggers the login event with the current user credentials and raises either the
            successful or failed login event depending on the result. It is typically called in response to a user action,
            such as submitting a login form.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LoginView.OnExternalProviderSelectedAsync">
            <summary>
            Transitions the parent view to display the external provider selection interface asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.RecoveryCode">
            <summary>
            Represents a component that handles user recovery code input with customizable labels.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RecoveryCode._model">
            <summary>
            Represents the model for recovery code input.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RecoveryCode._fluentEditForm">
            <summary>
            Represents the FluentEditForm instance for handling form submissions and validations.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RecoveryCode._errorMessage">
            <summary>
            Represents the error message to be displayed for invalid input.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RecoveryCode.OnRecoveryCode">
            <summary>
            Gets or sets the event callback that is invoked when a recovery code is submitted.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RecoveryCode.State">
            <summary>
            Gets or sets the current login state for the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RecoveryCode.NavigationManager">
            <summary>
            Gets or sets the navigation manager for handling URL navigation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RecoveryCode.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RecoveryCode.IsDisabled">
            <summary>
            Gets a value indicating whether the form is currently disabled due to validation errors.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RecoveryCode.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RecoveryCode.OnValidSubmitAsync">
            <summary>
            Handles the submission of a valid recovery code form asynchronously, triggering recovery code processing and
            navigation based on the result.
            </summary>
            <remarks>If the recovery code is successfully processed, the user is navigated to the return URL or
            the home page. If the recovery code fails due to being locked out or invalid, appropriate events or error
            messages are triggered. This method should be called after form validation has succeeded.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.RequiredTwoFactor">
            <summary>
            Represents a component that handles required two-factor authentication during the login process.
            </summary>
            <remarks>This class provides parameters for configuring two-factor authentication, including the return URL
            after successful login, whether to remember the user, custom labels for UI elements, and a callback for login
            events. It is typically used within authentication workflows to enforce two-factor verification before granting
            access.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RequiredTwoFactor._model">
            <summary>
            Represents the model for two-factor authentication.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RequiredTwoFactor._errorMessage">
            <summary>
            Represents an optional message to be displayed to the user, such as error messages or informational prompts.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RequiredTwoFactor.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> component in the component hierarchy.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RequiredTwoFactor.OnTwoFactorLogin">
            <summary>
            Gets or sets the callback that is invoked when a two-factor authentication login event occurs.
            </summary>
            <remarks>Use this property to handle two-factor authentication events, such as when a user submits a
            verification code. The event provides details about the two-factor login attempt through the <see
            cref="T:FluentUI.Blazor.Community.Components.TwoFactorEventArgs"/> parameter.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RequiredTwoFactor.State">
            <summary>
            Gets or sets the current login state for the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RequiredTwoFactor.NavigationManager">
            <summary>
            Gets or sets the NavigationManager used for managing URI navigation and location state within the application.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RequiredTwoFactor.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RequiredTwoFactor.OnLoginWithRecoveryCodeAsync">
            <summary>
            Invokes the login process using a recovery code asynchronously if a handler is assigned.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AccountManagerView">
            <summary>
            Specifies the available views for user authentication, such as login or registration forms.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.Login">
            <summary>
            Represents the login view, typically used for user authentication.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.Register">
            <summary>
            Represents the registration view, typically used for new user sign-up.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.ForgotPassword">
            <summary>
            Represents the forgot password view, typically used for password recovery.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.ForgotPasswordConfirmation">
            <summary>
            Represents the forgot password confirmation view, typically used to confirm that a password reset.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.InvalidCredentials">
            <summary>
            Indicates that authentication failed due to invalid credentials.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.UserNotConfirmed">
            <summary>
            Indicates that the user has not completed the required confirmation process.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.AccountLocked">
            <summary>
            Indicates whether the account is currently locked.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.AccountDisabled">
            <summary>
            Indicates that the account is disabled and cannot be used for authentication or access.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.UnknownError">
            <summary>
            Represents an error condition that does not match any known or specific error type.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.RequiredTwoFactor">
            <summary>
            Gets or sets a value indicating whether two-factor authentication is required for the user.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.ResetPassword">
            <summary>
            Represents the reset password view, typically used for resetting a user's password.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.InvalidPasswordReset">
            <summary>
            Represents the invalid password reset view, typically used when a password reset attempt fails.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.ResetPasswordConfirmation">
            <summary>
            Represents the reset password confirmation view, typically used to confirm that a password has been successfully reset.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.RecoveryCode">
            <summary>
            Represents the recovery code view, typically used for account recovery via a recovery code.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.ExternalProvider">
            <summary>
            Represents the external provider view, typically used for third-party authentication.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.RegisterConfirmation">
            <summary>
            Represents the register confirmation view, typically used to confirm successful user registration.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccountManagerView.EmailConfirmation">
            <summary>
            Represents the email confirmation view, typically used for confirming a user's email address.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AccountState">
            <summary>
            Represents the current state of a user login operation within the authentication workflow.
            </summary>
            <remarks>This type is intended for internal use and is not accessible outside of the containing assembly. It
            encapsulates information related to the progress or result of a login process.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountState.ReturnUrl">
            <summary>
            Gets or sets the URL to which the user is redirected after completing an operation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountState.RememberMe">
            <summary>
            Gets or sets a value indicating whether the user's login credentials should be remembered for future sessions.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccountState.Provider">
            <summary>
            Gets or sets the name of the provider associated with this instance.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ConfirmEmailEventArgs">
            <summary>
            Represents the data associated with a confirm email event, including the user identifier and confirmation code.
            </summary>
            <param name="UserId">The unique identifier of the user whose email is being confirmed. Cannot be null or empty.</param>
            <param name="Code">The confirmation code sent to the user for email verification. Cannot be null or empty.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ConfirmEmailEventArgs.#ctor(System.String,System.String)">
            <summary>
            Represents the data associated with a confirm email event, including the user identifier and confirmation code.
            </summary>
            <param name="UserId">The unique identifier of the user whose email is being confirmed. Cannot be null or empty.</param>
            <param name="Code">The confirmation code sent to the user for email verification. Cannot be null or empty.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ConfirmEmailEventArgs.UserId">
            <summary>The unique identifier of the user whose email is being confirmed. Cannot be null or empty.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ConfirmEmailEventArgs.Code">
            <summary>The confirmation code sent to the user for email verification. Cannot be null or empty.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ConfirmEmailEventArgs.IsSuccessful">
            <summary>
            Gets or sets a value indicating whether the operation completed successfully.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ExternalAuthenticationProvider">
            <summary>
            Represents an external authentication provider with its unique name and display name.
            </summary>
            <param name="Name">The unique identifier for the external authentication provider. Cannot be null or empty.</param>
            <param name="DisplayName">The user-friendly name to display for the external authentication provider. Cannot be null or empty.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalAuthenticationProvider.#ctor(System.String,System.String)">
            <summary>
            Represents an external authentication provider with its unique name and display name.
            </summary>
            <param name="Name">The unique identifier for the external authentication provider. Cannot be null or empty.</param>
            <param name="DisplayName">The user-friendly name to display for the external authentication provider. Cannot be null or empty.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalAuthenticationProvider.Name">
            <summary>The unique identifier for the external authentication provider. Cannot be null or empty.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalAuthenticationProvider.DisplayName">
            <summary>The user-friendly name to display for the external authentication provider. Cannot be null or empty.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ExternalProviderModel">
            <summary>
            Represents a model for external authentication providers.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderModel.Email">
            <summary>
            Gets or sets the email address associated with the user.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ExternalProviderProcessingEventArgs">
            <summary>
            Provides data for events related to authentication or interaction with an external identity provider.
            </summary>
            <remarks>This event argument type contains information about the outcome of an external provider operation,
            such as sign-in or account linking. It includes the user's email address, the result status, and a reason for
            failure if applicable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderProcessingEventArgs.Email">
            <summary>
            Gets or sets the email address associated with the external provider operation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderProcessingEventArgs.IsSuccessful">
            <summary>
            Gets a value indicating whether the operation completed successfully without any failure reason.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderProcessingEventArgs.FailReason">
            <summary>
            Gets or sets the reason for failure reported by the external provider.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ExternalProviderProcessingFailReason">
            <summary>
            Specifies the reason for a failure when attempting to authenticate with an external identity provider.
            </summary>
            <remarks>Use this enumeration to determine the cause of an unsuccessful authentication attempt with an
            external provider, such as OAuth or OpenID Connect. The value can be used to inform the user or to implement custom
            handling logic based on the specific failure reason.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ExternalProviderProcessingFailReason.None">
            <summary>
            Indicates that there was no failure and the operation was successful.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ExternalProviderProcessingFailReason.LoginInfoUnavailable">
            <summary>
            Indicates that login information is not available.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ExternalProviderProcessingFailReason.LockedOut">
            <summary>
            Indicates whether the user account is currently locked out.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ExternalProviderProcessingFailReason.AskForRegister">
            <summary>
            Indicates that the user needs to register an account.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ExternalProviderRegisterEventArgs">
            <summary>
            Provides data for an event that occurs when a user registers using an external authentication provider.
            </summary>
            <param name="Email">The email address associated with the user registering through the external provider.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExternalProviderRegisterEventArgs.#ctor(System.String)">
            <summary>
            Provides data for an event that occurs when a user registers using an external authentication provider.
            </summary>
            <param name="Email">The email address associated with the user registering through the external provider.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderRegisterEventArgs.Email">
            <summary>The email address associated with the user registering through the external provider.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderRegisterEventArgs.IsSuccessful">
            <summary>
            Gets a value indicating whether the registration operation was successful.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderRegisterEventArgs.RequireConfirmedAccount">
            <summary>
            Gets or sets a value indicating whether the user must confirm their account (e.g., via email verification)
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ExternalProviderRegisterEventArgs.Errors">
            <summary>
            Gets the list of error messages associated with the current operation or object.
            </summary>
            <remarks>The list is read-only and will be empty if no errors have occurred. Each entry represents a
            distinct error message relevant to the context in which this property is used.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ForgotPasswordModel">
            <summary>
            Represents the data required to initiate a password reset request.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ForgotPasswordModel.Email">
            <summary>
            Gets or sets the email address associated with the user.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IExternalProviderService">
            <summary>
            Provides authentication-related services using the specified authentication scheme provider.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IExternalProviderService.GetExternalProvidersAsync">
            <summary>
            Asynchronously retrieves a collection of available external authentication providers.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of <see
            cref="T:FluentUI.Blazor.Community.Components.ExternalProvider"/> objects representing the available external authentication providers. The collection
            will be empty if no providers are available.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LoginEventArgs">
            <summary>
            Provides data for login events, including user credentials and login options.
            </summary>
            <param name="Email">The username entered by the user.</param>
            <param name="Password">The password entered by the user.</param>
            <param name="RememberMe">A value indicating whether the user has requested to be remembered on future logins.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LoginEventArgs.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Provides data for login events, including user credentials and login options.
            </summary>
            <param name="Email">The username entered by the user.</param>
            <param name="Password">The password entered by the user.</param>
            <param name="RememberMe">A value indicating whether the user has requested to be remembered on future logins.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginEventArgs.Email">
            <summary>The username entered by the user.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginEventArgs.Password">
            <summary>The password entered by the user.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginEventArgs.RememberMe">
            <summary>A value indicating whether the user has requested to be remembered on future logins.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginEventArgs.IsSuccessful">
            <summary>
            Gets a value indicating whether the operation completed successfully.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginEventArgs.FailReason">
            <summary>
            Gets or sets the reason for a failed login attempt.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LoginFailReason">
            <summary>
            Specifies the reason for a failed login attempt.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginFailReason.None">
            <summary>
            Indicates that the login attempt was successful and there was no failure.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginFailReason.InvalidCredentials">
            <summary>
            Indicates that the login attempt failed due to invalid credentials.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginFailReason.AccountLocked">
            <summary>
            Indicates that the login attempt failed because the user account is locked.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginFailReason.AccountDisabled">
            <summary>
            Indicates that the login attempt failed because the user account is disabled.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginFailReason.RequiredTwoFactor">
            <summary>
            Indicates that the login attempt failed because two-factor authentication is required.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginFailReason.UnknownError">
            <summary>
            Indicates that the login attempt failed due to an unknown error.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginFailReason.UserNotConfirmed">
            <summary>
            Indicates that the user has not completed the required confirmation process.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LoginModel">
            <summary>
            Represents the data model for user login, including email, password, and remember-me option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginModel.Email">
            <summary>
            Gets or sets the email associated with the account.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginModel.Password">
            <summary>
            Gets or sets the password associated with the user or account.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginModel.RememberMe">
            <summary>
            Gets or sets a value indicating whether the user's login credentials should be remembered for future sessions.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginModel.IsValid">
            <summary>
            Gets a value indicating whether both the email and password fields contain non-empty, non-whitespace values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LoginPanelPosition">
            <summary>
            Specifies the horizontal position of the login panel within a user interface.
            </summary>
            <remarks>Use this enumeration to control whether the login panel appears on the left or right side of the
            container. The position may affect layout and user experience depending on the application's design.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginPanelPosition.Left">
            <summary>
            Indicates that the login panel should be positioned on the left side of the image container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoginPanelPosition.Right">
            <summary>
            Indicates that the login panel should be positioned on the right side of the image container.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.RecoveryCodeEventArgs">
            <summary>
            Provides data for events related to recovery operations, including the recovery code and the reason for any failure.
            </summary>
            <param name="RecoveryCode">The recovery code associated with the recovery operation. This value uniquely identifies the recovery attempt and
            may be used for validation or auditing purposes.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RecoveryCodeEventArgs.#ctor(System.String)">
            <summary>
            Provides data for events related to recovery operations, including the recovery code and the reason for any failure.
            </summary>
            <param name="RecoveryCode">The recovery code associated with the recovery operation. This value uniquely identifies the recovery attempt and
            may be used for validation or auditing purposes.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RecoveryCodeEventArgs.RecoveryCode">
            <summary>The recovery code associated with the recovery operation. This value uniquely identifies the recovery attempt and
            may be used for validation or auditing purposes.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RecoveryCodeEventArgs.FailReason">
            <summary>
            Gets or sets the reason for a recovery operation failure.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RecoveryCodeEventArgs.IsSuccessful">
            <summary>
            Gets a value indicating whether the recovery operation completed successfully.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.RecoveryCodeModel">
            <summary>
            Represents a recovery code used for account recovery or multi-factor authentication processes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RecoveryCodeModel.RecoveryCode">
            <summary>
            Gets or sets the recovery code used to restore access to an account in case of lost credentials.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.RecoveryFailReason">
            <summary>
            Specifies the reason for a recovery operation failure.
            </summary>
            <remarks>Use this enumeration to determine the specific cause when a recovery process does not succeed. The
            values indicate whether the failure was due to a lockout, an invalid recovery code, or if no failure
            occurred.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RecoveryFailReason.None">
            <summary>
            Indicates that there was no failure in the recovery operation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RecoveryFailReason.LockedOut">
            <summary>
            Indicates that the recovery operation failed due to the user being locked out.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RecoveryFailReason.InvalidCode">
            <summary>
            Indicates that the recovery operation failed due to an invalid recovery code being provided.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.RegisterEventArgs">
            <summary>
            Provides data for a user registration event, including user credentials and the result of the registration attempt.
            </summary>
            <param name="DisplayName">The display name provided during registration.</param>
            <param name="Email">The email address provided during registration.</param>
            <param name="Password">The password entered by the user during registration.</param>
            <param name="ConfirmPassword">The confirmation of the password entered by the user.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RegisterEventArgs.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Provides data for a user registration event, including user credentials and the result of the registration attempt.
            </summary>
            <param name="DisplayName">The display name provided during registration.</param>
            <param name="Email">The email address provided during registration.</param>
            <param name="Password">The password entered by the user during registration.</param>
            <param name="ConfirmPassword">The confirmation of the password entered by the user.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterEventArgs.DisplayName">
            <summary>The display name provided during registration.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterEventArgs.Email">
            <summary>The email address provided during registration.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterEventArgs.Password">
            <summary>The password entered by the user during registration.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterEventArgs.ConfirmPassword">
            <summary>The confirmation of the password entered by the user.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterEventArgs.IsSuccessful">
            <summary>
            Gets a value indicating whether the registration operation was successful.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterEventArgs.FailReason">
            <summary>
            Gets or sets the reason for a registration failure.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.RegisterFailReason">
            <summary>
            Specifies the possible reasons for a registration operation failure.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RegisterFailReason.None">
            <summary>
            Indicates that the registration operation was successful and no failure occurred.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RegisterFailReason.EmailAlreadyInUse">
            <summary>
            Indicates that the provided email address is already associated with an existing account.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RegisterFailReason.DisplayNameAlreadyInUse">
            <summary>
            Indicates that the provided displayname is already taken by another user.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.RegisterModel">
            <summary>
            Represents the data required to register a new user, including display name, email address, and password
            information.
            </summary>
            <remarks>This record is typically used as a data transfer object for user registration scenarios, such as
            account creation forms or API endpoints. All properties are required and should be populated with valid, non-empty
            values to ensure successful registration. The password and confirmation password must match to validate the
            registration request.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterModel.DisplayName">
            <summary>
            Gets or sets the display name associated with the object.
            </summary>
            <remarks>This property is required and should be set to a non-empty value to ensure proper
            identification in user interfaces or logs.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterModel.Email">
            <summary>
            Gets or sets the email address associated with the user.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterModel.Password">
            <summary>
            Gets or sets the password used for authentication.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterModel.ConfirmPassword">
            <summary>
            Gets or sets the confirmation password entered by the user.
            </summary>
            <remarks>This property is typically used to verify that the user has correctly re-entered their
            password during registration or password change operations. The value should match the original password to
            ensure successful confirmation.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RegisterModel.IsValid">
            <summary>
            Determines whether the current object contains valid, non-empty values for all required fields and that the
            password fields match.
            </summary>
            <returns>true if all required fields are non-empty and the password matches the confirmation; otherwise, false.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResetPasswordEventArgs">
            <summary>
            Provides data for a reset password event, including the user's email address, reset code, and new password
            information.
            </summary>
            <param name="Email">The email address of the user requesting the password reset. Cannot be null or empty.</param>
            <param name="Code">The reset code sent to the user's email address. Cannot be null or empty.</param>
            <param name="Password">The new password specified by the user. Cannot be null or empty.</param>
            <param name="ConfirmPassword">The confirmation of the new password. Must match the value of the Password parameter.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ResetPasswordEventArgs.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Provides data for a reset password event, including the user's email address, reset code, and new password
            information.
            </summary>
            <param name="Email">The email address of the user requesting the password reset. Cannot be null or empty.</param>
            <param name="Code">The reset code sent to the user's email address. Cannot be null or empty.</param>
            <param name="Password">The new password specified by the user. Cannot be null or empty.</param>
            <param name="ConfirmPassword">The confirmation of the new password. Must match the value of the Password parameter.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPasswordEventArgs.Email">
            <summary>The email address of the user requesting the password reset. Cannot be null or empty.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPasswordEventArgs.Code">
            <summary>The reset code sent to the user's email address. Cannot be null or empty.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPasswordEventArgs.Password">
            <summary>The new password specified by the user. Cannot be null or empty.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPasswordEventArgs.ConfirmPassword">
            <summary>The confirmation of the new password. Must match the value of the Password parameter.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPasswordEventArgs.IsSuccessful">
            <summary>
            Gets a value indicating whether the password reset operation completed successfully.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPasswordEventArgs.Errors">
            <summary>
            Gets a list of error messages associated with the password reset operation.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResetPasswordModel">
            <summary>
            Represents the data required to reset a user's password, including the email address, new password, confirmation
            password, and reset code.
            </summary>
            <remarks>This model is typically used in password reset workflows to capture and validate user input when
            resetting a forgotten password. All properties are required for a successful password reset operation.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPasswordModel.Email">
            <summary>
            Gets or sets the email address associated with the user.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPasswordModel.Password">
            <summary>
            Gets or sets the password for the user account.
            </summary>
            <remarks>The password must be between 6 and 100 characters in length. This property is typically used
            for user registration or authentication scenarios. The value is not stored in plain text and should be handled
            securely to protect user credentials.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPasswordModel.ConfirmPassword">
            <summary>
            Gets or sets the confirmation password entered by the user.
            </summary>
            <remarks>This property is typically used to verify that the user has entered their intended password
            correctly by requiring the same value as the main password field. The value is compared to the Password property
            to ensure they match.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPasswordModel.Code">
            <summary>
            Gets or sets the code that uniquely identifies the entity.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SendPasswordEventArgs">
            <summary>
            Provides data for an event that requests a password to be sent to a specified email address.
            </summary>
            <param name="Email">The email address to which the password should be sent. Cannot be null or empty.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SendPasswordEventArgs.#ctor(System.String)">
            <summary>
            Provides data for an event that requests a password to be sent to a specified email address.
            </summary>
            <param name="Email">The email address to which the password should be sent. Cannot be null or empty.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SendPasswordEventArgs.Email">
            <summary>The email address to which the password should be sent. Cannot be null or empty.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SendPasswordEventArgs.Successful">
            <summary>
            Gets a value indicating whether the password send operation completed successfully.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SendPasswordEventArgs.FailReason">
            <summary>
            Gets the reason for a failed password send operation.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SendPasswordFailReason">
            <summary>
            Specifies the reason for a failure when attempting to send a password.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SendPasswordFailReason.None">
            <summary>
            Represents no failure; the operation was successful.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SendPasswordFailReason.EmailNotFound">
            <summary>
            Indicates that the specified email address was not found.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SendPasswordFailReason.NoServerResponse">
            <summary>
            Indicates that no response was received from the server.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TwoFactorEventArgs">
            <summary>
            Provides data for events related to two-factor authentication, including the authentication code, user preference
            for remembering the device, and the result of the authentication attempt.
            </summary>
            <param name="TwoFactoryCode">The two-factor authentication code provided by the user.</param>
            <param name="RememberMachine">A value indicating whether the user has chosen to be remembered on the device for future authentication attempts.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.TwoFactorEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Provides data for events related to two-factor authentication, including the authentication code, user preference
            for remembering the device, and the result of the authentication attempt.
            </summary>
            <param name="TwoFactoryCode">The two-factor authentication code provided by the user.</param>
            <param name="RememberMachine">A value indicating whether the user has chosen to be remembered on the device for future authentication attempts.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TwoFactorEventArgs.TwoFactoryCode">
            <summary>The two-factor authentication code provided by the user.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TwoFactorEventArgs.RememberMachine">
            <summary>A value indicating whether the user has chosen to be remembered on the device for future authentication attempts.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TwoFactorEventArgs.IsSuccessful">
            <summary>
            Gets a value indicating whether the operation completed successfully without any two-factor authentication
            failures.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TwoFactorEventArgs.FailReason">
            <summary>
            Gets the reason for the two-factor authentication failure.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TwoFactorFailReason">
            <summary>
            Specifies the reason for a two-factor authentication failure.
            </summary>
            <remarks>Use this enumeration to determine the specific cause when a two-factor authentication attempt does
            not succeed. This can help inform user feedback or trigger additional security measures.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.TwoFactorFailReason.None">
            <summary>
            Indicates that there is no specific reason for the failure.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.TwoFactorFailReason.InvalidCode">
            <summary>
            Indicates that the provided two-factor authentication code is invalid.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.TwoFactorFailReason.LockedOut">
            <summary>
            Indicates whether the account is currently locked out due to multiple failed sign-in attempts.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TwoFactorModel">
            <summary>
            Represents the data required for two-factor authentication, including the verification code and the option to
            remember the current device.
            </summary>
            <remarks>This model is typically used to capture user input during a two-factor authentication challenge, such
            as when signing in or confirming identity. The <see cref="P:FluentUI.Blazor.Community.Components.TwoFactorModel.TwoFactorCode"/> property should contain the code provided
            by the user, while <see cref="P:FluentUI.Blazor.Community.Components.TwoFactorModel.RememberMachine"/> indicates whether the device should be trusted for future
            authentication attempts.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TwoFactorModel.TwoFactorCode">
            <summary>
            Gets or sets the two-factor authentication code provided by the user.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TwoFactorModel.RememberMachine">
            <summary>
            Gets or sets a value indicating whether the current device should be remembered for future authentication
            attempts.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LoginOverlay">
            <summary>
            Represents an overlay component that displays a login interface within a Fluent UI application.
            </summary>
            <remarks>Use this component to present a modal login form or authentication prompt as part of a Fluent
            UI-based user interface. The overlay typically appears above other content and may block interaction until the user
            completes authentication.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlay.ChildContent">
            <summary>
            Gets or sets the content to be rendered inside the login overlay.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LoginOverlayDescription">
            <summary>
            Represents a container component for displaying a login overlay with configurable content and maximum width.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayDescription.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayDescription.Css">
            <summary>
            Gets the css classes to use.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayDescription.MaxWidth">
            <summary>
            Gets or sets the maximum width, in pixels, that the component can occupy.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayDescription.InternalStyle">
            <summary>
            Gets the computed CSS style string for the component, including any maximum width constraints.
            </summary>
            <remarks>This property is intended for internal use to generate the final style attribute value based
            on the component's configuration. It should not be accessed directly from outside the class.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LoginOverlayText">
            <summary>
            Represents a configurable text component for displaying descriptive content within a login overlay, allowing
            customization of text, color, font, and layout styles.
            </summary>
            <remarks>Use this component to present descriptive or explanatory text in a slideshow interface. The
            appearance of the text can be customized using standard CSS style values for color, font family, font size, font
            weight, letter spacing, line height, and margin. All style-related properties accept valid CSS values as strings. If
            a property is not set, a default value is applied as specified in each property's documentation.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayText.Text">
            <summary>
            Gets or sets the text to display in the description area of the slideshow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayText.Color">
            <summary>
            Gets or sets the CSS color value to apply to the component's content.
            </summary>
            <remarks>If not set, the default color is "white". Accepts any valid CSS color string, such as a named
            color (e.g., "red"), a hex code (e.g., "#FF0000"), or an RGB/RGBA value.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayText.FontFamily">
            <summary>
            Gets or sets the CSS font family to apply to the component's text.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayText.FontSize">
            <summary>
            Gets or sets the CSS font size to apply to the component's content.
            </summary>
            <remarks>The value should be a valid CSS font-size string, such as "16px", "1.5em", or "large". If not
            set, the default value is "24px".</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayText.FontWeight">
            <summary>
            Gets or sets the font weight to apply to the text content.
            </summary>
            <remarks>Accepts standard CSS font-weight values, such as numeric values (e.g., "400", "700") or
            keywords (e.g., "normal", "bold"). The default value is "400".</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayText.LetterSpacing">
            <summary>
            Gets or sets the CSS letter-spacing value to apply to the element's text content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayText.LineHeight">
            <summary>
            Gets or sets the line height value for the element.
            </summary>*
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayText.Margin">
            <summary>
            Gets or sets the margin value to apply, typically used to define spacing around an element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LoginOverlayText.InternalStyle">
            <summary>
            Gets the computed CSS style string based on the current style-related property values.
            </summary>
            <remarks>This property combines individual style settings, such as color, font, and spacing, into a
            single CSS style string. It is intended for internal use when rendering elements with dynamic styles.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.RegisterConfirmation">
            <summary>
            Represents the confirmation component displayed after a user registers an account.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterConfirmation.Parent">
            <summary>
            Gets or sets the callback for when the user clicks the login button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RegisterConfirmation.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.RegisterView">
            <summary>
            Represents a view component that renders the user registration interface, including options for external
            authentication providers.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RegisterView._isLoading">
            <summary>
            Represents a value indicating whether the registration process is currently in progress.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RegisterView._fluentEditForm">
            <summary>
            Represents the FluentEditForm component used for user input in the registration view.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RegisterView._model">
            <summary>
            Represents the model containing user registration data.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RegisterView._errorMessage">
            <summary>
            Represents an error message to be displayed in the registration view.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterView.UseExternalProviders">
            <summary>
            Gets or sets a value indicating whether external authentication providers are enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterView.ShowExternalProviderText">
            <summary>
            Gets or sets a value indicating whether to display text for external authentication providers.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterView.ExternalIconProvider">
            <summary>
            Gets or sets a delegate that provides a custom icon for a given icon name.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterView.OnSignUp">
            <summary>
            Gets or sets the callback that is invoked when a user completes the sign-up process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterView.IsDisabled">
            <summary>
            Gets a value indicating whether the current operation is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.RegisterView.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RegisterView.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RegisterView.OnSignUpAsync">
            <summary>
            Handles the user sign-up process asynchronously, raising relevant events based on the outcome.
            </summary>
            <remarks>This method triggers the sign-up event with the user's registration details. If registration
            succeeds, it raises a completion event; otherwise, it raises a failure event with the reason for failure. The
            method is typically called in response to a user action, such as submitting a registration form.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RegisterView.OnLoginAsync">
            <summary>
            Transitions the parent view to the login screen asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RegisterView.OnExternalProviderSelectedAsync">
            <summary>
            Transitions the parent view to display the external provider selection interface asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.InvalidPasswordReset">
            <summary>
            Represents the component displayed when a password reset attempt fails due to an invalid or expired reset code.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.InvalidPasswordReset.Parent">
            <summary>
            Gets or sets the callback for when the user clicks the login button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.InvalidPasswordReset.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResetPassword">
            <summary>
            Represents the reset password form component, providing functionality and customization options for resetting a
            user's password.
            </summary>
            <remarks>Use this component to present a password reset form in your application. The component supports
            customization of UI labels and handles the necessary data for password reset operations.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResetPassword._model">
            <summary>
            Represents the model for the reset password form.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResetPassword._errors">
            <summary>
            Represents the list of error messages to be displayed on the form.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResetPassword._isProcessing">
            <summary>
            Value indicating whether the form is currently being processed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPassword.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLogin"/> component in the component hierarchy.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPassword.OnResetPassword">
            <summary>
            Gets or sets the callback that is invoked when a reset password event occurs.
            </summary>
            <remarks>Use this property to handle reset password actions initiated by the user. The callback
            receives a <see cref="T:FluentUI.Blazor.Community.Components.ResetPasswordEventArgs"/> instance containing details about the reset request. Assign a
            delegate to perform custom logic, such as validating input or updating user credentials, when the event is
            triggered.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ResetPassword.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ResetPassword.OnResetPasswordAsync">
            <summary>
            Handles the asynchronous reset password operation, raising the appropriate events based on the outcome.
            </summary>
            <remarks>This method clears any existing errors, initiates the reset password process, and updates the
            processing state. It raises the reset password event and, depending on the result, either updates the error
            collection or signals a successful reset. This method is typically invoked in response to a user action, such as
            submitting a reset password form.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResetPasswordConfirmation">
            <summary>
            Represents the confirmation view displayed after a user successfully resets their password.
            </summary>
            <remarks>This component is typically used in authentication workflows to inform users that their password
            reset was successful. It can be customized via parameters to adjust labels and handle login actions. The component
            is intended for use within login or account management pages.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResetPasswordConfirmation.Parent">
            <summary>
            Gets or sets the callback for when the user clicks the login button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ResetPasswordConfirmation.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer">
            <summary>
            Represents a customizable player component for rendering and controlling animations.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer"/> component allows developers to render animations using a specified
            renderer and provides options to control playback behavior, such as looping, autoplay, and playback speed. The
            component also supports customizable dimensions and accepts a path to the animation file.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer._module">
            <summary>
            Represents a JavaScript module reference that can be used to invoke JavaScript functions.
            </summary>
            <remarks>This field holds a reference to a JavaScript module loaded via an interop mechanism, such as
            Blazor's JavaScript interop. The value is <see langword="null"/> if the module has not been initialized or has
            been disposed.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer._hasPropertyChanged">
            <summary>
            Indicates whether a property value has been modified.   
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer._dotNetRef">
            <summary>
            Represents a reference to a .NET object of type <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer"/>  that can be passed to
            JavaScript interop in Blazor.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer._controls">
            <summary>
            Represents the controls for the Lottie animation player.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer"/> class.
            </summary>
            <remarks>The constructor generates a unique identifier for the player by assigning a new value to the
            <see cref="P:Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase.Id"/> property.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Source">
            <summary>
            Gets or sets the source to be used for the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Loop">
            <summary>
            Gets or sets a value indicating whether the animation should loop.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Autoplay">
            <summary>
            Gets or sets a value indicating whether the animation should start playing automatically.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Speed">
            <summary>
            Gets or sets the speed of the animation playback. The default value is 1, which represents normal speed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Width">
            <summary>
            Gets or sets the width of the player. This can be specified in any valid CSS unit (e.g., "100px", "50%", "10rem").
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Height">
            <summary>
            Gets or sets the height of the player. This can be specified in any valid CSS unit (e.g., "100px", "50%", "10rem").
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Renderer">
            <summary>
            Gets or sets the renderer to be used for rendering the animation. The default value is <see cref="F:FluentUI.Blazor.Community.Components.LottieRenderer.Svg"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnComplete">
            <summary>
            Gets or sets a callback that is invoked when the animation completes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnLoop">
            <summary>
            Gets or sets a callback that is invoked when the animation loops.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnEnterFrame">
            <summary>
            Gets or sets a callback that is invoked when the animation enters a new frame.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Runtime">
            <summary>
            Gets or sets the JavaScript runtime instance used for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.InternalCss">
            <summary>
            Gets the computed CSS classes for the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.InternalStyle">
            <summary>
            Gets the computed inline styles for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.LoadAnimationAsync">
            <summary>
            Loads the animation asynchronously.
            </summary>
            <returns>Returns a task which loads the animation when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnUpdateAnimationAsync">
            <summary>
            Updates the animation if a property has changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Add(FluentUI.Blazor.Community.Components.LottieControls)">
            <summary>
            Adds the specified controls to the player.
            </summary>
            <param name="controls">Controls of the player.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Remove(FluentUI.Blazor.Community.Components.LottieControls)">
            <summary>
            Removes the controls from the player.
            </summary>
            <param name="controls">Controls of the player to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.PlayAsync">
            <summary>
            Plays the animation.
            </summary>
            <returns>Returns a task wich plays the animation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.PauseAsync">
            <summary>
            Pauses the operation associated with the current instance asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.StopAsync">
            <summary>
            Stops the operation associated with the current instance asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.SetSpeedAsync(System.Double)">
            <summary>
            Asynchronously sets the speed of the object identified by the current instance.
            </summary>
            <param name="speed">The new speed value to set. Must be a valid double representing the desired speed.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.SetDirectionAsync(FluentUI.Blazor.Community.Components.LottieDirection)">
            <summary>
            Asynchronously sets the direction of the specified element.
            </summary>
            <param name="direction">The new direction to apply to the element.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.PlaySegments(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Plays a range of segments within the animation.
            </summary>
            <param name="startSegment">The index of the segment at which playback should start. Must be a non-negative integer.</param>
            <param name="endSegment">The index of the segment at which playback should end. Must be greater than or equal to <paramref
            name="startSegment"/>.</param>
            <param name="forceFlag">A value indicating whether to force playback, overriding any current playback state. Defaults to <see
            langword="false"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.ToggleLoopAsync(System.Boolean)">
            <summary>
            Toggles the loop state of the current instance.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.NotifyCompleteAsync">
            <summary>
            Occurs when the animation completes.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnComplete"/> callback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.NotifyLoopAsync">
            <summary>
            Occurs when a loop completes.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnLoop"/> callback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.NotifyEnterFrameAsync">
            <summary>
            Occurs when entering a new frame.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnEnterFrame"/> callback.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LottieControls">
            <summary>
            Represents the controls for a Lottie animation player.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieControls._isPlaying">
            <summary>
            Indicates whether the animation is currently playing.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieControls._isLooping">
            <summary>
            Indicates whether the animation is set to loop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieControls._renderLabel">
            <summary>
            Represents the label rendering fragment.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieControls.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieControls.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieControls.IsMobile">
            <summary>
            Gets or sets a value indicating whether the controls are displayed in a mobile layout.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieControls.Labels">
            <summary>
            Gets or sets the labels used for localization in the controls.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.InvokeAsync(System.Func{System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>
            Invokes the specified asynchronous function and updates the playing state if necessary.
            </summary>
            <param name="func">Func to invoke.</param>
            <param name="isPlaying">Value indicating if the animation is playing.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.PlayAsync">
            <summary>
            Plays the current instance asynchronously, delegating the operation to the parent if one exists.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous play operation. If no parent exists, the task
            completes immediately.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.PauseAsync">
            <summary>
            Pauses the current operation asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous pause operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.StopAsync">
            <summary>
            Asynchronously stops the current operation, delegating the stop request to the parent if one exists.    
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.SetSpeedAsync(System.Double)">
            <summary>
            Asynchronously sets the speed of the current object.
            </summary>
            <param name="speed">The desired speed to set, represented as a double. The value must be within the valid range supported by the
            parent object.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.SetDirectionAsync(FluentUI.Blazor.Community.Components.LottieDirection)">
            <summary>
            Asynchronously sets the direction for the current object.
            </summary>
            <param name="direction">The <see cref="T:FluentUI.Blazor.Community.Components.LottieDirection"/> to set for the object.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.ToggleLoopAsync(System.Boolean)">
            <summary>
            Toggles the loop state of the parent asynchronously.
            </summary>
            <param name="isLooping">Value indicating if the animation loops.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.OnAnimationCompletedAsync">
            <summary>
            Occurs when the animation has completed.
            </summary>
            <returns>Returns a task which stops the player if not looping.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LottieDirection">
            <summary>
            Specifies the possible directions for a Lottie operation.
            </summary>
            <remarks>This enumeration is used to define directional behavior or orientation in the context of a Lottie
            operation.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieDirection.Forward">
            <summary>
            Represents the forward direction.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieDirection.Backward">
            <summary>
            Represents the backward direction.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LottieLabels">
            <summary>
            Represents the labels used in the Lottie component for localization.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Default">
            <summary>
            Gets the default English labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.French">
            <summary>
            Gets the French labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Pause">
            <summary>
            Gets or sets the label for the "Pause" action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Play">
            <summary>
            Gets or sets the label for the "Play" action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Stop">
            <summary>
            Gets or sets the label for the "Stop" action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Loop">
            <summary>
            Gets or sets the label for the "Loop" action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Speed">
            <summary>
            Gets or sets the label for the "Speed" action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Direction">
            <summary>
            Gets or sets the label for the "Direction" action.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LottieOptions">
            <summary>
            Represents configuration options for a Lottie animation.
            </summary>
            <remarks>This record is used to configure the behavior and rendering of a Lottie animation.  It includes
            options for the animation's file path, playback settings, speed, and rendering type.</remarks>
            <param name="Path">The file path to the Lottie animation. This must be a valid path to the animation file.</param>
            <param name="Loop">A value indicating whether the animation should loop continuously.  The default value is <see langword="true"/>.</param>
            <param name="Autoplay">A value indicating whether the animation should start playing automatically.  The default value is <see
            langword="true"/>.</param>
            <param name="Speed">The playback speed of the animation. A value of 1 represents normal speed.  Values greater than 1 increase the
            speed, while values between 0 and 1 decrease it.  The default value is 1.</param>
            <param name="Renderer">The rendering type for the animation. This determines how the animation is rendered  (e.g., as SVG or Canvas). The
            default value is <see cref="F:FluentUI.Blazor.Community.Components.LottieRenderer.Svg"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieOptions.#ctor(System.String,System.Boolean,System.Boolean,System.Double,FluentUI.Blazor.Community.Components.LottieRenderer)">
            <summary>
            Represents configuration options for a Lottie animation.
            </summary>
            <remarks>This record is used to configure the behavior and rendering of a Lottie animation.  It includes
            options for the animation's file path, playback settings, speed, and rendering type.</remarks>
            <param name="Path">The file path to the Lottie animation. This must be a valid path to the animation file.</param>
            <param name="Loop">A value indicating whether the animation should loop continuously.  The default value is <see langword="true"/>.</param>
            <param name="Autoplay">A value indicating whether the animation should start playing automatically.  The default value is <see
            langword="true"/>.</param>
            <param name="Speed">The playback speed of the animation. A value of 1 represents normal speed.  Values greater than 1 increase the
            speed, while values between 0 and 1 decrease it.  The default value is 1.</param>
            <param name="Renderer">The rendering type for the animation. This determines how the animation is rendered  (e.g., as SVG or Canvas). The
            default value is <see cref="F:FluentUI.Blazor.Community.Components.LottieRenderer.Svg"/>.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieOptions.Path">
            <summary>The file path to the Lottie animation. This must be a valid path to the animation file.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieOptions.Loop">
            <summary>A value indicating whether the animation should loop continuously.  The default value is <see langword="true"/>.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieOptions.Autoplay">
            <summary>A value indicating whether the animation should start playing automatically.  The default value is <see
            langword="true"/>.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieOptions.Speed">
            <summary>The playback speed of the animation. A value of 1 represents normal speed.  Values greater than 1 increase the
            speed, while values between 0 and 1 decrease it.  The default value is 1.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieOptions.Renderer">
            <summary>The rendering type for the animation. This determines how the animation is rendered  (e.g., as SVG or Canvas). The
            default value is <see cref="F:FluentUI.Blazor.Community.Components.LottieRenderer.Svg"/>.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LottieRenderer">
            <summary>
            Specifies the rendering format options for a Lottie animation.
            </summary>
            <remarks>Use this enumeration to select the desired output format when rendering a Lottie animation.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieRenderer.Svg">
            <summary>
            Represents an SVG (Scalable Vector Graphics) element, which is a vector-based image format for defining graphics
            using XML.
            </summary>
            <remarks>This class provides functionality for working with SVG elements, including creating,
            manipulating, and rendering SVG content. SVG is widely used for scalable and resolution-independent graphics in
            web and application development.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieRenderer.Canvas">
            <summary>
            Represents a drawable surface for rendering graphical elements.
            </summary>
            <remarks>The <see cref="F:FluentUI.Blazor.Community.Components.LottieRenderer.Canvas"/> class provides a surface for drawing shapes, images, and other
            graphical content. It can be used in graphical applications to manage and render visual elements.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieRenderer.Html">
            <summary>
            Represents an HTML document or fragment, providing methods and properties to manipulate and interact with its
            structure and content.
            </summary>
            <remarks>This class can be used to parse, modify, and generate HTML content. It provides functionality
            for working with elements, attributes, and text nodes within an HTML structure. Use this class to
            programmatically create or manipulate HTML documents.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LottieState">
            <summary>
            Represents the state of a Lottie component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieState.IsRegister">
            <summary>
            Gets a value indicating whether the component is registered.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieState.Register">
            <summary>
            Registers the component.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when the component is already registered.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieState.Unregister">
            <summary>
            Unregisters the component.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxMediaQuery">
            <summary>
            Represents a Media Query detector.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.JavascriptFile">
            <summary>
            Represents the javascript file to manage the media query.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxMediaQuery._module">
            <summary>
            Represents the javascript module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxMediaQuery._hasRender">
            <summary>
            Represents a value indicating if the component was first rendered.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxMediaQuery._disposeQueryModule">
            <summary>
            Represents a value to dispose the module each time the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.Query"/> changes.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxMediaQuery"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.Query">
            <summary>
            Gets or sets the query to manage.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.OnMediaChanged">
            <summary>
            Gets or sets the callback to raise when the media changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.JSRuntime">
            <summary>
            Gets or sets the Javascript runtime.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.OnMediaQueryChangedAsync(System.Boolean)">
            <summary>
            Occurs when the media changes.
            </summary>
            <param name="change">Value indicating if the media has changed.</param>
            <returns>Returns a task which raises the event callback <see cref="P:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.OnMediaChanged"/> when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DomRect">
            <summary>
            Represents the dimensions and position of a rectangle, typically used to describe the bounding box of an element in
            a coordinate space.
            </summary>
            <remarks>The rectangle is defined by its top, left, bottom, and right edges, as well as its width and height.
            All values are expressed in the same coordinate system, and may be fractional. This type is commonly used in
            scenarios such as layout calculations, collision detection, or graphical rendering.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DomRect.Top">
            <summary>
            Gets the top coordinate value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DomRect.Left">
            <summary>
            Gets the left coordinate value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DomRect.Bottom">
            <summary>
            Gets the bottom coordinate value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DomRect.Right">
            <summary>
            Gets the right coordinate value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DomRect.Width">
            <summary>
            Gets the width of the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DomRect.Height">
            <summary>
            Gets the height of the element.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxObserverProvider">
            <summary>
            Provides a mechanism for managing and observing changes in Fluent components.
            </summary>
            <remarks>This class serves as a base for implementing functionality related to observing and reacting to
            changes in Fluent components. It is sealed and cannot be inherited.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxObserverProvider._dotNetRef">
            <summary>
            Represents a reference to a .NET object that is used to interact with the  <see
            cref="T:FluentUI.Blazor.Community.Components.FluentCxObserverProvider"/> instance from JavaScript in a Blazor application.
            </summary>
            <remarks>This field holds a <see cref="T:Microsoft.JSInterop.DotNetObjectReference`1"/> instance, which allows the  <see
            cref="T:FluentUI.Blazor.Community.Components.FluentCxObserverProvider"/> to be passed to JavaScript and invoked from there. It is intended for internal
            use and should not be accessed directly by external code.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxObserverProvider._isRendered">
            <summary>
            Indicates whether the object has been rendered.
            </summary>
            <remarks>This field is used to track the rendering state of the object.  It is intended for internal
            use and should not be accessed directly.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxObserverProvider._pendingItems">
            <summary>
            A thread-safe queue used to store pending observer items for processing.
            </summary>
            <remarks>This queue ensures safe concurrent access and is used to manage items that are awaiting
            processing in a multi-threaded environment.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxObserverProvider._pendingGroups">
            <summary>
            A thread-safe queue that holds pending group observer items to be processed.
            </summary>
            <remarks>This queue is used to manage and store items of type <see cref="T:FluentUI.Blazor.Community.Components.GroupObserverItem"/> that are
            awaiting processing. The use of <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> ensures thread-safe operations for adding and
            removing items in a concurrent environment.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxObserverProvider._jsModule">
            <summary>
            Represents a reference to a JavaScript module that is used for interop operations.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.JsModulePath">
            <summary>
            The relative path to the JavaScript module used by the FluentCxObserverProvider component.
            </summary>
            <remarks>This path is used to locate the JavaScript file that contains the implementation for the
            FluentCxObserverProvider. Ensure that the file exists at the specified location and is correctly deployed as
            part of the application.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxObserverProvider"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.ObserverState">
            <summary>
            Gets or sets the observer state used to manage and track the state of observed elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.DebounceResize">
            <summary>
            Gets or sets the debounce interval for resize events.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.DebounceIntersect">
            <summary>
            Gets or sets the debounce duration for handling intersection events.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.JSRuntime">
            <summary>
            Gets or sets the JavaScript runtime abstraction used to invoke JavaScript functions from .NET.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.NotifyAsync(FluentUI.Blazor.Community.Components.GroupObserverItem)">
            <summary>
            Notifies the system of changes to the specified group by registering intersection      and resize observers for
            each item in the group.
            </summary>
            <remarks>This method performs no action if the component has not been rendered.      For each item in
            the group, intersection and resize observers are registered      to monitor changes related to the item's
            associated element.</remarks>
            <param name="group">The group containing the items to be observed.      Each item must have a valid identifier and associated
            element.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.NotifyAsync(FluentUI.Blazor.Community.Components.ObserverItem)">
            <summary>
            Notifies the system to register intersection and resize observers for the specified item.
            </summary>
            <remarks>This method registers intersection and resize observers for the provided item if the system
            is in a rendered state. The <paramref name="item"/> must have a non-null identifier and element for the
            operation to succeed.</remarks>
            <param name="item">The <see cref="T:FluentUI.Blazor.Community.Components.ObserverItem"/> containing the identifier and element to be observed.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.UnnotifyGroupAsync(System.String)">
            <summary>
            Asynchronously removes notifications for all items in the specified group.
            </summary>
            <remarks>This method unregisters intersection and resize notifications for each item in the group.  It
            has no effect if the group does not exist or if the component has not been rendered.</remarks>
            <param name="groupId">The unique identifier of the group whose notifications are to be removed. Cannot be <see langword="null"/> or
            empty.</param>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.UnnotifyItemAsync(System.String)">
            <summary>
            Removes notifications for the specified item, including intersection and resize event tracking, if the component
            is rendered.
            </summary>
            <param name="id">The unique identifier of the item to unnotify. Cannot be <see langword="null"/> or empty.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.RegisterIntersectAsync(System.String,System.String,Microsoft.AspNetCore.Components.ElementReference)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.RegisterIntersectAsync(System.String,Microsoft.AspNetCore.Components.ElementReference)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.RegisterResizeAsync(System.String,System.String,Microsoft.AspNetCore.Components.ElementReference)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.RegisterResizeAsync(System.String,Microsoft.AspNetCore.Components.ElementReference)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.UnregisterIntersectAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.UnregisterIntersectAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.UnregisterResizeAsync(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.UnregisterResizeAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.RegisterMutationAsync(System.String,System.String,Microsoft.AspNetCore.Components.ElementReference,FluentUI.Blazor.Community.Components.MutationObserverOptions)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.UnregisterMutationAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.OnIntersectBatchAsync(FluentUI.Blazor.Community.Components.IntersectBatch)">
            <summary>
            Processes a batch of intersection events and notifies registered observers for each intersected element.
            </summary>
            <remarks>This method is intended to be invoked from JavaScript via interop. Each entry in the batch is
            dispatched to the corresponding observer if it is registered. No notification occurs for elements without a
            registered observer.</remarks>
            <param name="batch">The batch of intersection entries to process. Must not be null.</param>
            <returns>A task that represents the asynchronous operation of notifying observers for each intersection entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.OnMutationBatchAsync(FluentUI.Blazor.Community.Components.MutationBatch)">
            <summary>
            Processes a batch of DOM mutation events received from JavaScript and dispatches them to registered observers
            asynchronously.
            </summary>
            <remarks>This method is intended to be invoked from JavaScript via interop. Each mutation entry in the
            batch is delivered to the corresponding observer based on its group and identifier. If no observer is registered
            for a given entry, that entry is ignored.</remarks>
            <param name="batch">The batch of mutation events to process. Must not be null. Contains the collection of mutation entries and the
            associated group identifier.</param>
            <returns>A task that represents the asynchronous operation of dispatching mutation events to observers.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.OnResizeBatchAsync(FluentUI.Blazor.Community.Components.ResizeBatch)">
            <summary>
            Processes a batch of resize events and asynchronously notifies observers for each affected element.
            </summary>
            <remarks>This method is intended to be invoked from JavaScript via interop. Observers are notified
            only for elements that are currently registered in the specified group.</remarks>
            <param name="batch">The batch of resize event data containing the group identifier and a collection of entries representing elements
            that have been resized.</param>
            <returns>A task that represents the asynchronous operation of notifying observers for each resize event.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserverProvider.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GroupObserverItem">
            <summary>
            Represents an item within a group observer, typically used to monitor or manage changes in a grouped collection of
            components.
            </summary>
            <remarks>This class is intended to be used as part of a group observation mechanism, where it serves as an
            individual item within the group. It inherits from <see cref="T:Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase"/>, which provides base
            functionality for fluent component design.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GroupObserverItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.GroupObserverItem"/> class.
            </summary>
            <remarks>The constructor generates a new unique identifier for the instance using <see
            cref="M:Microsoft.FluentUI.AspNetCore.Components.Identifier.NewId(System.Int32)"/>.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GroupObserverItem.GroupId">
            <summary>
            Gets or sets the unique identifier for the group to which this item belongs.
            </summary>
            <remarks>This property is used to associate the item with a specific group. It is essential for grouping
            functionality and should be unique within the context of the application.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GroupObserverItem.ChildContent">
            <summary>
            Gets or sets the child content to be rendered within the group observer item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GroupObserverItem.Items">
            <summary>
            Gets the collection of observer items contained within this group.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GroupObserverItem.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GroupObserverItem.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GroupObserverItem.AddObserverItem(FluentUI.Blazor.Community.Components.ObserverItem)">
            <summary>
            Adds an observer item to the collection.
            </summary>
            <remarks>This method adds the specified observer item to the internal collection. Ensure that the item
            is not <c>null</c>  before calling this method to avoid unexpected behavior.</remarks>
            <param name="item">The <see cref="T:FluentUI.Blazor.Community.Components.ObserverItem"/> to add to the collection. Cannot be <c>null</c>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GroupObserverItem.RemoveItem(FluentUI.Blazor.Community.Components.ObserverItem)">
            <summary>
            Removes the specified observer item from the collection.
            </summary>
            <remarks>If the specified item does not exist in the collection, no action is taken.</remarks>
            <param name="item">The <see cref="T:FluentUI.Blazor.Community.Components.ObserverItem"/> to remove from the collection. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IIntersectObserver">
            <summary>
            Defines methods for registering and unregistering elements for intersection observation.
            </summary>
            <remarks>This interface is typically used to monitor the visibility or intersection of elements within a
            viewport or container. It supports grouping elements for more granular control over intersection
            observation.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IIntersectObserver.RegisterIntersectAsync(System.String,System.String,Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Registers an intersection observer for the specified element within a group.
            </summary>
            <param name="groupId">The unique identifier of the group to which the element belongs.</param>
            <param name="elementId">The unique identifier of the element to observe.</param>
            <param name="elementReference">A reference to the DOM element to be observed.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IIntersectObserver.UnregisterIntersectAsync(System.String,System.String)">
            <summary>
            Asynchronously unregisters an intersecting element from a specified group.
            </summary>
            <remarks>This method removes the specified element from the group, ensuring it is no longer considered
            part of the intersection. If the element or group does not exist, the method completes without making
            changes.</remarks>
            <param name="groupId">The unique identifier of the group from which the element will be unregistered. Cannot be null or empty.</param>
            <param name="elementId">The unique identifier of the element to be unregistered. Cannot be null or empty.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IMutationObserver">
            <summary>
            Defines an interface for observing and managing DOM mutations on specified elements within a group context.
            </summary>
            <remarks>Implementations of this interface allow clients to register and unregister mutation observers for
            elements, typically to react to changes in the DOM such as attribute modifications, child list updates, or subtree
            changes. This is commonly used in scenarios where dynamic UI updates or synchronization with client-side state are
            required. Thread safety and observer lifecycle management depend on the specific implementation.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IMutationObserver.RegisterMutationAsync(System.String,System.String,Microsoft.AspNetCore.Components.ElementReference,FluentUI.Blazor.Community.Components.MutationObserverOptions)">
            <summary>
            Registers a mutation observer for the specified DOM element, enabling asynchronous tracking of changes according
            to the provided options.
            </summary>
            <remarks>If an observer is already registered for the specified element and group, this method may
            overwrite the previous registration. This method does not begin observing until registration is
            complete.</remarks>
            <param name="groupId">The identifier for the observer group. Used to associate the mutation observer with a logical group for
            management or disposal.</param>
            <param name="elementId">The unique identifier of the DOM element to observe for mutations.</param>
            <param name="elementReference">A reference to the DOM element that will be observed for mutations. Must not be null.</param>
            <param name="options">The configuration options that specify which types of mutations to observe, such as attribute changes, child
            list modifications, or subtree changes. Cannot be null.</param>
            <returns>A task that represents the asynchronous registration operation. The task completes when the mutation observer
            has been successfully registered.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IMutationObserver.UnregisterMutationAsync(System.String,System.String)">
            <summary>
            Asynchronously unregisters a mutation identified by the specified group and element IDs.
            </summary>
            <param name="groupId">The unique identifier of the mutation group containing the mutation to unregister. Cannot be null or empty.</param>
            <param name="elementId">The unique identifier of the mutation element to unregister within the specified group. Cannot be null or empty.</param>
            <returns>A task that represents the asynchronous unregister operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IntersectBatch">
            <summary>
            Represents a batch of intersect entries grouped by a unique identifier.
            </summary>
            <remarks>This record is used to encapsulate a collection of intersect entries, identified by a group ID. It is
            typically used in scenarios where multiple entries need to be processed or analyzed together as part of a single
            logical group.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectBatch.GroupId">
            <summary>
            Gets the unique identifier for the group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectBatch.Entries">
            <summary>
            Gets the list of intersect entries associated with the group.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IntersectEntry">
            <summary>
            Represents an entry that contains information about the intersection state of an entity.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEntry.Id">
            <summary>
            Gets the unique identifier for the entity.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEntry.IsIntersecting">
            <summary>
            Gets a value indicating whether the current object intersects with another object.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEntry.IntersectionRatio">
            <summary>
            Gets the ratio representing the intersection of two entities as a value between 0.0 and 1.0.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEntry.BoundingClientRect">
            <summary>
            Gets the bounding rectangle of the element relative to the viewport, if available.
            </summary>
            <remarks>The bounding rectangle provides the position and dimensions of the element as rendered in the
            browser. If the element is not currently rendered or its layout information is unavailable, this property may be
            <see langword="null"/>.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEntry.IntersectionRect">
            <summary>
            Gets the rectangle representing the intersection area between the target element and its root, if any.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEntry.RootBounds">
            <summary>
            Gets the bounding rectangle of the root element at the time of observation, if available.
            </summary>
            <remarks>If the root element is no longer present or its bounds cannot be determined, this property
            returns <see langword="null"/>.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IntersectEventArgs">
            <summary>
            Represents the event data for an intersection event, providing details about the observed element's intersection
            state.
            </summary>
            <remarks>This class is typically used in scenarios where intersection events are monitored, such as detecting
            when an element enters or leaves the viewport or a specified root element. It provides information about the
            observed element's identifiers, intersection state, and the ratio of the intersection area.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEventArgs.GroupId">
            <summary>
            Gets the unique identifier for the group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEventArgs.ElementId">
            <summary>
            Gets the unique identifier for the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEventArgs.IsIntersecting">
            <summary>
            Gets a value indicating whether the observed element is currently intersecting with the root element or viewport.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEventArgs.IntersectionRatio">
            <summary>
            Gets the ratio of the intersection area to the bounding box area of the observed element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEventArgs.BoundingClientRect">
            <summary>
            Gets the bounding rectangle of the element relative to the viewport, if available.
            </summary>
            <remarks>The bounding rectangle provides the position and dimensions of the element as rendered in the
            browser. If the element is not currently rendered or its layout information is unavailable, this property may be
            <see langword="null"/>.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEventArgs.IntersectionRect">
            <summary>
            Gets the rectangle representing the intersection area between the target element and its root, if any.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IntersectEventArgs.RootBounds">
            <summary>
            Gets the bounding rectangle of the root element at the time of observation, if available.
            </summary>
            <remarks>If the root element is no longer present or its bounds cannot be determined, this property
            returns <see langword="null"/>.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IResizeObserver">
            <summary>
            Defines methods for observing and managing resize events for DOM elements.
            </summary>
            <remarks>This interface provides functionality to register and unregister DOM elements for resize observation.
            It supports grouping elements by an optional group identifier, allowing for more granular control over resize event
            handling. Use this interface to monitor size changes of specific elements in a web application.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IResizeObserver.RegisterResizeAsync(System.String,System.String,Microsoft.AspNetCore.Components.ElementReference)">
            <summary>
            Registers an element for resize event tracking within a specified group.
            </summary>
            <remarks>This method enables resize event tracking for the specified element, allowing the application
            to respond to changes in the element's size. Ensure that the <paramref name="groupId"/> and <paramref
            name="elementId"/> are unique within the context of the application.</remarks>
            <param name="groupId">The identifier of the group to which the element belongs. This value cannot be null or empty.</param>
            <param name="elementId">The unique identifier of the element to be tracked. This value cannot be null or empty.</param>
            <param name="elementReference">A reference to the DOM element to be monitored for resize events.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IResizeObserver.UnregisterResizeAsync(System.String,System.String)">
            <summary>
            Unregisters a resize listener for a specific element within a group asynchronously.
            </summary>
            <param name="groupId">The identifier of the group containing the element. Cannot be <see langword="null"/> or empty.</param>
            <param name="elementId">The identifier of the element to unregister. Cannot be <see langword="null"/> or empty.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MutationBatch">
            <summary>
            Represents a batch of mutation entries grouped under a common identifier.
            </summary>
            <remarks>Use this type to organize multiple mutation operations that should be processed together as a single
            batch. The batch is identified by the <see cref="P:FluentUI.Blazor.Community.Components.MutationBatch.GroupId"/> property, which can be used to correlate related
            mutations.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationBatch.GroupId">
            <summary>
            Gets the unique identifier for the group associated with this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationBatch.Entries">
            <summary>
            Gets the collection of mutation entries associated with this instance.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MutationEntry">
            <summary>
            Represents a record of a single mutation event, including details about the type of mutation and affected nodes or
            attributes.
            </summary>
            <remarks>Use this type to capture and convey information about changes to a document structure, such as
            attribute modifications or node additions and removals. The properties provide context for the mutation, including
            the mutation type, affected attribute name, previous value, and serialized representations of added or removed
            nodes. This record is typically used in scenarios involving DOM change tracking or synchronization.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEntry.Id">
            <summary>
            Gets the unique identifier for this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEntry.Type">
            <summary>
            Gets the type of mutation to observe or process.
            </summary>
            <remarks>Valid values include "attributes", "childList", and "subtree". The meaning of each value
            depends on the context in which the property is used. This property is immutable after initialization.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEntry.AttributeName">
            <summary>
            Gets the name of the attribute associated with this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEntry.OldValue">
            <summary>
            Gets the previous value before the most recent change, or null if no prior value exists.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEntry.AddedNodes">
            <summary>
            Gets the serialized representation of the nodes that were added.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEntry.RemovedNodes">
            <summary>
            Gets the serialized representation of nodes that have been removed.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MutationEventArgs">
            <summary>
            Provides data for mutation-related events, encapsulating information about changes to attributes, child nodes, or
            subtrees within a group or instance.
            </summary>
            <remarks>Use this record to access details about a mutation event, such as the type of mutation, affected
            attributes, and lists of added or removed nodes. All properties are immutable after initialization, ensuring event
            data remains consistent throughout its lifecycle.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEventArgs.GroupId">
            <summary>
            Gets the unique identifier for the group associated with this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEventArgs.Id">
            <summary>
            Gets the unique identifier for this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEventArgs.Type">
            <summary>
            Gets the type of mutation to observe or process.
            </summary>
            <remarks>Valid values include "attributes", "childList", and "subtree". The meaning of each value
            depends on the context in which the property is used. This property is immutable after initialization.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEventArgs.AttributeName">
            <summary>
            Gets the name of the attribute associated with this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEventArgs.OldValue">
            <summary>
            Gets the previous value before the most recent change, or null if no prior value exists.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEventArgs.AddedNodes">
            <summary>
            Gets the serialized representation of the nodes that were added.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationEventArgs.RemovedNodes">
            <summary>
            Gets the serialized representation of nodes that have been removed.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MutationObserverOptions">
            <summary>
            Represents configuration options for observing mutations in a DOM tree using a mutation observer.
            </summary>
            <remarks>Use this record to specify which types of DOM changes should be monitored, such as attribute
            modifications, changes to child elements, or updates to character data. Each property corresponds to a specific
            aspect of mutation observation and can be set to enable or disable monitoring of that aspect. These options are
            typically used when initializing a mutation observer to control its behavior.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationObserverOptions.Attributes">
            <summary>
            Gets a value indicating whether attributes are enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationObserverOptions.ChildList">
            <summary>
            Gets a value indicating whether child elements are included in the list.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationObserverOptions.Subtree">
            <summary>
            Gets a value indicating whether operations should include the entire subtree of elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationObserverOptions.AttributeOldValue">
            <summary>
            Gets a value indicating whether the original value of an attribute is included during change tracking
            operations.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationObserverOptions.CharacterData">
            <summary>
            Gets a value indicating whether character data is included in the output.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MutationObserverOptions.CharacterDataOldValue">
            <summary>
            Gets a value indicating whether the old value of character data is included in mutation records.
            </summary>
            <remarks>When set to <see langword="true"/>, mutation records will contain the previous value of the
            character data before the change occurred. This can be useful for tracking changes or implementing undo
            functionality. When <see langword="false"/>, the old value is omitted from mutation records, which may improve
            performance if the previous value is not needed.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MutationType">
            <summary>
            Specifies the type of change detected in a DOM mutation event, such as attribute modifications, changes to child
            nodes, or updates to textual content.
            </summary>
            <remarks>Use this enumeration to determine the nature of a DOM mutation when handling mutation events. Each
            value corresponds to a distinct category of change: attribute updates, additions or removals of child nodes, or
            modifications to character data. This can be useful for filtering or responding to specific mutation types in event
            handlers.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.MutationType.Attributes">
            <summary>
            Gets the collection of attributes associated with the current object.
            </summary>
            <remarks>Use this property to access metadata or custom information attached to the object, such as
            data annotations or user-defined attributes. The returned collection may be empty if no attributes are
            present.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.MutationType.ChildList">
            <summary>
            Represents a collection of child elements associated with a parent object.
            </summary>
            <remarks>Use this collection to access, enumerate, or manage child elements in hierarchical data
            structures. The order and mutability of the collection may depend on the specific implementation.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.MutationType.CharacterData">
            <summary>
            Represents the textual data contained within a character node, such as text, CDATA, or comments, in a document
            object model (DOM).
            </summary>
            <remarks>Use this type to access or manipulate the character data of nodes that store text content. It
            is commonly used when working with XML or HTML documents to retrieve or modify the value of text nodes, CDATA
            sections, or comment nodes. This type does not represent element nodes or attributes.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ObserverItem">
            <summary>
            Represents an observer item which can be used within a <see cref="T:FluentUI.Blazor.Community.Components.GroupObserverItem"/> to monitor or manage changes in a grouped collection of components.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.ObserverItem"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ObserverItem.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.GroupObserverItem"/> component that this observer item is associated with.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ObserverItem.ObserverState">
            <summary>
            Gets or sets the state of the observer, which is used to manage and track the observer's behavior and data.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ObserverItem.OnResize">
            <summary>
            Gets or sets the callback that is invoked when the component is resized.
            </summary>
            <remarks>Use this property to handle resize events and respond to changes in the component's
            dimensions.  The callback is triggered whenever a resize event occurs, providing information such as the new
            size.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ObserverItem.OnIntersect">
            <summary>
            Gets or sets the callback to be invoked when an intersection event occurs.
            </summary>
            <remarks>The callback is triggered with an <see cref="T:FluentUI.Blazor.Community.Components.IntersectEventArgs"/> instance containing
            details about the intersection event. Use this property to handle intersection events, such as when an element
            enters or exits the viewport.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ObserverItem.OnMutation">
            <summary>
            Gets or sets the callback that is invoked when a mutation event occurs within the component.
            </summary>
            <remarks>Assign a delegate to handle mutation events, such as changes to the component's data or
            state. The event provides details through the <see cref="T:FluentUI.Blazor.Community.Components.MutationEventArgs"/> parameter. This callback is
            typically used to respond to or process mutations initiated by user actions or other triggers.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ObserverItem.ObserveResize">
            <summary>
            Gets or sets a value indicating whether the component observes changes to its size and responds to resize
            events.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ObserverItem.MutationOptions">
            <summary>
            Gets or sets the options used to configure the behavior of the mutation observer for this component.
            </summary>
            <remarks>Specify mutation observer options to control which DOM changes are monitored, such as
            attribute modifications, child list changes, or subtree updates. If not set, default observation behavior will
            be used.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ObserverItem.ObserveIntersection">
            <summary>
            Gets or sets a value indicating whether intersection observation is enabled for the component.
            </summary>
            <remarks>When enabled, the component will monitor its visibility or intersection with a parent
            container, which can be used to trigger actions such as lazy loading or animations. This property is typically
            used in scenarios where you need to respond to changes in the component's visibility within the
            viewport.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ObserverItem.ObserveMutation">
            <summary>
            Gets or sets a value indicating whether changes to the component's content should be observed for mutations.
            </summary>
            <remarks>When set to <see langword="true"/>, the component will monitor its content for dynamic
            changes, such as additions or removals of child elements. This can be useful for scenarios where the content is
            updated outside of the normal rendering cycle.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverItem.OnResizeAsync(FluentUI.Blazor.Community.Components.ResizeEventArgs)">
            <summary>
            Handles the resize event and invokes the associated delegate asynchronously, if one is assigned.
            </summary>
            <param name="e">The event arguments containing details about the resize event.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverItem.OnIntersectAsync(FluentUI.Blazor.Community.Components.IntersectEventArgs)">
            <summary>
            Handles the intersection event by invoking the associated event callback asynchronously.
            </summary>
            <remarks>This method checks if the <see cref="P:FluentUI.Blazor.Community.Components.ObserverItem.OnIntersect"/> event has any registered delegates  and
            invokes them asynchronously if present. Ensure that the event arguments provided  are valid and contain the
            necessary data for the event handlers.</remarks>
            <param name="e">The event arguments containing details about the intersection event.</param>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverItem.OnMutationAsync(FluentUI.Blazor.Community.Components.MutationEventArgs)">
            <summary>
            Handles a mutation event asynchronously when a data change occurs.
            </summary>
            <remarks>Override this method in a derived class to implement custom mutation handling logic. The base
            implementation throws a <see cref="T:System.NotImplementedException"/>.</remarks>
            <param name="entry">The event arguments containing details about the mutation to process.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if the method is not overridden in a derived class.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverItem.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverItem.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ObserverState">
            <summary>
            Represents the internal state of the observer, managing groups and items along with their notification status.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObserverState._groups">
            <summary>
            Represents the collection of groups managed by the observer state, indexed by their unique group identifiers.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObserverState._items">
            <summary>
            Represents the collection of individual observer items, indexed by their unique identifiers.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObserverState._provider">
            <summary>
            References the provider responsible for handling notifications. This may be <see langword="null"/> if no provider is currently set.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObserverState._addPendingGroups">
            <summary>
            Represents queues for managing pending notification actions when the provider is not available.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObserverState._addPendingItems">
            <summary>
            Represents a queue of items pending addition notifications when the provider is not available.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObserverState._removePendingGroups">
            <summary>
            Represents a queue of group IDs pending removal notifications when the provider is not available.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObserverState._removePendingItems">
            <summary>
            Represents a queue of item IDs pending removal notifications when the provider is not available.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverState.AddGroupAsync(FluentUI.Blazor.Community.Components.GroupObserverItem)">
            <summary>
            Adds a group to the collection and notifies the provider if available.
            </summary>
            <remarks>If the provider is not available, the group is added to a pending queue for later processing.
            Otherwise, the provider is immediately notified of the added group.</remarks>
            <param name="group">The group to add. The group's <see cref="P:FluentUI.Blazor.Community.Components.GroupObserverItem.GroupId"/> must not be null, empty, or whitespace.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="group"/> has a <see cref="P:FluentUI.Blazor.Community.Components.GroupObserverItem.GroupId"/> that is null, empty, or
            consists only of whitespace.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverState.RemoveGroupAsync(System.String)">
            <summary>
            Removes the specified group from the collection and updates its notification status.
            </summary>
            <remarks>If the provider is not available, the group is added to a queue of pending removals.
            Otherwise, the group is unnotified immediately.</remarks>
            <param name="groupId">The unique identifier of the group to remove. Cannot be null, empty, or consist only of whitespace.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="groupId"/> is null, empty, or consists only of whitespace.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverState.AddItemAsync(FluentUI.Blazor.Community.Components.ObserverItem)">
            <summary>
            Adds an item to the collection and notifies the provider if available.
            </summary>
            <remarks>If the provider is not available, the item is added to a pending queue to be processed later.
            Otherwise, the provider is notified immediately after the item is added.</remarks>
            <param name="item">The <see cref="T:FluentUI.Blazor.Community.Components.ObserverItem"/> to add. The item's <see cref="P:Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase.Id"/> must not be null or empty.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverState.RemoveItemAsync(FluentUI.Blazor.Community.Components.ObserverItem)">
            <summary>
            Removes the specified item from the collection and updates its notification state.
            </summary>
            <remarks>If a notification provider is available, the item's notification state is updated by calling
            the provider.  Otherwise, the item's ID is added to a queue for pending removal.</remarks>
            <param name="item">The item to remove. The item's <see cref="P:Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase.Id"/> must not be null or empty.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverState.SetProviderAsync(FluentUI.Blazor.Community.Components.FluentCxObserverProvider)">
            <summary>
            Sets the provider responsible for handling notifications and processes any pending notification actions.
            </summary>
            <remarks>When a new provider is set, any pending groups or items queued for notification are processed
            and sent to the provider. If the provider is set to <see langword="null"/>, all pending notifications are
            discarded.</remarks>
            <param name="value">The <see cref="T:FluentUI.Blazor.Community.Components.FluentCxObserverProvider"/> instance to set as the current provider.  If <paramref name="value"/>
            is <see langword="null"/>, all pending notifications are cleared.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverState.GetItems(System.String)">
            <summary>
            Retrieves the list of items associated with the specified group identifier.
            </summary>
            <param name="groupId">The unique identifier of the group whose items are to be retrieved. Cannot be null or empty.</param>
            <returns>A list of <see cref="T:FluentUI.Blazor.Community.Components.ObserverItem"/> objects associated with the specified group.  Returns an empty list if the
            group does not exist.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverState.GetItem(System.String,System.String)">
            <summary>
            Retrieves an item by its identifier, searching within a specified group or globally if the group is not found.
            </summary>
            <param name="groupId">The identifier of the group to search within. Cannot be <see langword="null"/> or empty.</param>
            <param name="itemId">The identifier of the item to retrieve. Cannot be <see langword="null"/> or empty.</param>
            <returns>The <see cref="T:FluentUI.Blazor.Community.Components.ObserverItem"/> that matches the specified <paramref name="itemId"/>.  If the group is found, the
            search is limited to that group; otherwise, a global search is performed.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no item with the specified <paramref name="itemId"/> is found in the specified group or globally.</exception>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResizeBatch">
            <summary>
            Represents a batch of resize entries grouped by a unique identifier.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizeBatch.GroupId">
            <summary>
            Gets the unique identifier for the group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizeBatch.Entries">
            <summary>
            Gets the list of resize entries associated with the group.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResizeEntry">
            <summary>
            Represents an entry containing dimensions for resizing operations.
            </summary>
            <remarks>This record is typically used to store and transfer information about the dimensions of an object,
            including its unique identifier and its width and height values.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizeEntry.Id">
            <summary>
            Gets the unique identifier for the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizeEntry.Width">
            <summary>
            Gets the width of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizeEntry.Height">
            <summary>
            Gets the height of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizeEntry.Rect">
            <summary>
            Gets the DOM rectangle representing position of the entry.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResizeEventArgs">
            <summary>
            Represents the event data for a resize operation, including the dimensions of the resized element and its
            identifiers.
            </summary>
            <remarks>This class provides information about a resize event, such as the group and element identifiers, as
            well as the new width and height of the resized element.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizeEventArgs.GroupId">
            <summary>
            Gets the unique identifier for the group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizeEventArgs.ElementId">
            <summary>
            Gets the unique identifier for the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizeEventArgs.Width">
            <summary>
            Gets the width of the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizeEventArgs.Height">
            <summary>
            Gets the height of the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizeEventArgs.Rect">
            <summary>
            Gets the bounding rectangle of the element.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxPathBar">
            <summary>
            Represents a path bar.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._homeIcon">
            <summary>
            Represents the home icon.
            </summary>
            <remarks>
            Used when the <see cref="T:FluentUI.Blazor.Community.Components.DeviceInfo"/> is null.
            </remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._desktopIcon">
            <summary>
            Represents the desktop icon.
            </summary>
            <remarks>
            Used when the <see cref="T:FluentUI.Blazor.Community.Components.DeviceInfo"/> is not null and if the device is a desktop.
            </remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._tabletIcon">
            <summary>
            Represents the tablet icon.
            </summary>
            <remarks>
            Used when the <see cref="T:FluentUI.Blazor.Community.Components.DeviceInfo"/> is not null and if the device is a tablet.
            </remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._phoneIcon">
            <summary>
            Represents the desktop icon.
            </summary>
            <remarks>
            Used when the <see cref="T:FluentUI.Blazor.Community.Components.DeviceInfo"/> is not null and if the device is a smartphone.
            </remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar.OverflowButtonWidth">
            <summary>
            Represents the width of the overflow button.
            </summary>
            <remarks>
            This value is fixed because the button has a fixed width of 32px.
            </remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._overflowItems">
            <summary>
            Represents the overflow items.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._visibleItems">
            <summary>
            Represents the visible items.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._allItems">
            <summary>
            Represents all items.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar.JavascriptModule">
            <summary>
            Represents the JavaScript module for the component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._jsModule">
            <summary>
            Represents the JavaScript module reference.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._dotNetRef">
            <summary>
            Represents the dot net object reference.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._hasPathChanged">
            <summary>
            Represents a value indicating if the path has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._cachedSizes">
            <summary>
            Represents the cached values.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._lastContainerWidth">
            <summary>
            Represents the last container width.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._measuredCount">
            <summary>
            Represents the number of elements to measure.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._containerWidth">
            <summary>
            Represents the current container width.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._mutationValue">
            <summary>
            Represents the mutation observer values.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._refreshItemsSize">
            <summary>
            Represents a value indicating if the items size should be refreshed. 
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.InternalCss">
            <summary>
            Gets the css class which is used internally.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.JSRuntime">
            <summary>
            Gets or sets the javaScript runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.Root">
            <summary>
            Gets or sets the root of the path, with all possible paths.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.Path">
            <summary>
            Gets or sets the path.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.PathChanged">
            <summary>
            Gets or sets the callback when the path changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.DeviceInfoState">
            <summary>
            Gets or sets the state for the information of the current used device.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.InvalidationThresholdPercentage">
            <summary>
            Gets or sets the percentage threshold to invalidate the path.
            </summary>
            <remarks>This value is between 0.0 and 1.0</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.InvalidationThresholdPixels">
            <summary>
            Gets or sets the pixel threshold to invalidate the path.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.MutationObserverConfig">
            <summary>
            Gets or sets the mutation observer configuration.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnCacheInvalidated">
            <summary>
            Gets or sets the event callback which is invoked when the cache is invalidated.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnPathSelectedAsync">
            <summary>
            Occurs when the path is selected by <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBarItem"/>.
            </summary>
            <returns>Returns a task which changes the path when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.GetHomeIcon">
            <summary>
            Gets the home icon.
            </summary>
            <returns>Returns the home icon.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.UpdatePathAsync(FluentUI.Blazor.Community.Components.IPathBarItem)">
            <summary>
            Updates the path and invokes the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.PathChanged"/> callback.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.InvalidateItemSize(System.String)">
            <summary>
            Invalidates the size of the item with the specified <paramref name="id"/>.
            </summary>
            <param name="id">Identifier of the item.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.ClearItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Clears the cached sizes of the specified <paramref name="values"/>.
            </summary>
            <param name="values">Values to remove from the cached sizes.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.InvalidatePath">
            <summary>
            Invalidate the path and recalculates the visible and overflow items.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnCacheInvalidatedAsync">
            <summary>
            Invalidates the cache and invokes the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnCacheInvalidated"/> callback.
            </summary>
            <returns>Returns a task which invokes the callback when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.RefreshPathBarAsync">
            <summary>
            Refreshes the path bar and recalculates the visible and overflow items.
            </summary>
            <returns>Returns a task which computes the visible and overflow items when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.UpdateCacheSizesAsync(System.Int32)">
            <summary>
            Updates the cache sizes starting from the specified index.
            </summary>
            <param name="startIndex">Index of the starting cache.</param>
            <returns>Returns <see langword="true"/> when the cache is updated,
            <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnResizeAsync(System.Double)">
            <summary>
            Occurs when the component is resized.
            </summary>
            <param name="width">New size of the component.</param>
            <returns>Returns a task which refresh the component.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnMutatedAsync">
            <summary>
            Occurs when a mutation has changed.
            </summary>
            <returns>Returns a task which invalidate the cache.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxPathBarItem">
            <summary>
            Represents a component inside a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBarItem._renderLabelFragment">
            <summary>
            Represents the render fragment for the label.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.Label">
            <summary>
            Gets or sets the label of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.Items">
            <summary>
            Gets or sets the items inside the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.Ancestor">
            <summary>
            Gets or sets the ancestor of this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.ShowLabel">
            <summary>
            Gets or sets a value indicating if the label is visible or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.Icon">
            <summary>
            Gets or sets the icon to show.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.OnTapped">
            <summary>
            Gets or sets the callback when the component is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.InternalClass">
            <summary>
            Gets the internal class for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.OnTappedAsync">
            <summary>
            Occurs when the component is clicked.
            </summary>
            <returns>Returns a task which raises the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.OnTapped"/> callback when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu">
            <summary>
            Represents a menu for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBarItem"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu._isMenuOpen">
            <summary>
            Represents the opened state of the menu.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu._chevronRight">
            <summary>
            Represents the chevron right when the menu is not opened.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu._chevronDown">
            <summary>
            Represents the chevron down when the menu is opened.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu.Parent">
            <summary>
            Gets or sets the parent of this menu.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu.Items">
            <summary>
            Gets or sets the items of this menu.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu.OnItemTappedAsync(FluentUI.Blazor.Community.Components.IPathBarItem)">
            <summary>
            Occurs when the menu is selected.
            </summary>
            <param name="item">Represents the selected item.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IPathBarItem">
            <summary>
            Represents an interface for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBarItem"/>
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IPathBarItem.Label">
            <summary>
            Gets the label of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IPathBarItem.Parent">
            <summary>
            Gets the parent of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IPathBarItem.Id">
            <summary>
            Gets the id of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IPathBarItem.Icon">
            <summary>
            Gets the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IPathBarItem.Items">
            <summary>
            Gets the menu items of the item.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.OverflowButton">
            <summary>
            Represents the overflow button for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OverflowButton._isMenuOpen">
            <summary>
            Represents if the menu is open.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.OverflowButton.Parent">
            <summary>
            Gets or sets the parent of the button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.OverflowButton.Items">
            <summary>
            Gets or sets the items inside the overflow.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.OverflowButton.OnItemTappedAsync(FluentUI.Blazor.Community.Components.IPathBarItem)">
            <summary>
            Occurs when the menu is selected.
            </summary>
            <param name="item">Represents the selected item.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PathBarItem">
            <summary>
            Represents an item for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar"/> component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PathBarItem._items">
            <summary>
            Represents the children of the current instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItem.Label">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItem.Id">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItem.Icon">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItem.Items">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItem.Parent">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PathBarItemBuilder">
            <summary>
            Represents a builder for the <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PathBarItemBuilder.Prefix">
            <summary>
            Represents the prefix used for the identifiers.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.Remove(FluentUI.Blazor.Community.Components.IPathBarItem,System.String)">
            <summary>
            Removes the item with the specified <paramref name="id"/> from the <paramref name="root"/>.
            </summary>
            <param name="root">Root to use for searching the value to remove.</param>
            <param name="id">Identifier to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.Remove(FluentUI.Blazor.Community.Components.IPathBarItem,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all the items with the specified <paramref name="idCollection"/> from the <paramref name="root"/>.
            </summary>
            <param name="root">Root to use for searching the values to remove.</param>
            <param name="idCollection">Collection of identifiers to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.From``1(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{``0}})">
            <summary>
            Builds a collection of <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/> from the specified <paramref name="values"/>.
            </summary>
            <typeparam name="TItem">Type of the items.</typeparam>
            <param name="values">Values to use to create the <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/>.</param>
            <returns>Returns the <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/> items.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.Merge(FluentUI.Blazor.Community.Components.IPathBarItem,System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.IPathBarItem})">
            <summary>
            Merge the specified <paramref name="items"/> into the <paramref name="root"/>.
            </summary>
            <param name="root">Root to use to merge items.</param>
            <param name="items">Items to merge.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.Find(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.IPathBarItem},System.String,System.Boolean)">
            <summary>
            Finds the item inside <paramref name="items"/> by its <paramref name="id"/>.
            </summary>
            <param name="items">Items to use for search.</param>
            <param name="id">Id to find.</param>
            <param name="removePrefix">Value indicating if the prefix must be removed.</param>
            <returns>Returns the item when found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.GetAllParts(FluentUI.Blazor.Community.Components.IPathBarItem,System.String[])">
            <summary>
            Gets all the parts from the specified <paramref name="root"/> matching the specified <paramref name="segments"/>.
            </summary>
            <param name="root">Root to use to build the path.</param>
            <param name="segments">Segments which represent the path.</param>
            <returns>Returns the <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/> which represents the parts of the path.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.GetIdentifier(System.String)">
            <summary>
            Gets the identifier of the specified <paramref name="value"/>.
            </summary>
            <param name="value">Identifier of the item.</param>
            <returns>Returns the real identifier of the item.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.UpdateLabel(FluentUI.Blazor.Community.Components.IPathBarItem,System.String,System.String)">
            <summary>
            Updates the label of the item with the specified <paramref name="id"/>.
            </summary>
            <param name="rootPath">Item where to begin the search.</param>
            <param name="id">Identifier of the id.</param>
            <param name="newLabel"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.GetPath(FluentUI.Blazor.Community.Components.IPathBarItem)">
            <summary>
            Gets the full path of the specified <paramref name="value"/>.
            </summary>
            <param name="value">Last item of the bar.</param>
            <returns>Returns the full path of the specified <paramref name="value" />.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PathBarItemComparer">
            <summary>
            Represents the comparer to compare two instance of <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/> together.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItemComparer.Default">
            <summary>
            Gets the default comparer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemComparer.Compare(FluentUI.Blazor.Community.Components.IPathBarItem,FluentUI.Blazor.Community.Components.IPathBarItem)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer">
            <summary>
            Represents a comparer for <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/> instances.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer"/> class from being created.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer.Default">
            <summary>
            Gets the default instance of the <see cref="T:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer"/>.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer.Equals(FluentUI.Blazor.Community.Components.IPathBarItem,FluentUI.Blazor.Community.Components.IPathBarItem)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer.GetHashCode(FluentUI.Blazor.Community.Components.IPathBarItem)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.BorderRadius">
            <summary>
            Represents the border radius options for a picture component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.BorderRadius.None">
            <summary>
            No radius applied.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.BorderRadius.Circle">
            <summary>
            A circular radius applied, making the picture appear as a circle.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.BorderRadius.Square">
            <summary>
            A square radius applied, making the picture appear with sharp corners.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.BorderRadius.RoundSquare">
            <summary>
            A rounded square radius applied, making the picture appear with slightly rounded corners.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.BorderRadius.Custom">
            <summary>
            A custom radius applied, allowing for specific radius values to be set.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.BorderStyle">
            <summary>
            Represents the border style options for a picture component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.BorderStyle.None">
            <summary>
            No border applied.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.BorderStyle.Solid">
            <summary>
            A solid border applied.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.BorderStyle.Dashed">
            <summary>
            A dashed border applied.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.BorderStyle.Dotted">
            <summary>
            A dotted border applied.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.BorderStyle.Double">
            <summary>
            A double border applied.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FetchPriority">
            <summary>
            Represents the fetch priority options for a picture component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FetchPriority.Auto">
            <summary>
            Represents an automatic mode or setting, typically used to indicate that a value or behavior should be
            determined automatically based on context or default logic.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FetchPriority.High">
            <summary>
            Represents the high priority setting, which fetches the resource with high priority.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FetchPriority.Low">
            <summary>
            Represents the low priority setting, which fetches the resource with low priority.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxPicture">
            <summary>
            Represents a picture component with various customization options.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPicture._internalResponsiveSources">
            <summary>
            Represents the internal list of responsive image sources.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Source">
            <summary>
            Gets or sets the source URL of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.SourceSet">
            <summary>
            Gets or sets the source set for responsive images.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Preload">
            <summary>
            Gets or sets a value indicating whether to preload the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Loading">
            <summary>
            Gets or sets the loading behavior of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.FetchPriority">
            <summary>
            Gets or sets the fetch priority of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Format">
            <summary>
            Gets or sets the image format (e.g., "webp", "jpeg").
            </summary>
            <remarks>This is used for the image processing middleware.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Quality">
            <summary>
            Gets or sets the quality of the image (e.g., "80" for 80% quality).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Effects">
            <summary>
            Gets or sets the CSS filter effects to apply to the image (e.g., "grayscale(100%)", "blur(5px)").
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Shadow">
            <summary>
            Gets or sets the shadow effect for the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Width">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Height">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.BorderRadius">
            <summary>
            Gets or sets the border radius type of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.BorderRadiusValue">
            <summary>
            Gets or sets the custom border radius value when <see cref="P:FluentUI.Blazor.Community.Components.FluentCxPicture.BorderRadius"/> is set to <see cref="F:FluentUI.Blazor.Community.Components.BorderRadius.Custom"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.BorderStyle">
            <summary>
            Gets or sets the border style of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.BorderWidth">
            <summary>
            Gets or sets the border width of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.BorderColor">
            <summary>
            Gets or sets the border color of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.OverlayContent">
            <summary>
            Gets or sets the overlay content to be displayed over the picture.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.ObjectFit">
            <summary>
            Gets or sets how the image should be resized to fit its container.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Alt">
            <summary>
            Gets or sets the alt text for the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Title">
            <summary>
            Gets or sets the title for the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Caption">
            <summary>
            Gets or sets the caption for the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.Language">
            <summary>
            Gets or sets the language of the image for accessibility purposes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.ResponsiveContent">
            <summary>
            Gets or sets the responsive content to be rendered within the picture element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.InternalClass">
            <summary>
            Gets the internal CSS class for the picture component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPicture.InternalStyle">
            <summary>
            Gets the internal style for the picture component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPicture.AddSource(FluentUI.Blazor.Community.Components.ResponsiveImage)">
            <summary>
            Adds a responsive image source to the internal list.
            </summary>
            <param name="source">Source to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPicture.RemoveSource(FluentUI.Blazor.Community.Components.ResponsiveImage)">
            <summary>
            Removes a responsive image source from the internal list.
            </summary>
            <param name="source">Source to remove.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LoadingBehavior">
            <summary>
            Represents the loading behavior options for a picture component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoadingBehavior.Auto">
            <summary>
            Represents an automatic mode, typically allowing the browser to decide the best loading strategy based on context.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoadingBehavior.Lazy">
            <summary>
            Represents a lazy loading strategy, where the image is loaded only when it is about to enter the viewport.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LoadingBehavior.Eager">
            <summary>
            Represents an eager loading strategy, where the image is loaded immediately, regardless of its position in the viewport.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ObjectFit">
            <summary>
            Represents the object fit options for a picture component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObjectFit.None">
            <summary>
            The default value, which means no specific object fit behavior is applied.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObjectFit.Fill">
            <summary>
            Fills the entire container, potentially cropping the image if its aspect ratio differs from that of the container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObjectFit.Cover">
            <summary>
            Covers the entire container while maintaining the image's aspect ratio. This may result in some parts of the image being cropped.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObjectFit.Contain">
            <summary>
            Contains the image within the container while maintaining its aspect ratio. This may result in empty space (letterboxing) if the aspect ratios differ.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObjectFit.ScaleDown">
            <summary>
            Reduces the size or scale of the object by a specified factor.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PictureOverlay">
            <summary>
            Represents an overlay component that can be positioned over a picture.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PictureOverlay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.PictureOverlay"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PictureOverlay.Position">
            <summary>
            Gets or sets the CSS class for the overlay component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PictureOverlay.ChildContent">
            <summary>
            Gets or sets the content to be displayed within the overlay.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PictureOverlay.InternalCss">
            <summary>
            Gets the internal CSS classes for the overlay component.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PictureOverlayPosition">
            <summary>
            Represents the position options for a picture overlay component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PictureOverlayPosition.TopLeft">
            <summary>
            The overlay is positioned at the top-left corner of the picture.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PictureOverlayPosition.TopCenter">
            <summary>
            The overlay is positioned at the top-center of the picture.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PictureOverlayPosition.TopRight">
            <summary>
            The overlay is positioned at the top-right corner of the picture.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PictureOverlayPosition.MiddleLeft">
            <summary>
            The overlay is positioned at the middle-left of the picture.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PictureOverlayPosition.MiddleCenter">
            <summary>
            The overlay is positioned at the center of the picture.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PictureOverlayPosition.MiddleRight">
            <summary>
            The overlay is positioned at the middle-right of the picture.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PictureOverlayPosition.BottomLeft">
            <summary>
            The overlay is positioned at the bottom-left corner of the picture.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PictureOverlayPosition.BottomCenter">
            <summary>
            The overlay is positioned at the bottom-center of the picture.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PictureOverlayPosition.BottomRight">
            <summary>
            The overlay is positioned at the bottom-right corner of the picture.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResponsiveImage">
            <summary>
            Represents a responsive image component.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Shadow">
            <summary>
            Represents a shadow effect with customizable properties such as offset, blur radius, spread radius, and color.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Shadow.OffsetX">
            <summary>
            Gets or sets the horizontal offset of the shadow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Shadow.OffsetY">
            <summary>
            Gets or sets the vertical offset of the shadow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Shadow.BlurRadius">
            <summary>
            Gets or sets the blur radius of the shadow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Shadow.SpreadRadius">
            <summary>
            Gets or sets the spread radius of the shadow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Shadow.Color">
            <summary>
            Gets or sets the color of the shadow.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Shadow.ToCss">
            <summary>
            Returns the CSS representation of the shadow.
            </summary>
            <returns>Returns the CSS representation of the shadow.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxResizer">
            <summary>
            Represents a resizer component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxResizer._module">
            <summary>
            Represents the javascript module instance to use for resizing the component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxResizer.JavaScriptFile">
            <summary>
            Represents the javascript file to use for resizing the component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxResizer._dotNetReferenceResizer">
            <summary>
            Represents the reference of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxResizer"/> inside the javascript functions.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxResizer._resetInitialization">
            <summary>
            Flag indicating if we need to reset the initialization of the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxResizer"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.IsResizeEnabled">
            <summary>
            Gets or set a value indicating if the resize is enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.OnResized">
            <summary>
            Gets or sets an event callback which occurs when a resize operation is performed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.JSRuntime">
            <summary>
            Gets or sets the JSRuntime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.LocalizationDirection">
            <summary>
            Gets or sets the reading direction of the objects in the UI.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.ResizeHandlers">
            <summary>
            Gets the resized handler to use regarding the reading direction.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.SpanGridId">
            <summary>
            Gets or sets the id of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.OnTapped">
            <summary>
            Gets or sets an event callback when the component is tapped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.OnDoubleTapped">
            <summary>
            Gets or sets an event callback when the component is double tapped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.InternalClass">
            <summary>
            Gets the internal class the component use.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.InternalStyle">
            <summary>
            Gets the internal style the component use.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.OnTappedAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Occurs when the component is tapped.
            </summary>
            <param name="e">Event args which contains information about the mouse.</param>
            <returns>Returns a task which invokes <see cref="P:FluentUI.Blazor.Community.Components.FluentCxResizer.OnTapped"/> when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.OnDoubleTappedAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Occurs when the component is double tapped.
            </summary>
            <param name="e">Event args which contains information about the mouse.</param>
            <returns>Returns a task which invokes <see cref="P:FluentUI.Blazor.Community.Components.FluentCxResizer.OnDoubleTapped"/> when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.Resized(FluentUI.Blazor.Community.Components.ResizedEventArgs)">
            <summary>
            Occurs when the javascript completes the resize.
            </summary>
            <param name="e">Event args which contains the data of the resize.</param>
            <returns>Returns a task which invokes <see cref="P:FluentUI.Blazor.Community.Components.FluentCxResizer.OnResized"/> when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResizedEventArgs">
            <summary>
            Represents the event args when a component is resized.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizedEventArgs.Id">
            <summary>
            Gets or sets the identifier of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizedEventArgs.Orientation">
            <summary>
            Gets or sets the orientation of the resized.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizedEventArgs.OriginalSize">
            <summary>
            Gets or sets the original size of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizedEventArgs.NewSize">
            <summary>
            Gets or sets the new size of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizedEventArgs.ColumnSpan">
            <summary>
            Gets or sets the column span of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizedEventArgs.RowSpan">
            <summary>
            Gets or sets the row span of the component.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResizerHandler">
            <summary>
            Represents the handler for the resizer component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResizerHandler.Horizontally">
            <summary>
            Resizes the item horizontally.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResizerHandler.Vertically">
            <summary>
            Resizes the item vertically.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResizerHandler.Both">
            <summary>
            Resizes the item vertically and horizontally.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResizerHelper">
            <summary>
            Represents an helper for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxResizer"/> components.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResizerHelper._ltrResize">
            <summary>
            Represents the resize handler for left to right direction.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResizerHelper._rtlResize">
            <summary>
            Represents the resize handlers for the right to left direction.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ResizerHelper.GetFromLocalizationDirection(Microsoft.FluentUI.AspNetCore.Components.LocalizationDirection)">
            <summary>
            Gets the resize handlers from the specified <paramref name="localizationDirection"/>.
            </summary>
            <param name="localizationDirection">Direction used by the app.</param>
            <returns>Returns the <see cref="T:System.Collections.Generic.Dictionary`2"/> of the resize handler to use.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.EraserShape">
            <summary>
            Specifies the shape of an eraser used in drawing or editing operations in the signature component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EraserShape.Circle">
            <summary>
            Represents a geometric circle defined by its radius.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EraserShape.Square">
            <summary>
            Represents a geometric square with equal-length sides.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GridDisplayMode">
            <summary>
            Specifies the display mode for a grid, determining how the grid is visually rendered.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GridDisplayMode.None">
            <summary>
            No grid is displayed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GridDisplayMode.Lines">
            <summary>
            A grid with lines is displayed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GridDisplayMode.Dots">
            <summary>
            A grid with dots is displayed.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LineCap">
            <summary>
            Represents the style of the endpoints of a line.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LineCap.Butt">
            <summary>
            Represents a flat edge at the end of the line.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LineCap.Round">
            <summary>
            Represents a rounded edge at the end of the line.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LineCap.Square">
            <summary>
            Represents a square edge at the end of the line.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LineJoin">
            <summary>
            Specifies the shape to be used at the join between two connected lines.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LineJoin.Miter">
            <summary>
            Represents a sharp corner or a pointed join between two lines.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LineJoin.Round">
            <summary>
            Represents a rounded join between two lines.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LineJoin.Bevel">
            <summary>
            Represents a beveled join, which creates a flattened corner between two lines.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureImageFormat">
            <summary>
            Represents the different image formats that can be used when exporting a signature from the Signature component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Bmp">
            <summary>
            Represents the BMP (Bitmap) image format.
            </summary>
            <remarks>The BMP format is a widely used raster graphics image file format that stores bitmap digital
            images. It supports various color depths and compression methods.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Png">
            <summary>
            Represents the Portable Network Graphics (PNG) image format.
            </summary>
            <remarks>PNG is a raster-graphics file format that supports lossless data compression. It is commonly
            used for web graphics and supports transparency.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Jpeg">
            <summary>
            Represents a JPEG image format.
            </summary>
            <remarks>This class or enumeration is used to identify or work with JPEG image files,  which are
            commonly used for storing and transmitting photographic images.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Webp">
            <summary>
            Represents the WebP image format.
            </summary>
            <remarks>WebP is a modern image format that provides superior lossless and lossy compression for
            images on the web. It is designed to reduce image file sizes while maintaining high visual quality.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Gif">
            <summary>
            Represents an animated image in the Graphics Interchange Format (GIF).
            </summary>
            <remarks>This class provides functionality for working with GIF images, including accessing frames,
            metadata, and playback properties. It can be used to load, manipulate, and display GIF animations.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Svg">
            <summary>
            Represents an SVG (Scalable Vector Graphics) element, which is a vector-based image format  for defining
            graphics using XML.
            </summary>
            <remarks>This class provides functionality for working with SVG elements, including creating, 
            manipulating, and rendering SVG content. SVG is widely used for scalable and resolution-independent  graphics in
            web and application development.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Pdf">
            <summary>
            Represents a PDF (Portable Document Format) document, which is a file format used to present and exchange.
            </summary>
            <remarks>PDF documents are widely used for sharing and printing documents while preserving their formatting.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.WatermarkVerticalAlignment">
            <summary>
            Represents the vertical alignment options for the watermark in the signature component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.WatermarkVerticalAlignment.Start">
            <summary>
            The watermark is aligned to the top of the signature area.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.WatermarkVerticalAlignment.Middle">
            <summary>
            The watermark is centered vertically within the signature area.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.WatermarkVerticalAlignment.End">
            <summary>
            The watermark is aligned to the bottom of the signature area.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxSignature">
            <summary>
            Represents a signature component that allows users to draw and manage signatures with various options and features.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSignature._signature">
            <summary>
            Rerpresents the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.DialogService">
            <summary>
            Gets or sets the dialog service for displaying dialogs and panels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.Options">
            <summary>
            Gets or sets the signature options.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.MenuOptions">
            <summary>
            Gets or sets the menu options.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.Labels">
            <summary>
            Gets or sets the labels for the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.IsMobile">
            <summary>
            Gets or sets a value indicating whether the component is being rendered on a mobile device.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.ExportCompleted">
            <summary>
            Gets or sets the event callback that is invoked when the export operation is completed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.SignatureStyle">
            <summary>
            Gets the css for the signature area.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnExportClickedAsync">
            <summary>
            Displays the export settings panel to the user and allows them to configure and confirm export options.
            </summary>
            <remarks>This method asynchronously opens a dialog panel for exporting signatures. The panel includes
            options  for configuring export settings, as well as primary and secondary actions for confirming or canceling 
            the operation. The dialog is aligned to the right side of the screen.</remarks>
            <returns>Returns a task which displays the export settings panel when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnPenSettingsClickedAsync">
            <summary>
            Displays the pen settings panel to the user and allows them to configure and confirm pen options.
            </summary>
            <remarks>This method asynchronously opens a dialog panel for configuring pen options,
            as well as primary and secondary actions for confirming or canceling 
            the operation. The dialog is aligned to the right side of the screen.</remarks>
            <returns>Returns a task which displays the pen settings panel when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnEraserSettingsClickedAsync">
            <summary>
            Displays the eraser settings panel to the user and allows them to configure
             and confirm eraser options.
            </summary>
            <remarks>This method asynchronously opens a dialog panel for configuring eraser options,
            as well as primary and secondary actions for confirming or canceling 
            the operation. The dialog is aligned to the right side of the screen.</remarks>
            <returns>Returns a task which displays the pen settings panel when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnGridSettingsClickedAsync">
            <summary>
            Displays the grid settings panel to the user and allows them to configure
             and confirm grid options.
            </summary>
            <remarks>This method asynchronously opens a dialog panel for configuring grid options,
            as well as primary and secondary actions for confirming or canceling 
            the operation. The dialog is aligned to the right side of the screen.</remarks>
            <returns>Returns a task which displays the grid settings panel when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnWatermarkSettingsClickedAsync">
            <summary>
            Displays the watermark settings panel to the user and allows them to configure
             and confirm watermark options.
            </summary>
            <remarks>This method asynchronously opens a dialog panel for configuring watermark options,
            as well as primary and secondary actions for confirming or canceling 
            the operation. The dialog is aligned to the right side of the screen.</remarks>
            <returns>Returns a task which displays the watermark settings panel when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnUndoClickedAsync">
            <summary>
            Reverts the most recent action performed on the signature, if available.
            </summary>
            <remarks>This method performs an undo operation on the signature if a signature instance is present. 
            If no signature is available, the method does nothing.</remarks>
            <returns>A task that represents the asynchronous undo operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnRedoClickedAsync">
            <summary>
            Handles the redo action by invoking the redo operation on the associated signature, if available.
            </summary>
            <remarks>This method performs the redo operation asynchronously. If no signature is associated, the
            method does nothing.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnPenClickedAsync">
            <summary>
            Handles the event triggered when the pen is clicked, ensuring the signature control exits erase mode.
            </summary>
            <remarks>This method sets the signature control to non-erase mode if the signature control is
            initialized.</remarks>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnEraserClickedAsync">
            <summary>
            Enables erase mode for the signature component asynchronously.
            </summary>
            <remarks>This method sets the signature component to erase mode, allowing the user to erase content. 
            If the signature component is not initialized, the method does nothing.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnClearClickedAsync">
            <summary>
            Clears the signature if one is currently present.
            </summary>
            <remarks>This method asynchronously clears the signature data by invoking the <see cref="M:FluentUI.Blazor.Community.Components.Signature.ClearAsync"/>
            method  on the signature object. If no signature is present, the method does nothing.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnResizeAsync(FluentUI.Blazor.Community.Components.ResizeEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureGridLayer">
            <summary>
            Represents a grid layer component for displaying a grid on a signature component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureGridLayer._gridLayerElement">
            <summary>
            Reference to the grid layer HTML element.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureGridLayer._module">
            <summary>
            Represents the JavaScript module for the grid layer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureGridLayer._width">
            <summary>
            Represents the width of the grid layer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureGridLayer._height">
            <summary>
            Represents the height of the grid layer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureGridLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SignatureGridLayer"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridLayer.JSRuntime">
            <summary>
            Gets or sets the JavaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridLayer.Options">
            <summary>
            Get or sets the grid options for the grid layer.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridLayer.InternalClass">
            <summary>
            Gets the internal CSS class for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureGridLayer.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureGridLayer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureGridLayer.UpdateViewboxAsync(System.Int32,System.Int32)">
            <summary>
            Updates the viewbox of the grid layer based on the provided width and height.
            </summary>
            <param name="width">Width of the component.</param>
            <param name="height">Height of the component.</param>
            <returns>Returns a task which updates the viewbox when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureGridLayer.RefreshAsync">
            <summary>
            Refreshes the grid layer by invoking the JavaScript function to update the grid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureInkLayer">
            <summary>
            Represents an ink layer component for capturing and displaying user signatures.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureInkLayer._inkLayerElement">
            <summary>
            Reference to the grid layer HTML element.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureInkLayer._module">
            <summary>
            Represents the JavaScript module for the ink layer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureInkLayer._width">
            <summary>
            Represents the width of the ink layer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureInkLayer._height">
            <summary>
            Represents the height of the ink layer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SignatureInkLayer"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureInkLayer.JSRuntime">
            <summary>
            Gets or sets the JavaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureInkLayer.PenOptions">
            <summary>
            Get or sets the pen options for the ink layer.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureInkLayer.EraserOptions">
            <summary>
            Get or sets the eraser options for the ink layer.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureInkLayer.InternalClass">
            <summary>
            Gets the internal CSS class for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.UpdateViewboxAsync(System.Int32,System.Int32)">
            <summary>
            Updates the viewbox of the grid layer based on the provided width and height.
            </summary>
            <param name="width">Width of the component.</param>
            <param name="height">Height of the component.</param>
            <returns>Returns a task which updates the viewbox when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.ClearAsync">
            <summary>
            Clears the current signature from the ink layer.
            </summary>
            <returns>Returns a task which clear the ink layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.UndoAsync">
            <summary>
            Undoes the last action on the ink layer.
            </summary>
            <returns>Returns a task which undo the last action on the ink layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.RedoAsync">
            <summary>
            Redos the last undone action on the ink layer.
            </summary>
            <returns>Returns a task which redo the last action on the ink layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.SetEraseModeAsync(System.Boolean)">
            <summary>
            Sets the erase mode on the ink layer.
            </summary>
            <param name="enabled">Value indicating if the erase mode is enabled.</param>
            <returns>Returns a task which set the erase mode when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.RefreshAsync">
            <summary>
            Refreshes the ink layer with the current pen options.
            </summary>
            <returns>Returns a task which updates the pen options.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureOverlayLayer">
            <summary>
            Represents an overlay layer component for capturing and displaying user signatures.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureOverlayLayer._overlayLayerElement">
            <summary>
            Reference to the grid layer HTML element.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureOverlayLayer._module">
            <summary>
            Represents the JavaScript module for the ink layer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureOverlayLayer._width">
            <summary>
            Represents the width of the ink layer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureOverlayLayer._height">
            <summary>
            Represents the height of the ink layer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SignatureOverlayLayer"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.JSRuntime">
            <summary>
            Gets or sets the JavaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.Options">
            <summary>
            Get or sets the pen options for the ink layer.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.InternalClass">
            <summary>
            Gets the internal CSS class for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.UpdateViewboxAsync(System.Int32,System.Int32)">
            <summary>
            Updates the viewbox of the grid layer based on the provided width and height.
            </summary>
            <param name="width">Width of the component.</param>
            <param name="height">Height of the component.</param>
            <returns>Returns a task which updates the viewbox when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.RefreshAsync">
            <summary>
            Refreshes the overlay layer by invoking the JavaScript function to update the overlay with the current options.
            </summary>
            <returns>Returns a task which updates the overlayer when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureGridOptions">
            <summary>
            Represents the grid options for the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.DisplayMode">
            <summary>
            Gets or sets the display mode of the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.CellSize">
            <summary>
            Gets or sets the size of each cell in the grid, in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.Color">
            <summary>
            Gets or sets the color of the grid lines or dots.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.Opacity">
            <summary>
            Gets or sets the opacity of the grid, ranging from 0.0 (fully transparent) to 1.0 (fully opaque).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.BoldEvery">
            <summary>
            Gets or sets how often to bold the grid lines. For example, a value of 5 will bold every 5th line.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.StrokeWidth">
            <summary>
            Gets or sets the width of the grid lines, in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.DashArray">
            <summary>
            Gets or sets the dash array for the grid lines, allowing for dashed or dotted lines.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.ShowAxes">
            <summary>
            Gets or sets a value indicating whether to show the X and Y axes in the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.Margin">
            <summary>
            Gets or sets the margin around the grid, in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.PointRadius">
            <summary>
            Gets or sets the radius of the points when the display mode is set to dots, in pixels.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureGridOptions.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MenuOptions">
            <summary>
            Represents the options for displaying the menu in the Signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.IsVisible">
            <summary>
            Gets or sets a value indicating whether the menu is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.ShowExport">
            <summary>
            Gets or sets a value indicating whether the export button is shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.ShowUndo">
            <summary>
            Gets or sets a value indicating whether the undo button is shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.ShowRedo">
            <summary>
            Gets or sets a value indicating whether the redo button is shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.ShowClear">
            <summary>
            Gets or sets a value indicating whether the clear button is shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.ShowEraser">
            <summary>
            Gets or sets a value indicating whether the eraser button is shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.ShowCustomOptions">
            <summary>
            Gets or sets a value indicating whether the custom options button is shown.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ShadowOptions">
            <summary>
            Represents configuration options for applying a shadow effect.
            </summary>
            <remarks>This class provides properties to control the appearance of a shadow, including its visibility, 
            color, blur radius, and offsets. These options can be used to customize the shadow effect  for visual
            elements.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShadowOptions.Enabled">
            <summary>
            Gets or sets a value indicating whether the shadow effect is enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShadowOptions.Color">
            <summary>
            Gets or sets the color of the shadow. This can be any valid CSS color value, such as a hex code, RGB, or RGBA.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShadowOptions.Blur">
            <summary>
            Gets or sets the blur radius of the shadow. A higher value results in a more blurred shadow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShadowOptions.OffsetX">
            <summary>
            Gets or sets the horizontal offset of the shadow. Positive values move the shadow to the right, while negative values move it to the left.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShadowOptions.OffsetY">
            <summary>
            Gets or sets the vertical offset of the shadow. Positive values move the shadow down, while negative values move it up.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ShadowOptions.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureEraserOptions">
            <summary>
            Represents the eraser options for the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.Size">
            <summary>
            Gets or sets the size of the eraser in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.Shape">
            <summary>
            Gets or sets the shape of the eraser. Can be either Circle or Square.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.Opacity">
            <summary>
            Gets or sets the opacity of the eraser, ranging from 0.0 (fully transparent) to 1.0 (fully opaque).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.SoftEdges">
            <summary>
            Gets or sets a value indicating whether the eraser should have soft edges.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.Cursor">
            <summary>
            Gets or sets the cursor style when the eraser is active. This can be any valid CSS cursor value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.CursorCss">
            <summary>
            Gets the CSS representation of the cursor style.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.PartialErase">
            <summary>
            Gets or sets a value indicating whether the eraser performs a partial erase.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureEraserOptions.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureExportOptions">
            <summary>
            Represents the export options for the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureExportOptions.Format">
            <summary>
            Gets or sets the image format for exporting the signature. Default is PNG.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureExportOptions.Quality">
            <summary>
            Gets or sets the quality of the exported image, ranging from 0 to 100.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureExportOptions.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureOptions">
            <summary>
            Represents the configuration options for a signature component, including settings for the pen, eraser, grid, and
            watermark.
            </summary>
            <remarks>This class provides a collection of customizable options that control the behavior and appearance of
            a signature component. Use the properties to configure specific aspects such as the pen style, eraser functionality,
            grid layout, and watermark display.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOptions.Pen">
            <summary>
            Gets or sets the options for configuring the pen used in the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOptions.Eraser">
            <summary>
            Gets or sets the options for configuring the eraser used in the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOptions.Grid">
            <summary>
            Gets or sets the options for configuring the grid displayed in the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOptions.Watermark">
            <summary>
            Gets or sets the options for configuring the watermark displayed in the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOptions.Export">
            <summary>
            Gets or sets the options for configuring the export settings of the signature component.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignaturePenOptions">
            <summary>
            Represents the pen options for the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.Color">
            <summary>
            Gets or sets the color of the pen. This can be any valid CSS color value, such as a hex code, RGB, or RGBA.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.BaseWidth">
            <summary>
            Gets or sets the base width of the pen stroke in pixels. This is the default width when pressure sensitivity is not applied.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.DashArray">
            <summary>
            Gets or sets the minimum width of the pen stroke in pixels. This is the thinnest the stroke can be when pressure sensitivity is applied.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.PressureEnabled">
            <summary>
            Gets or sets a value indicating whether pressure sensitivity is enabled. When true, the stroke width will vary based on the pressure applied (if supported by the input device).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.Smoothing">
            <summary>
            Gets or sets a value indicating whether smoothing is applied to the pen strokes. When true, the strokes will be smoothed to reduce jitter and create a more natural appearance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.Opacity">
            <summary>
            Gets or sets the opacity of the pen strokes, ranging from 0.0 (fully transparent) to 1.0 (fully opaque).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.LineCap">
            <summary>
            Gets or sets the shape of the ends of the pen strokes. Can be either Butt, Round, or Square.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.LineJoin">
            <summary>
            Gets or sets the shape of the corners where two pen strokes meet. Can be either Bevel, Round, or Miter.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.Shadow">
            <summary>
            Gets or sets the shadow options for the pen strokes.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignaturePenOptions.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions">
            <summary>
            Represents the watermark options for the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Text">
            <summary>
            Gets or sets the text to be displayed as the watermark. If both Text and ImageUrl are provided, the image will take precedence.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.ImageUrl">
            <summary>
            Gets or sets the URL of the image to be used as the watermark. If both Text and ImageUrl are provided, the image will take precedence.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Opacity">
            <summary>
            Gets or sets the opacity of the watermark, ranging from 0.0 (fully transparent) to 1.0 (fully opaque).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.FontFamily">
            <summary>
            Gets or sets the font family for the watermark text. This can be any valid CSS font-family value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.FontSize">
            <summary>
            Gets or sets the font size for the watermark text, in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.FontWeight">
            <summary>
            Gets or sets the font weight for the watermark text. This can be any valid CSS font-weight value, such as "normal", "bold", or a numeric value like "400" or "700".
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Color">
            <summary>
            Gets or sets the color of the watermark text. This can be any valid CSS color value, such as a hex code, RGB, or RGBA.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Rotation">
            <summary>
            Gets or sets the rotation angle of the watermark text or image, in degrees. Positive values rotate clockwise, while negative values rotate counterclockwise.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Position">
            <summary>
            Gets or sets the position of the watermark within the signature area, represented as a Point with X and Y coordinates (in percentage). The default position is centered at (50, 50).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Repeat">
            <summary>
            Gets or sets a value indicating whether the watermark should be repeated across the signature area. If true, the watermark will be tiled; if false, it will appear only once at the specified position.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.TextAlign">
            <summary>
            Gets or sets the vertical alignment of the watermark text. This can be "start", "middle", or "end".
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.LetterSpacing">
            <summary>
            Gets or sets the letter spacing for the watermark text, in pixels.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureEraserPanel">
            <summary>
            Represents a panel for erasing a signature with configurable content options.
            </summary>
            <remarks>This component allows users to specify the content options for erasing a signature. The <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureEraserPanel.Content"/> property can be used to configure the export settings.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserPanel.Content">
            <summary>
            Gets or sets the content options for erasing a signature.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureExportPanel">
            <summary>
            Represents a panel for exporting a signature with configurable content options.
            </summary>
            <remarks>This component allows users to specify the content options for exporting a signature. The <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureExportPanel.Content"/> property can be used to configure the export settings.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureExportPanel.Content">
            <summary>
            Gets or sets the content options for exporting a signature.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureGridPanel">
            <summary>
            Represents a panel for creating a grid on a signature with configurable content options.
            </summary>
            <remarks>This component allows users to specify the content options for creating a grid on a signature. The <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureGridPanel.Content"/> property can be used to configure the grid settings.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridPanel.Content">
            <summary>
            Gets or sets the content options for exporting a signature.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignaturePenPanel">
            <summary>
            Represents a panel for configuring the signature pen settings.
            </summary>
            <remarks>This component allows users to customize the appearance and behavior of the signature pen by setting
            various options through the <see cref="P:FluentUI.Blazor.Community.Components.SignaturePenPanel.Content"/> property.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenPanel.Content">
            <summary>
            Gets or sets the options for configuring the signature pen.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignaturePenPanel.GetFormat(System.String,System.Double)">
            <summary>
            Gets the format string for displaying value in the good format.
            </summary>
            <param name="format">Format of the value.</param>
            <param name="value">Value to format.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureWatermarkPanel">
            <summary>
            Represents a panel for watermarking a signature with configurable content options.
            </summary>
            <remarks>This component allows users to specify the content options for watermarking a signature. The <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureWatermarkPanel.Content"/> property can be used to configure the watermark settings.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkPanel.Content">
            <summary>
            Gets or sets the content options for creating a watermark on a signature.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureWatermarkPanel.GetFormat(System.String,System.Double)">
            <summary>
            Gets the format string for displaying value in the good format.
            </summary>
            <param name="format">Format of the value.</param>
            <param name="value">Value to format.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Signature">
            <summary>
            Represents a signature component that allows users to draw and capture signatures.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Signature._module">
            <summary>
            Represents the JavaScript module reference used for interacting with JavaScript functions.
            </summary>
            <remarks>This field holds a reference to a JavaScript module loaded via the JavaScript interop system.
            It may be <see langword="null"/> if the module has not been initialized or has been disposed.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Signature._gridLayer">
            <summary>
            Represents the grid layer component used for displaying a grid background.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Signature._inkLayer">
            <summary>
            Represents the ink layer component used for capturing and displaying user-drawn signatures.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Signature._overlayLayer">
            <summary>
            Represents the overlay layer component used for displaying additional overlays on top of the signature.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.Signature"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Signature.JS">
            <summary>
            Gets or sets the JavaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Signature.Options">
            <summary>
            Gets or sets the signature options for configuring the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Signature.InternalClass">
            <summary>
            Gets the internal CSS class for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.ExportSvgAsync">
            <summary>
            Exports the current signature as an SVG string.
            </summary>
            <returns>Returns a task which exports the svg as a string when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.ClearAsync">
            <summary>
            Clears the current signature from the ink layer.
            </summary>
            <returns>Returns a task which clear the signature.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.UndoAsync">
            <summary>
            Undoes the last action on the ink layer.
            </summary>
            <returns>Returns a task which undo the last action on the ink layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.RedoAsync">
            <summary>
            Redos the last undone action on the ink layer.
            </summary>
            <returns>Returns a task which redo the last action on the ink layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.SetEraseModeAsync(System.Boolean)">
            <summary>
            Sets the erase mode on the ink layer.
            </summary>
            <param name="enabled">Value indicating if the erase mode is enabled.</param>
            <returns>Returns a task which set the erase mode when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.RefreshGridAsync">
            <summary>
            Refreshes the grid layer to reflect any changes in options or state.
            </summary>
            <returns>Returns a task which refreshs the grid when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.RefreshInkAsync">
            <summary>
            Refreshes the ink layer to reflect any changes in options or state.
            </summary>
            <returns>Returns a task which refreshs the ink layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.RefreshOverlayAsync">
            <summary>
            Refreshes the overlay layer to reflect any changes in options or state.
            </summary>
            <returns>Returns a task which refreshs the overlay layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.OnResizedAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureExporter">
            <summary>
            Exports a signature in the specified format, returning the file name, content type, and binary data.    
            </summary>
            <remarks>The export format is determined by the <see cref="P:FluentUI.Blazor.Community.Components.SignatureExportOptions.Format"/> property: <list
            type="bullet"> <item><description>If the format is <see cref="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Svg"/>, the method returns the
            SVG data as-is.</description></item> <item><description>If the format is <see cref="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Pdf"/>, the
            SVG is converted to a PDF document.</description></item> <item><description>For other image formats (e.g., PNG,
            JPEG), the SVG is converted to the specified format using the provided quality setting.</description></item>
            </list></remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureExporter.Export(FluentUI.Blazor.Community.Components.SignatureExportOptions,System.String)">
            <summary>
            Exports a signature image in the specified format.
            </summary>
            <remarks>The method supports exporting the signature in various formats, including SVG, PDF, and
            common image formats such as PNG, JPEG, BMP, GIF, TIFF, and WebP. The content type and file extension are
            determined based on the selected format. For SVG format, the method directly returns the input SVG data. For PDF
            and other image formats, the method converts the SVG data using the appropriate conversion logic.</remarks>
            <param name="options">The export options, including the desired image format and quality settings.</param>
            <param name="svg">The SVG representation of the signature to be exported. Cannot be null or empty.</param>
            <returns>A tuple containing the filename, content type, and binary data of the exported signature image. The filename
            includes the appropriate file extension based on the selected format.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureExportEventArgs">
            <summary>
            Provides data for an event that occurs when a signature is exported.
            </summary>
            <remarks>This class contains information about the exported signature, including the file name, content type,
            and binary data.</remarks>
            <param name="FileName">The name of the file to which the signature is exported. This value cannot be null or empty.</param>
            <param name="ContentType">The MIME type of the exported signature file, such as "application/pdf" or "image/png".</param>
            <param name="Data">The binary data of the exported signature. This value cannot be null.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureExportEventArgs.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Provides data for an event that occurs when a signature is exported.
            </summary>
            <remarks>This class contains information about the exported signature, including the file name, content type,
            and binary data.</remarks>
            <param name="FileName">The name of the file to which the signature is exported. This value cannot be null or empty.</param>
            <param name="ContentType">The MIME type of the exported signature file, such as "application/pdf" or "image/png".</param>
            <param name="Data">The binary data of the exported signature. This value cannot be null.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureExportEventArgs.FileName">
            <summary>The name of the file to which the signature is exported. This value cannot be null or empty.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureExportEventArgs.ContentType">
            <summary>The MIME type of the exported signature file, such as "application/pdf" or "image/png".</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureExportEventArgs.Data">
            <summary>The binary data of the exported signature. This value cannot be null.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureLabels">
            <summary>
            Represents a collection of localized labels used for UI elements in a signature-related application.
            </summary>
            <remarks>This record provides a set of default labels in English, as well as predefined localized labels for
            other languages, such as French. The labels can be customized by setting the properties to desired values.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Default">
            <summary>
            Gets the default instance of <see cref="T:FluentUI.Blazor.Community.Components.SignatureLabels"/> with labels in English.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.French">
            <summary>
            Gets an instance of <see cref="T:FluentUI.Blazor.Community.Components.SignatureLabels"/> with labels localized in French.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Export">
            <summary>
            Gets or sets the label for the export button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Undo">
            <summary>
            Gets or sets the label for the undo button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Redo">
            <summary>
            Gets or sets the label for the redo button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Clear">
            <summary>
            Gets or sets the label for the clear button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Eraser">
            <summary>
            Gets or sets the label for the eraser button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Pen">
            <summary>
            Gets or sets the label for the pen button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Settings">
            <summary>
            Gets or sets the label for the settings button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.ExportSettings">
            <summary>
            Gets or sets the label for the export settings section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Cancel">
            <summary>
            Gets or sets the label for the cancel button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.PenSettings">
            <summary>
            Gets or sets the label for the pen settings section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserSettings">
            <summary>
            Gets or sets the label for the eraser settings section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridSettings">
            <summary>
            Gets or sets the label for the grid settings section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkSettings">
            <summary>
            Gets or sets the label for the watermark settings section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Apply">
            <summary>
            Gets or sets the label for the apply.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.ExportFormatLabel">
            <summary>
            Gets or sets the label for the export format selection.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.ExportQualityLabel">
            <summary>
            Gets or sets the label for the export quality selection.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.BackgroundGridColorLabel">
            <summary>
            Gets or sets the label for the background grid color.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridColorLineLabel">
            <summary>
            Gets or sets the label for the grid line color.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridCellSizeLabel">
            <summary>
            Gets or sets the label for the grid cell size.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridOpacityLabel">
            <summary>
            Gets or sets the label for the grid opacity.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.BoldEveryLabel">
            <summary>
            Gets or sets the label for the Nth line bolding option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.StrokeWidthLabel">
            <summary>
            Gets or sets the label for the width of the stroke.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.MarginLabel">
            <summary>
            Gets or sets the label for the margin.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.PointRadiusLabel">
            <summary>
            Gets or sets the label for the point radius.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.ShowAxesLabel">
            <summary>
            Gets or sets the label for the axes visibility option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridDisplayModeLabel">
            <summary>
            Gets or sets the label for the grid display mode option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridDisplayModeNoneLabel">
            <summary>
            Gets or sets the label for the grid display mode "None" option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridDisplayModeLinesLabel">
            <summary>
            Gets or sets the label for the grid display mode "Lines" option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridDisplayModeDotsLabel">
            <summary>
            Gets or sets the label for the grid display mode "Dots" option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserShapeLabel">
            <summary>
            Gets or sets the label for the eraser shape option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserShapeCircleLabel">
            <summary>
            Gets or sets the label for the eraser shape "Circle" option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserShapeSquareLabel">
            <summary>
            Gets or sets the label for the eraser shape "Square" option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserSizeLabel">
            <summary>
            Gets or sets the label for the eraser size option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserOpacityLabel">
            <summary>
            Gets or sets the label for the eraser opacity option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserSoftEdgeLabel">
            <summary>
            Gets or sets the label for the eraser soft edges option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserPartialEraseLabel">
            <summary>
            Gets or sets the label for the eraser partial erase option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.PreviewPenLabel">
            <summary>
            Gets or sets the label for the pen preview section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.PenColorLabel">
            <summary>
            Gets or sets the label for the pen color selection.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.PenOpacityLabel">
            <summary>
            Gets or sets the label for the pen opacity selection.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.PressureEnabledLabel">
            <summary>
            Gets or sets the label for the pressure sensitivity enable option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.SmoothingLabel">
            <summary>
            Gets or sets the label for the smoothing enable option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.ShadowEnabledLabel">
            <summary>
            Gets or sets the label for the shadow enable option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.ShadowColorLabel">
            <summary>
            Gets or sets the label for the shadow color option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkTextLabel">
            <summary>
            Gets or sets the label for the watermark text option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkColorLabel">
            <summary>
            Gets or sets the label for the watermark text color option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkFontSizeLabel">
            <summary>
            Gets or sets the label for the watermark font size option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkOpacityLabel">
            <summary>
            Gets or sets the label for the watermark opacity option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkRotationLabel">
            <summary>
            Gets or sets the label for the watermark rotation option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkLetterSpacingLabel">
            <summary>
            Gets or sets the label for the watermark letter spacing option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermakRepeatLabel">
            <summary>
            Gets or sets the label for the watermark repeat option.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureMenu">
            <summary>
            Represents the menu component for the signature component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureMenu._isMultiSettingsPopoverOpen">
            <summary>
            Value indicating whether the multi-settings popover is open.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureMenu._isPenActive">
            <summary>
            Value indicating whether the pen is active.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureMenu._renderLabel">
            <summary>
            Renders the label for a button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SignatureMenu"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.Options">
            <summary>
            Gets or sets the menu options.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.IsMobile">
            <summary>
            Gets or sets a value indicating whether the device is mobile.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.Labels">
            <summary>
            Gets or sets the labels for the menu buttons.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnUndoClicked">
            <summary>
            Gets or sets the callback for when the undo button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnRedoClicked">
            <summary>
            Gets or sets the callback for when the redo button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnClearClicked">
            <summary>
            Gets or sets the callback for when the clear button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnEraserClicked">
            <summary>
            Gets or sets the callback for when the eraser button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnPenClicked">
            <summary>
            Gets or sets the callback for when the pen button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnExportClicked">
            <summary>
            Gets or sets the callback for when the settings button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnPenSettingsClicked">
            <summary>
            Gets or sets the callback for when the pen settings button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnEraserSettingsClicked">
            <summary>
            Gets or sets the callback for when the eraser settings button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnGridSettingsClicked">
            <summary>
            Gets or sets the callback for when the grid settings button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnWatermarkSettingsClicked">
            <summary>
            Gets or sets the callback for when the watermark settings button is clicked.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnExportClickedAsync">
            <summary>
            Occurs when the export button is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnPenOrEraserClickedAsync">
            <summary>
            Occurs when the pen button is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnUndoClickedAsync">
            <summary>
            Occurs when the undo button is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnRedoClickedAsync">
            <summary>
            Occurs when the redo button is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnSettingsClicked">
            <summary>
            Occurs when the settings button is clicked.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnGridSettingsClickedAsync">
            <summary>
            Handles the event triggered when the grid settings button is clicked.
            </summary>
            <remarks>This method closes the multi-settings popover and invokes the <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnGridSettingsClicked"/> delegate if it has been assigned. Ensure that the delegate is set if additional
            actions are required when the grid settings button is clicked.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnWatermarkSettingsClickedAsync">
            <summary>
            Handles the event triggered when the watermark settings option is clicked.
            </summary>
            <remarks>This method closes the multi-settings popover and invokes the <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnWatermarkSettingsClicked"/> callback  if it has been assigned. Ensure that the callback is properly set
            to handle the event.</remarks>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnPenSettingsClickedAsync">
            <summary>
            Handles the event triggered when the pen settings button is clicked.
            </summary>
            <remarks>This method closes the multi-settings popover and invokes the <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnPenSettingsClicked"/> callback  if it has been assigned. Ensure that the callback is properly set to
            handle the event.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnEraserSettingsClickedAsync">
            <summary>
            Handles the event triggered when the eraser settings button is clicked.
            </summary>
            <remarks>This method closes the multi-settings popover and invokes the <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnEraserSettingsClicked"/> callback if it has been assigned. Ensure that the callback is properly set to
            handle the event.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnClearClickedAsync">
            <summary>
            Occurs when the clear button is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignaturePenPreviewer">
            <summary>
            Represents a previewer for the signature pen settings.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenPreviewer.Options">
            <summary>
            Gets or sets the options for configuring the signature pen.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial">
            <summary>
            Represents a sleek dial.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._isOpen">
            <summary>
            Value indicating if the dial is open.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._firstRender">
            <summary>
            Represents if it's the first render.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._correctRadialSettings">
            <summary>
            Represents the correct radial settings to position the items on the radial panel.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._preventDefault">
            <summary>
            Value indicating if the click is prevented.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._linearDirectionChanged">
            <summary>
            Value indicating if a direction change in linear mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._popup">
            <summary>
            Represents the popup.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._floatingButton">
            <summary>
            Represents the floating button.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._renderText">
            <summary>
            Represents the fragment to render text.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._module">
            <summary>
            Represents the javascript module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._dotNetObjectReference">
            <summary>
            Represents the reference of the current dot net object.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial.JavascriptFilename">
            <summary>
            Represents the javascript file.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._preventDefaultKeys">
            <summary>
            Represents the default keys to not prevent.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.ItemTemplate">
            <summary>
            Gets or sets the item template.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Mode">
            <summary>
            Gets or sets the rendering mode of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Position">
            <summary>
            Gets or sets the position of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Target">
            <summary>
            Gets or sets the target of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Disabled">
            <summary>
            Gets or sets if the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/> is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.CloseIcon">
            <summary>
            Gets or sets the icon to close the popup.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OpenIcon">
            <summary>
            Gets or sets the icon to open the popup.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OpensOnHover">
            <summary>
            Gets or sets if the popup opens on hover.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Text">
            <summary>
            Gets or sets the text of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Direction">
            <summary>
            Gets or sets the linear direction of the items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.ItemRendered">
            <summary>
            Gets or sets the callback when an item is rendered.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.IsVisibleChanged">
            <summary>
            Gets or sets the callback when the visibility has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Opened">
            <summary>
            Gets or sets the callback when the popup is opened.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Closed">
            <summary>
            Gets or sets the callback when the popup is closed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Opening">
            <summary>
            Gets or sets the callback when the popup is opening.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Closing">
            <summary>
            Gets or sets the callback when the popup is closing.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.IsModal">
            <summary>
            Gets or sets a value indicating if the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/> is modal.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.JSRuntime">
            <summary>
            Gets or sets the javascript runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.IsOpen">
            <summary>
            Gets if the popup is open.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.InternalItems">
            <summary>
            Gets the <see cref="T:FluentUI.Blazor.Community.Components.SleekDialItem"/> inside this instance of <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Viewer">
            <summary>
            Gets or sets the viewer of the dial.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.FocusedIndex">
            <summary>
            Gets or sets the focused index.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.RadialSettings">
            <summary>
            Gets or sets the settings of the radial menu.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.AnimationSettings">
            <summary>
            Gets or sets the settings of the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.StayOpen">
            <summary>
            Gets or sets a value indicating if the dial stay open when an item is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.HideMode">
            <summary>
            Gets or sets the hide mode of the dial.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.FloatingButtonId">
            <summary>
            Gets the identifier of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFloatingButton"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.InternalClass">
            <summary>
            Gets the internal css.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.CorrectRadialSettings">
            <summary>
            Represents the correct radial settings after correction inside the popup.
            </summary>
        </member>
        <member name="E:FluentUI.Blazor.Community.Components.FluentCxSleekDial.RadialSettingsChanged">
            <summary>
            Event raised when a radial settings has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.IsVisible">
            <summary>
            Gets a value indicating if the dial is visible.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OnClickAsync">
            <summary>
            Occurs on a click on the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFloatingButton"/>.
            </summary>
            <returns>Returns a task which show or hide the dial when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.ShowOrHidePopupAsync(System.Boolean)">
            <summary>
            Shows or hides the dial in an asynchronous way.
            </summary>
            <param name="isOpen">Value indicating if the dial is open or hide.</param>
            <returns>Returns a task which hides or shows the dial when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.ShowOrHidePopupInternalAsync(System.Boolean,System.Boolean)">
            <summary>
            Shows or hides the dial in an asynchronous way.
            </summary>
            <param name="isOpen">Value indicating if the dial is open or hide.</param>
            <param name="stayOpen">Value indicating if the dial stay open when the item is clicked.</param>
            <returns>Returns a task which shows or hides the popup when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OnKeyDownHandlerAsync(Microsoft.FluentUI.AspNetCore.Components.FluentKeyCodeEventArgs)">
            <summary>
            Occurs when a key is tapped.
            </summary>
            <param name="e">Event args associated to the method.</param>
            <returns>Returns a task which handles the pressed key when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.UpdatePopupPositionAsync">
            <summary>
            Update the position of the popup in an asynchronous way.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OnAnimationCompletedAsync(System.Boolean)">
            <summary>
            Occurs when an animation is completed.
            </summary>
            <param name="isOpen">Value indicating if the dial is shown or hidden.</param>
            <returns>Return a task which rerender the component when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.AddChild(FluentUI.Blazor.Community.Components.SleekDialItem)">
            <summary>
            Adds a child into the component.
            </summary>
            <param name="value">Item to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.RemoveChild(FluentUI.Blazor.Community.Components.SleekDialItem)">
            <summary>
            Removes a child from the component.
            </summary>
            <param name="value">Item to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OnCreatedAsync(FluentUI.Blazor.Community.Components.SleekDialItem)">
            <summary>
            Occurs when an item is created.
            </summary>
            <param name="value">Represents the created item.</param>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.ItemRendered"/> callback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.FocusAsync">
            <summary>
            Focus the selected index.
            </summary>
            <returns>Returns a task which focus the selected element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Refresh">
            <summary>
            Refreshes the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialAnimation">
            <summary>
            Represents the available animations for opening and closing the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialAnimation.None">
            <summary>
            None animation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialAnimation.Fade">
            <summary>
            Fade animation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialAnimation.FadeZoom">
            <summary>
            Fade and zoom animation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialAnimation.Zoom">
            <summary>
            Zoom animation.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialAnimationSettings">
            <summary>
            Represents the settings for an animation. 
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialAnimationSettings.Duration">
            <summary>
            Gets or sets the duration of the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialAnimationSettings.Delay">
            <summary>
            Gets or sets the delay of the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialAnimationSettings.Animation">
            <summary>
            Gets or sets the animation to play.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialHideMode">
            <summary>
            Represents the hide mode for a SleekDial component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialHideMode.None">
            <summary>
            SleekDial is always visible.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialHideMode.WhenEmpty">
            <summary>
            SleekDial is hidden when there are no items to display.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialHideMode.WhenNoVisible">
            <summary>
            SleekDial is hidden when there are no visible items to display.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialHideMode.WhenEmptyOrNoVisible">
            <summary>
            SleekDial is hidden when there are no items or no visible items to display.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialItem">
            <summary>
            Represents the item of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialItem._isVisibleChanged">
            <summary>
            Represents a value if the <see cref="P:FluentUI.Blazor.Community.Components.SleekDialItem.IsVisible"/> property has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Parent">
            <summary>
            Gets or sets the parent of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Disabled">
            <summary>
            Gets or sets if the item is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Icon">
            <summary>
            Gets or sets the icon of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Text">
            <summary>
            Gets or sets the text of the item.
            </summary>
            <remarks>In <see cref="F:FluentUI.Blazor.Community.Components.SleekDialMode.Radial"/>, the text isn't rendered.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Title">
            <summary>
            Gets or sets the title of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.OnClick">
            <summary>
            Gets or sets the callback to raise on a click on the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.IsVisible">
            <summary>
            Gets or sets if the item is visible.
            </summary>
            <remarks>
            The value is <see langword="true"/> by default.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.IsVisibleChanged">
            <summary>
            Gets or sets the callback to raise when the <see cref="P:FluentUI.Blazor.Community.Components.SleekDialItem.IsVisible"/> property changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Index">
            <summary>
            Gets the index of the item inside the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Angle">
            <summary>
            Gets or sets the angle of the item.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItem.OnClickAsync">
            <summary>
            Occurs when the item is clicked.
            </summary>
            <returns>Returns a task which raise the <see cref="P:FluentUI.Blazor.Community.Components.SleekDialItem.OnClick"/> callback when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItem.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItem.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItem.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItem.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItem.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialItemView">
            <summary>
            Reprensents the renderer of a <see cref="T:FluentUI.Blazor.Community.Components.SleekDialItem"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialItemView._renderText">
            <summary>
            Represents the render fragment to render the text.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItemView.Index">
            <summary>
            Gets or sets the index of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItemView.Parent">
            <summary>
            Gets or sets the parent of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItemView.Item">
            <summary>
            Gets or sets the item to render.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItemView.InternalClass">
            <summary>
            Gets the css of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItemView.InternalStyle">
            <summary>
            Gets the style of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItemView.InternalButtonStyle">
            <summary>
            Gets the style of the button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItemView.UpdateAdditionalAttributes">
            <summary>
            Update the additional attributes.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItemView.OnClickAsync">
            <summary>
            Occurs when the item is clicked.
            </summary>
            <returns>Returns a task which invoke the <see cref="P:FluentUI.Blazor.Community.Components.SleekDialItem.OnClick"/> callback when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItemView.GetAngle">
            <summary>
            Gets the angle of the item.
            </summary>
            <returns>Returns the angle of the item in degrees.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItemView.OnRadialSettingsChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when a settings changed.
            </summary>
            <param name="sender">Object which invokes the method.</param>
            <param name="e">Event assoc</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItemView.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItemView.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialLinearDirection">
            <summary>
            Represents the direction of the items of a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialLinearDirection.Default">
            <summary>
            Default direction from the position of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialLinearDirection.Up">
            <summary>
            Direction to the up.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialLinearDirection.Down">
            <summary>
            Direction to the down.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialLinearDirection.Left">
            <summary>
            Direction to the left.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialLinearDirection.Right">
            <summary>
            Direction to the right.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialMode">
            <summary>
            Represents the rendering mode of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialMode.Linear">
            <summary>
            The items are rendered in a linear way.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialMode.Radial">
            <summary>
            The items are rendered in a radial way.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialPopup">
            <summary>
            Represents the popup of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial" /> component.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementMove">
            <summary>
            Direction of the movement.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementMove.Up">
            <summary>
            Move to the up.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementMove.Down">
            <summary>
            Move to the down.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementMove.Left">
            <summary>
            Move to the left.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementMove.Right">
            <summary>
            Move to the right.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions">
            <summary>
            Represents the options for a linear menu.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.IsVertical">
            <summary>
            Gets or sets a value indicating if the popup is vertical.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.IsTop">
            <summary>
            Gets or sets a value indicating if the floating button is set to the top.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.IsLeft">
            <summary>
            Gets or sets a value indicating if the floating button is set to the left.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.IsCenter">
            <summary>
            Gets or sets a value indicating if the floating button is set to the center.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.IsMiddle">
            <summary>
            Gets or sets a value indicating if the floating button is set to the middle.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.IsFixed">
            <summary>
            Gets or sets a value indicating if the floating button is fixed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.Direction">
            <summary>
            Gets or sets a value indicating if the direction of the popup.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions">
            <summary>
            Represents the options for a radial menu.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsTop">
            <summary>
            Gets or sets a value indicating if the floating button is set to the top.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsBottom">
            <summary>
            Gets or sets a value indicating if the floating button is set to the bottom.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsLeft">
            <summary>
            Gets or sets a value indicating if the floating button is set to the left.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsCenter">
            <summary>
            Gets or sets a value indicating if the floating button is set to the center.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsMiddle">
            <summary>
            Gets or sets a value indicating if the floating button is set to the middle.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsFixed">
            <summary>
            Gets or sets a value indicating if the floating button is fixed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsRight">
            <summary>
            Gets or sets a value indicating if the floating button is set to the right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._module">
            <summary>
            Represents the javascript module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup.JavascriptFilename">
            <summary>
            Represents the javascript file to load.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._linearPositionOptions">
            <summary>
            Represents the options for the linear menu.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._radialPositionOptions">
            <summary>
            Represents the options for the radial menu.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._popupReference">
            <summary>
            Represents the reference of the popup.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._isLinear">
            <summary>
            Represents a value indicating if the menu is linear.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._xOffset">
            <summary>
            Represents the X offset of the popup.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._yOffset">
            <summary>
            Represents the Y offset of the popup.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._width">
            <summary>
            Represents the width of the popup.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._height">
            <summary>
            Represents the height of the popup.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SleekDialPopup"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.JSRuntime">
            <summary>
            Gets or sets the javascript runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.IsOpen">
            <summary>
            Gets or sets a value indicating if the dial is opened or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.Parent">
            <summary>
            Gets or sets the parent of the <see cref="T:FluentUI.Blazor.Community.Components.SleekDialPopup"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.OnAnimationCompleted">
            <summary>
            Gets or sets the callback when the animation is completed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.InternalCss">
            <summary>
            Gets the css of the popup.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.InternalStyle">
            <summary>
            Gets the internal style of the popup.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.GlobalState">
            <summary>
            Gets or sets the global state.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.OnOverlayCloseAsync">
            <summary>
            Occurs when the overlay is closed.
            </summary>
            <returns>Returns a task which closes the popup when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.HandleKeyAsync(Microsoft.FluentUI.AspNetCore.Components.FluentKeyCodeEventArgs)">
            <summary>
            Focus the current element.
            </summary>
            <param name="e">Event args associated to the component.</param>
            <returns>Returns a task which focus the element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusFirstElementAsync">
            <summary>
            Focus the first element.
            </summary>
            <returns>Returns a task which focus the first element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusLastElementAsync">
            <summary>
            Focus the last element.
            </summary>
            <returns>Returns a task which focus the last element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusPreviousElementAsync">
            <summary>
            Focus the previous element.
            </summary>
            <returns>Returns a task which focus the previous element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementAsync(FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementMove)">
            <summary>
            Focus the element.
            </summary>
            <param name="value">Direction of the focus.</param>
            <returns>Returns a task which focus the element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusNextElementAsync">
            <summary>
            Focus the next element.
            </summary>
            <returns>Returns a task which focus the next element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.InvokeScriptAsync(System.String,System.Object[])">
            <summary>
            Invokes the specified script.
            </summary>
            <param name="method">Method to invoke.</param>
            <param name="args">Argument associated to the method.</param>
            <returns>Returns a task which invokes the script when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.OnKeyDownHandlerAsync(Microsoft.FluentUI.AspNetCore.Components.FluentKeyCodeEventArgs)">
            <summary>
            Occurs on a keydown.
            </summary>
            <param name="e">Event associated to the method.</param>
            <returns>Returns a task which handles the key when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.UpdatePositionAsync">
            <summary>
            Updates the position of the popup.
            </summary>
            <returns>Returns a task which update the position of the popup.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.UpdateOptions">
            <summary>
            Update the options of the menu.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.GetRadialSettings">
            <summary>
            Gets the settings of the radial menu.
            </summary>
            <returns>Returns the settings of the radial menu.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.CheckAngleRange(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.SleekDialRadialSettings,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check the angle to place the items correctly.
            </summary>
            <param name="startAngle">Start angle in degrees.</param>
            <param name="endAngle">End angle in degrees.</param>
            <param name="settings">Settings of the radial menu.</param>
            <param name="isClock">Value indicating if the menu is clockwise.</param>
            <param name="minAngle">Minimum angle allowed.</param>
            <param name="maxAngle">Maximum angle allowed.</param>
            <param name="reverse">Value indicating if the angle are reversed.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.CheckAngle(System.Int32,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check the current angle.
            </summary>
            <param name="value">Angle to check.</param>
            <param name="isClock">Value indicating if the menu is clockwise or counterclockwise.</param>
            <param name="minAngle">Minimum angle allowed.</param>
            <param name="maxAngle">Maximum angle allowed.</param>
            <param name="reverse">Value indicating if the angle is reversed or not.</param>
            <returns>Returns the allowed angle.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.AnimateOpenAsync(FluentUI.Blazor.Community.Components.SleekDialAnimationSettings)">
            <summary>
            Starts the opening animation.
            </summary>
            <param name="animationSettings">Settings of the animation.</param>
            <returns>Returns a task which starts the opening animation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.AnimateCloseAsync(FluentUI.Blazor.Community.Components.SleekDialAnimationSettings)">
            <summary>
            Starts the closing animation.
            </summary>
            <param name="animationSettings">Settings of the animation.</param>
            <returns>Returns a task which starts the closing animation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.OnAnimationCompletedAsync(System.Boolean)">
            <summary>
            Occurs when the animation is completed.
            </summary>
            <param name="isOpen">Value indicating if the dial is opened or closed.</param>
            <returns>Returns a task which invokes <see cref="P:FluentUI.Blazor.Community.Components.SleekDialPopup.OnAnimationCompleted"/> when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionUpdated(System.Drawing.RectangleF)">
            <summary>
            Occurs when the position of the radial menu is updated.
            </summary>
            <param name="rectangle">Rectangle which contains the position of the radial menu.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialRadialDirection">
            <summary>
            Represents the direction of the items when the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/> is set to radial mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialRadialDirection.Clockwise">
            <summary>
            The items are rendered in clockwise mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialRadialDirection.Counterclockwise">
            <summary>
            The items are rendered in counterclockwise mode.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialRadialSettings">
            <summary>
            Represents the settings for the radial mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialRadialSettings.StartAngle">
            <summary>
            Gets or sets the start angle of the radial arc.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialRadialSettings.EndAngle">
            <summary>
            Gets or sets the end angle of the radial arc.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialRadialSettings.Offset">
            <summary>
            Gets or sets the offset of the items on the arc.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialRadialSettings.Direction">
            <summary>
            Gets or sets the direction of the items.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialView">
            <summary>
            Represents the viewer of a <see cref="T:FluentUI.Blazor.Community.Components.SleekDialItem"/> collection.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialView.Parent">
            <summary>
            Represents the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/> component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialView.Refresh">
            <summary>
            Refreshes the component state.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialView.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideDirection">
            <summary>
            Specifies the possible directions in which a slide animation or transition can occur.
            </summary>
            <remarks>Use this enumeration to indicate the direction of movement for UI elements or animations that support
            sliding transitions. The values correspond to the four cardinal directions: left, right, up, and down.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideDirection.Left">
            <summary>
            Represents a slide animation or transition moving to the left.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideDirection.Right">
            <summary>
            Represents a slide animation or transition moving to the right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideDirection.Up">
            <summary>
            Represents a slide animation or transition moving upwards.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideDirection.Down">
            <summary>
            Represents a slide animation or transition moving downwards.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DotIndicator`1">
            <summary>
            Represents a dot indicator for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DotIndicator`1.AriaLabel">
            <summary>
            Gets the aria-label.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DotIndicator`1.Index">
            <summary>
            Gets or sets the index of the dot.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DotIndicator`1.CurrentSlideshowIndex">
            <summary>
            Gets or sets the slide show index.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DotIndicator`1.Orientation">
            <summary>
            Gets or sets the orientation of the dot.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DotIndicator`1.Parent">
            <summary>
            Gets the parent component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DotIndicator`1.Css">
            <summary>
            Gets the css of the indicator.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DotIndicator`1.MoveToIndexAsync">
            <summary>
            Occurs when the dot is clicked.
            </summary>
            <returns>Returns the task which moves to the dot index when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1">
            <summary>
            Represents a slide show component.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._chevronLeft">
            <summary>
            Represents the left chevron icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._chevronRight">
            <summary>
            Represents the right chevron icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._chevronUp">
            <summary>
            Represents the up chevron icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._chevronDown">
            <summary>
            Represents the down chevron icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._slides">
            <summary>
            Represents the slides to render.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._images">
            <summary>
            Represents the images.
            </summary>
            <remarks>When orientation or ImageRatio changes, we need to update the image size.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._renderIndicatorItems">
            <summary>
            Represents the fragment to render the dots.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._timer">
            <summary>
            Represents the timer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._currentIndexChanged">
            <summary>
            Represents a value indicating if the current index has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._autoPlayChanged">
            <summary>
            Represents a value indicating if the autoplay has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._intervalChanged">
            <summary>
            Represents a value indicating if the interval has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._elementWidthResized">
            <summary>
            Represents a value indicating if the element was resized on the width.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._elementHeightResized">
            <summary>
            Represents a value indicating if the element was resized on the height.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._isAspectRatioChanged">
            <summary>
            Represents a value indicating if the aspect ratio has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._dotnetReference">
            <summary>
            Represents the reference of the component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._module">
            <summary>
            Represents the module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.JavascriptFileName">
            <summary>
            Represents the name of the javascript filename.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._showContent">
            <summary>
            Value indicating if the content is shown.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._resizedWidth">
            <summary>
            Represents the resized width.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._resizedHeight">
            <summary>
            Represents the resized height.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._isIndicatorPositionChanged">
            <summary>
            Represents a value indicating if the position of the indicator has changed. 
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._isOrientationChanged">
            <summary>
            Represents a value indicating if the orientation has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._isTouchEnabledChanged">
            <summary>
            Represents a value indicating if the touch enabled has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._isLoopingModeChanged">
            <summary>
            Represents a value indicating if the looping mode has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._showIndicatorChanged">
            <summary>
            Represents a value indicating if the show indicator has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ShowControls">
            <summary>
            Gets or sets a value indicating that the controls are shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ChildContent">
            <summary>
            Gets or sets the render fragment for the child content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ShowIndicators">
            <summary>
            Gets or sets a value indicating that the indicators are shown.
            </summary>
            <remarks>
            When <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.LoopMode"/> is set to <see cref="F:FluentUI.Blazor.Community.Components.SlideshowLoopingMode.Infinite"/>, the indicators are not shown.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Items">
            <summary>
            Gets or sets the items to render.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ItemTemplate">
            <summary>
            Gets or sets the item template for rendering the items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Autoplay">
            <summary>
            Gets or sets a value indicating that the slide show is autoplay.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.AutoplayInterval">
            <summary>
            Gets or sets the interval between items.
            </summary>
            <remarks>If an item has its <see cref="!:SlideshowImage&lt;TItem&gt;.Interval"/> set, it will override
             the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.AutoplayInterval"/>.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.SlideDuration">
            <summary>
            Gets or sets a the duration of the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Width">
            <summary>
            Gets or sets the width of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Height">
            <summary>
            Gets or sets the height of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Index">
            <summary>
            Gets or sets the index of the item to show.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IndexChanged">
            <summary>
            Gets or sets the callback to raise when the index has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.LoopMode">
            <summary>
            Gets or sets a value indicating that the slide show loops after reaching the last item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.PreviousLabel">
            <summary>
            Gets or sets the label for previous button tooltip.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.NextLabel">
            <summary>
            Gets or sets the label for next button tooltip.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ItemFunc">
            <summary>
            Gets or sets the function to retrieve the identifier of an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IndicatorPosition">
            <summary>
            Gets or sets the position of the indicator.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IndicatorTemplate">
            <summary>
            Gets or sets the template for an indicator item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Orientation">
            <summary>
            Gets or sets the orientation of the slide show.
            </summary>
            <remarks>If the indicator is visible, the position of it override this value.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IsTouchEnabled">
            <summary>
            Gets or sets if the touch is enabled, allow the user to use its fingers to swipe between slides.
            </summary>
            <remarks>If <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Autoplay"/> is <see langword="true" /> and <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IsTouchEnabled"/>
             is <see langword="true" />, <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Autoplay"/> will be desactivated.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Count">
            <summary>
            Gets the number of items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IsPreviousDisabled">
            <summary>
            Gets a value indicating if the previous button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IsNextDisabled">
            <summary>
            Gets a value indicating if the next button disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Css">
            <summary>
            Gets or sets the css for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.InternalOrientation">
            <summary>
            Gets the orientation of the indicators.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.InternalStyle">
            <summary>
            Gets the internal style for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.InternalContainerCss">
            <summary>
            Gets the css for the internal container of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1" />.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.InternalIndicatorsCss">
            <summary>
            Gets the css for the indicators of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1" />.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.PreviousButtonStyle">
            <summary>
            Gets the style of the previous button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.NextButtonStyle">
            <summary>
            Gets the style of the previous button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Runtime">
            <summary>
            Gets or sets the javascript runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ImageAspectRatio">
            <summary>
            Gets or sets a value indicating if the image keeps the aspect ratio.
            </summary>
            <remarks>Works only if the item contains an img div.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.PreviousIcon">
            <summary>
            Gets or sets the previous icon.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.NextIcon">
            <summary>
            Gets or sets the next icon.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.PreviousHorizontalStyle">
            <summary>
            Gets the style for previous button on horizontal orientation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.PreviousVerticalStyle">
            <summary>
            Gets the style for previous button on vertical orientation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.NextHorizontalStyle">
            <summary>
            Gets the style for next button on horizontal orientation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.NextVerticalStyle">
            <summary>
            Gets the style for next button on vertical orientation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.DeviceInfoState">
            <summary>
            Gets or sets the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.DeviceInfoState"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnImagesResizeCompleted">
            <summary>
            Gets or sets the callback to raise when a resizing operation is completed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.TouchThreshold">
            <summary>
            Gets or sets the minimum distance in pixels that the user should swipe to move the slide.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.StopAutoplayWhenTouchEnabled">
            <summary>
            Gets or sets a value indicating if the autoplay stops when the touch is enabled.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.GetInternalOrientation">
            <summary>
            Gets the internal orientation.
            </summary>
            <returns>Returns the orientation from the indicator position if <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ShowIndicators"/>
             is set to <see langword="true" />, or use the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Orientation"/> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.StartTimer">
            <summary>
            Starts the timer.
            </summary>
            <remarks>The timer starts if the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Autoplay" /> is set to <see langword="true" />.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.StopTimer">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnTimerTick(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Occurs when the timer ticks.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event args of the timer.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IsCurrent(System.Int32)">
            <summary>
            Checks if the <paramref name="index"/> is equals to the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Index"/>.
            </summary>
            <param name="index">Index to check.</param>
            <returns>Returns <see langword="true"/> if the <paramref name="index"/> is equal to <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Index"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.GetAriaHiddenValue(FluentUI.Blazor.Community.Components.SlideshowItem{`0})">
            <summary>
            Gets the aria-hidden value.
            </summary>
            <param name="item">Hidden item.</param>
            <returns>Returns the aria-hidden value.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnMoveNextAsync">
            <summary>
            Move to the next slide.
            </summary>
            <returns>Returns a task which moves to the next slide when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnMovePreviousAsync">
            <summary>
            Move to the previous slide.
            </summary>
            <returns>Returns a task which moves to the previous slide when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.MoveToIndexAsync(System.Int32)">
            <summary>
            Move the slide to the specified <paramref name="index"/>.
            </summary>
            <param name="index">Index of the slide.</param>
            <returns>Returns a task which moves the slide to the current index.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.GetAriaHiddenValue(System.Int32)">
            <summary>
            Gets the aria-hidden value.
            </summary>
            <param name="index">Index to check.</param>
            <returns>Returns <see langword="true"/> if the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Index"/> is equal to <paramref name="index"/>,
             <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnKeyDownAsync(Microsoft.FluentUI.AspNetCore.Components.FluentKeyCodeEventArgs)">
            <summary>
            Occurs when a key of the keyboard is down.
            </summary>
            <param name="e">Event args of the keyboard.</param>
            <returns>Returns a task which moves the slide when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Remove(FluentUI.Blazor.Community.Components.SlideshowItem{`0})">
            <summary>
            Removes the <paramref name="value"/> from the component.
            </summary>
            <param name="value">Value to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Add(FluentUI.Blazor.Community.Components.SlideshowItem{`0})">
            <summary>
            Adds the <paramref name="value"/> from the component.
            </summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Contains(FluentUI.Blazor.Community.Components.SlideshowItem{`0})">
            <summary>
            Check if the <paramref name="value"/> is inside the component.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns <see langword="true" /> if the item is inside the component, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Contains(FluentUI.Blazor.Community.Components.SlideshowImage{`0})">
            <summary>
            Check if the <paramref name="value"/> is inside the component.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns <see langword="true" /> if the item is inside the component, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnAspectRatioChangedAsync">
            <summary>
            Occurs when the aspect ratio has changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnEnableOrDisableTouchAsync">
            <summary>
            Occurs when touch is enabled or disabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnOrientationChanged(System.Object,FluentUI.Blazor.Community.Components.DeviceOrientation)">
            <summary>
            Occurs when the orientation changed.
            </summary>
            <param name="sender">Object which invokes the method.</param>
            <param name="e">Args of the method.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Add(FluentUI.Blazor.Community.Components.SlideshowImage{`0})">
            <summary>
            Adds an image into the list of images.
            </summary>
            <param name="value">Image to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Remove(FluentUI.Blazor.Community.Components.SlideshowImage{`0})">
            <summary>
            Removes an image from the list of images.
            </summary>
            <param name="value">Image to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnLoopingModeChangedAsync(System.Boolean)">
            <summary>
            Occurs when the looping mode has changed.
            </summary>
            <returns>Returns a task which changes the looping mode when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.SetIndexAsync(System.Int32)">
            <summary>
            Sets the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Index"/> to <paramref name="index"/>.
            </summary>
            <param name="index">Index of the slide to slow.</param>
            <returns>Returns a task which set the index to the <paramref name="index"/> and
             raise <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IndexChanged"/> when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.SetParentSize(System.Int32,System.Int32)">
            <summary>
            Occurs when <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Width"/> or <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Height"/> are not provided.
            </summary>
            <param name="width">Width of the parent.</param>
            <param name="height">Height of the parent.</param>
            <remarks>When <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Width"/> or <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Height"/> are not provided, we took the size from
             its parent.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnAutoSizeCompletedAsync">
            <summary>
            Occurs when all images have been resized.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnFillSizeCompletedAsync(System.Int32,System.Int32)">
            <summary>
            Occurs when all images have been resized to fill the container.
            </summary>
            <param name="width">Width of the container.</param>
            <param name="height">Height of the container.</param>
            <returns>Returns a task which set the container size when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ResizeObserverEvent(FluentUI.Blazor.Community.Components.SlideshowResize)">
            <summary>
            Occurs when the component is resized.
            </summary>
            <param name="value">Value of the new size of the component and is the value are fixed.</param>
            <returns>The new size of the component.</returns>
            <remarks>
            If <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Width"/> or <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Height"/> are provided, these values are considered fixed,
             so even if the component container became greater than the component size, the component
             won't be greater than the fixed value.
            </remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnTouchSwipeAsync(FluentUI.Blazor.Community.Components.SlideshowSwipeDirection)">
            <summary>
            Occurs when the user swipe the slide.
            </summary>
            <param name="direction">Direction of the slide.</param>
            <returns>Returns a task wich moves the slide according to the <paramref name="direction"/>
             when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowCaption">
            <summary>
            Represents a caption for a <see cref="T:FluentUI.Blazor.Community.Components.SlideshowItem`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaption.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaption.Fixed">
            <summary>
            Gets or sets a value indicating whether the caption is fixed to the bottom of the slideshow item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaption.MaxWidth">
            <summary>
            Gets or sets the maximum width, in pixels, that the component can occupy.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaption.Css">
            <summary>
            Gets the css classes to use.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaption.InternalStyle">
            <summary>
            Gets the computed CSS style string for the component, including any maximum width constraints.
            </summary>
            <remarks>This property is intended for internal use to generate the final style attribute value based
            on the component's configuration. It should not be accessed directly from outside the class.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowCaptionText">
            <summary>
            Represents a configurable text component for displaying descriptive content within a slideshow, allowing
            customization of text, color, font, and layout styles.
            </summary>
            <remarks>Use this component to present descriptive or explanatory text in a slideshow interface. The
            appearance of the text can be customized using standard CSS style values for color, font family, font size, font
            weight, letter spacing, line height, and margin. All style-related properties accept valid CSS values as strings. If
            a property is not set, a default value is applied as specified in each property's documentation.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaptionText.Text">
            <summary>
            Gets or sets the text to display in the description area of the slideshow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaptionText.Color">
            <summary>
            Gets or sets the CSS color value to apply to the component's content.
            </summary>
            <remarks>If not set, the default color is "white". Accepts any valid CSS color string, such as a named
            color (e.g., "red"), a hex code (e.g., "#FF0000"), or an RGB/RGBA value.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaptionText.FontFamily">
            <summary>
            Gets or sets the CSS font family to apply to the component's text.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaptionText.FontSize">
            <summary>
            Gets or sets the CSS font size to apply to the component's content.
            </summary>
            <remarks>The value should be a valid CSS font-size string, such as "16px", "1.5em", or "large". If not
            set, the default value is "24px".</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaptionText.FontWeight">
            <summary>
            Gets or sets the font weight to apply to the text content.
            </summary>
            <remarks>Accepts standard CSS font-weight values, such as numeric values (e.g., "400", "700") or
            keywords (e.g., "normal", "bold"). The default value is "400".</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaptionText.LetterSpacing">
            <summary>
            Gets or sets the CSS letter-spacing value to apply to the element's text content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaptionText.LineHeight">
            <summary>
            Gets or sets the line height value for the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaptionText.Margin">
            <summary>
            Gets or sets the margin value to apply, typically used to define spacing around an element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaptionText.InternalStyle">
            <summary>
            Gets the computed CSS style string based on the current style-related property values.
            </summary>
            <remarks>This property combines individual style settings, such as color, font, and spacing, into a
            single CSS style string. It is intended for internal use when rendering elements with dynamic styles.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowImage`1">
            <summary>
            Represents the image inside a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlideshowImage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SlideshowImage`1"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowImage`1.Parent">
            <summary>
            Gets or sets the parent of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowImage`1.Source">
            <summary>
            Gets or sets the source of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowImage`1.Alt">
            <summary>
            Gets or sets the alternate text of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowImage`1.Title">
            <summary>
            Gets or sets the title of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowImage`1.IsLazy">
            <summary>
            Gets or sets a value indicating whether the image should be loaded lazily.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowImage`1.FetchPriorityHigh">
            <summary>
            Gets or sets a value indicating whether the image has high fetch priority.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlideshowImage`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlideshowImage`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowImageRatio">
            <summary>
            Represents the available ratios for images in the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1" />.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowImageRatio.Auto">
            <summary>
            If the image natural dimensions are greater than the container dimensions,
             the image is shrinked, and the aspect ratio is maintened.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowImageRatio.Fill">
            <summary>
            The image fill the container.
            </summary>
            <remarks>When the dimensions of the container are not set, the width of the container is set to 100%,
             after that, the first image in the slideshow, when stretched, gives the height of the container,
             and the other images will take that height.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowIndicatorPosition">
            <summary>
            Gets or sets the position of the indicator.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowIndicatorPosition.Top">
            <summary>
            The indicator is on the top of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowIndicatorPosition.Bottom">
            <summary>
            The indicator is on the bottom of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowIndicatorPosition.Left">
            <summary>
            The indicator is on the left of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowIndicatorPosition.Right">
            <summary>
            The indicator is on the right of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowItem`1">
            <summary>
            Represents an item for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlideshowItem`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SlideshowItem`1"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowItem`1.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowItem`1.AriaLabel">
            <summary>
            Gets or sets the aria label of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowItem`1.Parent">
            <summary>
            Gets or sets the parent of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowItem`1.Interval">
            <summary>
            Gets or sets the interval to show the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowItem`1.Css">
            <summary>
            Gets the css of the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlideshowItem`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlideshowItem`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowLoopingMode">
            <summary>
            Represents the looping mode of a slideshow.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowLoopingMode.None">
            <summary>
            No looping.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowLoopingMode.Rewind">
            <summary>
            The slideshow will loop back to the start after reaching the end.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowLoopingMode.Infinite">
            <summary>
            The slideshow will loop by pushing the first slide at the end of the last slide,
             to create a smooth and infinity loop.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowResize">
            <summary>
            Represents the size of the slideshow when it was resized from the browser.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowResize.FixedWidth">
            <summary>
            Gets or sets a value indicating whether the width is fixed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowResize.FixedHeight">
            <summary>
            Gets or sets a value indicating whether the height is fixed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowResize.Width">
            <summary>
            Gets or sets the width of the slideshow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowResize.Height">
            <summary>
            Gets or sets the height of the slideshow.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowSwipeDirection">
            <summary>
            Represents the direction in which slides are swapped in a slideshow.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowSwipeDirection.Next">
            <summary>
            Move to the next slide.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowSwipeDirection.Previous">
            <summary>
            Move to the previous slide.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1">
            <summary>
            Represents a Tile Grid component.
            </summary>
            <typeparam name="TItem">Type of the component.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1._layout">
            <summary>
            Represents the layout of the tile grid.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.JavascriptFile">
            <summary>
            Represents the javascript file to use to load and to store the layout.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1._module">
            <summary>
            Represents the reference of the javascript object. 
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1._layoutLoaded">
            <summary>
            Represents a value indicating if the layout was already loaded.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.GridSettings">
            <summary>
            Gets the settings for the tile grid.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1._dropContainer">
            <summary>
            Gets the <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.CanOverflow">
            <summary>
            Gets or sets a value indicating if the component can overflow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.Immediate">
            <summary>
            Gets or sets a value indicating if the drap and drop is immediate. 
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.CloneItem">
            <summary>
            Gets or sets a function to clone an item of the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.CanReorder">
            <summary>
            Gets or sets a value indicating if the component can reorder its item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.CanResize">
            <summary>
            Gets or sets a value indicating if the component can resize its item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.IsDragAllowed">
            <summary>
            Gets or sets a function which allows an item can be dragged or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.IsDropAllowed">
            <summary>
            Gets or sets a function which allows the item can be dropped or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.Items">
            <summary>
            Gets or sets the items to render.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.ItemContent">
            <summary>
            Gets or sets the template for the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.ItemCss">
            <summary>
            Gets or sets the css for an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.ColumnWidth">
            <summary>
            Gets or sets the width of the column.
            </summary>
            <remarks>Default width is 1fr.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.MinimumColumnWidth">
            <summary>
            Gets or sets the minimum width of the column.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.MinimumRowHeight">
            <summary>
            Gets or sets the minimum height of the row.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.Columns">
            <summary>
            Gets or sets the number of columns of the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.RowHeight">
            <summary>
            Gets or sets the height of the row.
            </summary>
            <remarks>
            Default height is 1fr.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.Width">
            <summary>
            Gets or sets the width of the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.Height">
            <summary>
            Gets or sets the height of the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.PersistenceEnabled">
            <summary>
            Gets or sets a value indicating if the layout will be stored in the local storage of the app or not.
            </summary>
            <remarks>
            When this value is set to <see langword="true" />, the <see cref="P:Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase.Id"/> property must be set
             and mustn't change.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.ItemKey">
            <summary>
            Gets or sets the function to extract a key from an item.
            </summary>
            <remarks>This function is only used if <see cref="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.PersistenceEnabled"/> is set to <see langword="true" />.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.OnSaveRequested(System.Object,System.EventArgs)">
            <summary>
            Occurs when a save is requested.
            </summary>
            <param name="sender">Object who invokes the method.</param>
            <param name="e">Event args associated to this event.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.AddLayoutItem(FluentUI.Blazor.Community.Components.FluentCxTileGridItem{`0},System.Nullable{System.Int32})">
            <summary>
            Adds a layout item.
            </summary>
            <param name="value">Item to add.</param>
            <param name="index">Index of the item.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.RemoveLayoutItem(System.Nullable{System.Int32})">
            <summary>
            Remove a layout item.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.UpdateLayoutAsync(FluentUI.Blazor.Community.Components.FluentCxTileGridItem{`0})">
            <summary>
            Update the layout in an asynchronous way.
            </summary>
            <param name="value">Item to update.</param>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.SaveLayoutAsync">
            <summary>
            Save the layout in an asynchronous way.
            </summary>
            <returns>Returns a task which saves the layout when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1">
            <summary>
            Represents a Tile Grid item.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.Value">
            <summary>
            Gets or sets the value of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.ChildContent">
            <summary>
            Gets or sets the content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.Component">
            <summary>
            Gets the render component. (when used inside other components) 
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.RowSpan">
            <summary>
            Gets or sets the row span of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.ColumnSpan">
            <summary>
            Gets or sets the column span of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.OnTapped">
            <summary>
            Event callback occurs when the component is tapped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.OnDoubleTapped">
            <summary>
            Event callback occurs when the component is double tapped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.Parent">
            <summary>
            Gets or sets the parent of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.InternalStyle">
            <summary>
            Gets the computed CSS style string with enforced layout constraints for internal use.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.OnResizedAsync(FluentUI.Blazor.Community.Components.ResizedEventArgs)">
            <summary>
            Occurs when the tile is resized in an asynchronous way.
            </summary>
            <param name="e">Event args which contains the new size of the tile.</param>
            <returns>Returns a task which resizes the tile when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.SetSpan(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IDropZoneComponent`1">
            <summary>
            Represents an interface for the <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1"/> component.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IDropZoneComponent`1.Id">
            <summary>
            Gets the identifier of the drop zone.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IDropZoneComponent`1.Component">
            <summary>
            Gets the component to render inside the drop zone.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IItemValue`1">
            <summary>
            Represents a value for an item.
            </summary>
            <typeparam name="TItem">Type of the value.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IItemValue`1.Value">
            <summary>
            Gets the value of the item.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ITileGridItemDropZoneComponent`1">
            <summary>
            Represents the interface for a <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1"/> which contains a
             <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridItemDropZoneComponent`1.ColumnSpan">
            <summary>
            Gets the column span of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridItemDropZoneComponent`1.RowSpan">
            <summary>
            Gets the row span of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1"/>.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ITileGridItemDropZoneComponent`1.SetSpan(System.Int32,System.Int32)">
            <summary>
            Sets the span of the item.
            </summary>
            <param name="columnSpan">Column span of the item.</param>
            <param name="rowSpan">Row span of the item.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TileGridLayout">
            <summary>
            Represents the layout of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.TileGridLayout.UpdateSpan(System.String,System.Int32,System.Int32)">
            <summary>
            Updates the span of the item.
            </summary>
            <param name="key">Key of the item.</param>
            <param name="columnSpan">Column span of the item.</param>
            <param name="rowSpan">Row span of the item.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TileGridLayoutItem">
            <summary>
            Represents an item for the <see cref="T:FluentUI.Blazor.Community.Components.TileGridLayout"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TileGridLayoutItem.ColumnSpan">
            <summary>
            Gets or sets the column span of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TileGridLayoutItem.RowSpan">
            <summary>
            Gets or sets the row span of the item.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AngleUnit">
            <summary>
            Represents angle units for CSS properties.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AngleUnit.Degrees">
            <summary>
            Represents degrees, the most common unit for angles.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AngleUnit.Radians">
            <summary>
            Represents radians, a mathematical unit for angles.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AngleUnit.Gradians">
            <summary>
            Represents gradians, a less common unit where a right angle is 100 gradians.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AngleUnit.Turns">
            <summary>
            Represents turns, where a full circle is 1 turn.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CssLength">
            <summary>
            Represents a CSS length value with a unit.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CssLength._value">
            <summary>
            Represents the numeric value of the length.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CssLength._unit">
            <summary>
            Represents the unit of the length.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CssLength._culture">
            <summary>
            Represents the culture info for formatting.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CssLength.#ctor(System.Double,FluentUI.Blazor.Community.Components.LengthUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.CssLength"/> struct.
            </summary>
            <param name="value">Value of the length.</param>
            <param name="unit">Unit of the length.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CssLength.ToString">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LengthUnit">
            <summary>
            Represents length units for CSS properties.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.Pixels">
            <summary>
            Represents pixels, the most common unit for lengths in web design.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.Percent">
            <summary>
            Represents percentage, a relative unit based on the parent element's size.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.Em">
            <summary>
            Represents em, a relative unit based on the font size of the element.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.Rem">
            <summary>
            Represents rem, a relative unit based on the font size of the root element.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.ViewportWidth">
            <summary>
            Represents vw, a relative unit based on 1% of the viewport's width.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.ViewportHeight">
            <summary>
            Represents vh, a relative unit based on 1% of the viewport's height.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.ViewportMin">
            <summary>
            Represents vmin, a relative unit based on 1% of the smaller dimension of the viewport (width or height).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.ViewportMax">
            <summary>
            Represents vmax, a relative unit based on 1% of the larger dimension of the viewport (width or height).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.Centimeters">
            <summary>
            Represents centimeters, a physical unit of length.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.Millimeters">
            <summary>
            Represents millimeters, a physical unit of length.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.Inches">
            <summary>
            Represents inches, a physical unit of length.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.Points">
            <summary>
            Represents points, a physical unit of length commonly used in typography (1 point = 1/72 inch).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.Picas">
            <summary>
            Represents picas, a physical unit of length commonly used in typography (1 pica = 12 points).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.Character">
            <summary>
            Represents character units, a relative unit based on the width of the "0" (zero) character in the element's font.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LengthUnit.XHeight">
            <summary>
            Represents x-height units, a relative unit based on the height of lowercase "x" in the element's font.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.RgbaColor">
            <summary>
            Represents an RGBA color value for CSS.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RgbaColor._r">
            <summary>
            Represents the red component of the color (0-255).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RgbaColor._g">
            <summary>
            Represents the green component of the color (0-255).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RgbaColor._b">
            <summary>
            Represents the blue component of the color (0-255).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RgbaColor._a">
            <summary>
            Represents the alpha (opacity) component of the color (0.0-1.0).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.RgbaColor._culture">
            <summary>
            Represents the culture info for formatting.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RgbaColor.#ctor(System.Byte,System.Byte,System.Byte,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.RgbaColor"/> class with the specified red, green, blue, and alpha
            channel values.
            </summary>
            <param name="r">The red component of the color, ranging from 0 to 255.</param>
            <param name="g">The green component of the color, ranging from 0 to 255.</param>
            <param name="b">The blue component of the color, ranging from 0 to 255.</param>
            <param name="a">The alpha (transparency) component of the color, ranging from 0.0 (completely transparent) to 1.0 (completely
            opaque). Defaults to 1.0.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="a"/> is less than 0, greater than 1, or is not a finite number.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.RgbaColor.ToString">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Middleware.Base64ImageStrategy">
            <summary>
            Represents a strategy for handling Base64-encoded image URLs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Middleware.Base64ImageStrategy.Priority">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.Base64ImageStrategy.CanHandle(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.Base64ImageStrategy.GetImageBytesAsync(System.String,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Middleware.FtpImageStrategy">
            <summary>
            Represents a strategy for handling FTP image URLs.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Middleware.FtpImageStrategy._httpClient">
            <summary>
            Represents the HTTP client used to fetch images.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.FtpImageStrategy.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Represents a strategy for handling FTP image URLs.
            </summary>
            <param name="httpClient">Http client to handle requests.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Middleware.FtpImageStrategy.Priority">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.FtpImageStrategy.CanHandle(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.FtpImageStrategy.GetImageBytesAsync(System.String,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Middleware.HttpImageStrategy">
            <summary>
            Represents a strategy for handling HTTP image URLs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Middleware.HttpImageStrategy.Priority">
            <inheritdoc />
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Middleware.HttpImageStrategy._httpClient">
            <summary>
            Represents the HTTP client used to fetch images.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.HttpImageStrategy.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.Middleware.HttpImageStrategy"/> class.
            </summary>
            <param name="httpClient">Http client</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.HttpImageStrategy.CanHandle(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.HttpImageStrategy.GetImageBytesAsync(System.String,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Middleware.IImageSourceStrategy">
            <summary>
            Represents a strategy for handling image sources.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Middleware.IImageSourceStrategy.Priority">
            <summary>
            Gets the priority of the strategy. Lower values indicate higher priority.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.IImageSourceStrategy.CanHandle(System.String)">
            <summary>
            Checks if the strategy can handle the given URL.
            </summary>
            <param name="url">Url to check.</param>
            <returns>Returns true if the strategy can handle the given URL; otherwise, false.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.IImageSourceStrategy.GetImageBytesAsync(System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Gets the image bytes from the given URL.
            </summary>
            <param name="url">Url to fetch.</param>
            <param name="logger">Logger to use.</param>
            <returns>Returns the image bytes.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Middleware.IpfsImageStrategy">
            <summary>
            Represents a strategy for handling IPFS image URLs.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Middleware.IpfsImageStrategy._httpClient">
            <summary>
            Represents the HTTP client used to fetch images.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.IpfsImageStrategy.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.Middleware.IpfsImageStrategy"/> class.
            </summary>
            <param name="httpClient">Http client to use to fetch image.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Middleware.IpfsImageStrategy.Priority">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.IpfsImageStrategy.CanHandle(System.String)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.IpfsImageStrategy.GetImageBytesAsync(System.String,Microsoft.Extensions.Logging.ILogger)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware">
            <summary>
            Responsible for processing image requests, including fetching, resizing, format conversion, and caching.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware._next">
            <summary>
            Represents the next middleware in the pipeline.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware._logger">
            <summary>
            Represents the logger instance.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware._strategies">
            <summary>
            Represents the collection of image source strategies.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware._cache">
            <summary>
            Represents the memory cache for storing processed images.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware._contentTypeProvider">
            <summary>
            Represents the content type provider for determining MIME types.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware},System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.Middleware.IImageSourceStrategy},Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware"/> class.
            </summary>
            <param name="next">The next request to process.</param>
            <param name="logger">Logger to use to write information.</param>
            <param name="strategies">List of strategies to use.</param>
            <param name="cache">Cache.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processes HTTP requests to handle image proxying, including resizing, reformatting, and caching.
            </summary>
            <remarks>This middleware intercepts requests with the path starting with "/image-proxy" and processes
            them  to retrieve, resize, and reformat images based on query parameters. The processed image is cached  for
            subsequent requests to improve performance. If the path does not match, the request is passed  to the next
            middleware in the pipeline.  Query parameters: <list type="bullet"> <item> <term>url</term> <description>The URL
            of the image to be processed. This parameter is required.</description> </item> <item> <term>format</term>
            <description>The desired image format (e.g., "jpeg", "png"). Defaults to "jpeg" if not specified.</description>
            </item> <item> <term>quality</term> <description>The quality of the output image (1-100). Defaults to 80 if not
            specified or invalid.</description> </item> <item> <term>width</term> <description>The desired width of the
            output image. If 0 or not specified, the original width is used.</description> </item> <item>
            <term>height</term> <description>The desired height of the output image. If 0 or not specified, the original
            height is used.</description> </item> </list>  Responses: <list type="bullet"> <item> <term>200 OK</term>
            <description>The processed image is returned in the response body.</description> </item> <item> <term>400 Bad
            Request</term> <description>Returned if the "url" query parameter is missing or invalid.</description> </item>
            <item> <term>500 Internal Server Error</term> <description>Returned if an error occurs during image
            processing.</description> </item> </list></remarks>
            <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> representing the current HTTP request and response.</param>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware.DownloadImageAsync(System.String)">
            <summary>
            Downloads the image from the specified URL using the appropriate strategy.
            </summary>
            <param name="url">Url of the image to download.</param>
            <returns>Returns a task which downloads the url when completed.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware.ResizeImage(SkiaSharp.SKBitmap,System.Int32,System.Int32)">
            <summary>
            Resizes the specified image to the given dimensions while maintaining the aspect ratio if one dimension is set
            to zero.
            </summary>
            <param name="original">The original image to resize. Cannot be <see langword="null"/>.</param>
            <param name="width">The desired width of the resized image. If set to 0, the width is calculated to maintain the aspect ratio.</param>
            <param name="height">The desired height of the resized image. If set to 0, the height is calculated to maintain the aspect ratio.</param>
            <returns>A new <see cref="T:SkiaSharp.SKBitmap"/> instance representing the resized image. If both <paramref name="width"/> and
            <paramref name="height"/> are 0, the original image is returned.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Middleware.ImageProcessingMiddleware.EncodeImage(SkiaSharp.SKBitmap,System.String,System.Int32,System.String@)">
            <summary>
            Encodes an image into a specified format with a given quality level.
            </summary>
            <remarks>This method supports a variety of image formats, including PNG, JPEG, WebP, AVIF, HEIF, GIF,
            BMP, WBMP, KTX, and ICO. If the specified format is not recognized, the image is encoded as JPEG.</remarks>
            <param name="bitmap">The <see cref="T:SkiaSharp.SKBitmap"/> representing the image to encode.</param>
            <param name="format">The desired image format as a string (e.g., "png", "jpeg", "webp"). If the format is not recognized,  the
            default format is JPEG.</param>
            <param name="quality">The quality level of the encoded image, ranging from 0 to 100. Higher values indicate better quality.</param>
            <param name="mimeType">When the method returns, contains the MIME type corresponding to the encoded image format.  If the format is not
            recognized, the MIME type defaults to "image/jpeg".</param>
            <returns>A byte array containing the encoded image data.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottieProvider.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottieProvider.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Animations.AnimationEngine">
            <summary>
            Represents the core engine responsible for managing and updating animated elements and groups.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine._maxDisplayedItems">
            <summary>
            Represents the maximum number of items to be displayed in the animation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine._state">
            <summary>
            Current state of the animation engine.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine._previousElements">
            <summary>
            Represents the previous state of animated elements to compute differences during animation frames.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine._elements">
            <summary>
            Represents the currently registered animated elements.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine._groups">
            <summary>
            Represents the currently registered animation groups.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine._layoutStrategy">
            <summary>
            Represents the layout strategy used to arrange animated elements.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine.jsonAnimatedElements">
            <summary>
            A thread-safe queue that stores instances of <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement"/>.
            </summary>
            <remarks>This queue is used to manage <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement"/> objects in a concurrent
            environment,  ensuring safe access and modification across multiple threads.</remarks>
        </member>
        <member name="E:FluentUI.Blazor.Community.Animations.AnimationEngine.StateChanged">
            <summary>
            Gets or sets the event that is triggered when the state of the animation engine changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Animations.AnimationEngine.State">
            <summary>
            Gets the current state of the animation engine.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.Register(FluentUI.Blazor.Community.Components.AnimatedElement)">
            <summary>
            Registers an animated element for tracking and ensures it is added to the collection.
            </summary>
            <remarks>If the specified element is already registered, the method does nothing.  Otherwise, the
            element is added to the internal collection, and a clone of the element is stored for future
            reference.</remarks>
            <param name="item">The animated element to register. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.RegisterGroup(FluentUI.Blazor.Community.Components.AnimatedElementGroup)">
            <summary>
            Registers an animation group and stores a snapshot of its animated elements.
            </summary>
            <remarks>This method adds the specified animation group to the internal collection of groups. 
            Additionally, it creates and stores a snapshot of the current state of each animated element  within the group,
            keyed by their unique identifier.</remarks>
            <param name="group">The animation group to register. Must not be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.SetLayout(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Sets the layout strategy to be used for arranging items.
            </summary>
            <param name="layoutStrategy">The layout strategy to apply. If <see langword="null"/>, a default grid layout is used.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.Unregister(FluentUI.Blazor.Community.Components.AnimatedElement)">
            <summary>
            Unregisters the specified animated element, removing it from the collection of tracked elements.
            </summary>
            <param name="item">The animated element to unregister. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.UnregisterGroup(FluentUI.Blazor.Community.Components.AnimatedElementGroup)">
            <summary>
            Unregisters the specified animation group, removing it and its associated animated elements from the internal
            collections.
            </summary>
            <remarks>This method removes the animation group from the internal collection of groups and also
            removes all animated elements associated with the group from the internal tracking collection.</remarks>
            <param name="group">The animation group to unregister. This parameter cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.Update">
            <summary>
            Updates the state of animated elements and returns a list of the updated elements.
            </summary>
            <remarks>This method processes both grouped and non-grouped animated elements, updating their state
            based on the current time.</remarks>
            <returns>A list of <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement"/> objects representing the updated animated elements.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.UpdateGroupElements(System.DateTime,System.Collections.Concurrent.ConcurrentQueue{FluentUI.Blazor.Community.Components.JsonAnimatedElement})">
            <summary>
            Updates the elements of all groups by applying the layout strategy and calculating the differences between the
            current and previous states.
            </summary>
            <remarks>This method processes all groups in parallel. For each group, it applies the layout strategy
            and computes the differences between the current state and the previous state. The calculated differences are
            added to the provided <paramref name="jsonAnimatedElements"/> queue.</remarks>
            <param name="now">The current timestamp used to calculate differences in the group elements.</param>
            <param name="jsonAnimatedElements">A thread-safe queue to which the method enqueues the calculated differences as <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement"/>
            objects.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.UpdateNoGroupElements(System.DateTime,System.Collections.Concurrent.ConcurrentQueue{FluentUI.Blazor.Community.Components.JsonAnimatedElement})">
            <summary>
            Updates the state of elements that are not part of a group and enqueues their changes into the specified queue
            if any differences are detected.
            </summary>
            <remarks>This method applies the layout strategy to the elements, updates their state based on the
            current time, and calculates the differences between their current and previous states. If differences are
            found, the changes are serialized into a <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement" /> object and added to the
            queue.</remarks>
            <param name="now">The current timestamp used to update the elements.</param>
            <param name="queue">A thread-safe queue to which the updated elements, represented as <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement" />, are enqueued
            if changes are detected.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.ApplyStartTime(System.DateTime)">
            <summary>
            Applies the specified start time to the layout strategy and all groups within the collection.
            </summary>
            <param name="now">The start time to apply, typically representing the current date and time.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.SetMaxDisplayedItems(System.Int32)">
            <summary>
            Sets the maximum number of items to be displayed.
            </summary>
            <remarks>This method updates the internal limit on the number of items that can be displayed at once.
            Ensure that the value provided is within the acceptable range for your application.</remarks>
            <param name="maxDisplayedItems">The maximum number of items to display. Must be a non-negative integer.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.GetAll">
            <summary>
            Returns a distinct list of all registered animated element IDs, including those within groups.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.Pause">
            <summary>
            Pauses the animation engine, transitioning it to the paused state.
            </summary>
            <remarks>After calling this method, the animation engine will halt progression until resumed. This
            method has no effect if the engine is already paused.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.Reset">
            <summary>
            Resets the animation engine to its initial state and notifies listeners of the state change.
            </summary>
            <remarks>This method sets the engine state to NotStarted and raises the StateChanged event. Use this
            method to reinitialize the animation engine before starting a new animation sequence.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.OnCompleted">
            <summary>
            Marks the animation engine as completed, updating its state accordingly.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.Resume">
            <summary>
            Resumes the animation engine, transitioning it to the active state if it is currently paused or stopped.
            </summary>
            <remarks>This method has no effect if the engine is already running. Calling this method after a pause
            or stop allows animations to continue from their current position.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.Stop">
            <summary>
            Stops the animation engine and transitions its state to stopped.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.Start">
            <summary>
            Transitions the animation engine to the running state, allowing animations to begin or resume processing.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Animations.AnimationEngineState">
            <summary>
            Represents the various states of the animation engine.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngineState.NotStarted">
            <summary>
            Indicates that the animation engine has not yet started.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngineState.Paused">
            <summary>
            Indicates that the animation engine is paused.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngineState.Running">
            <summary>
            Indicates that the animation engine is running.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngineState.Stopped">
            <summary>
            Indicates that the animation engine has been stopped.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngineState.Completed">
            <summary>
            Indicates that the animation engine has completed all animations.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.ByteSize">
            <summary>
            Provides binary (IEC) unit constants, properties, and methods for the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> struct.
            </summary>
            <summary>
            Represents a size in bytes and provides methods for formatting, conversion, and comparison.
            </summary>
            <summary>
            Provides operator overloads and comparison logic for the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> struct.
            </summary>
            <summary>
            Provides decimal (SI) unit constants, properties, and methods for the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> struct.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInKibiByte">
            <summary>
            The number of bytes in one kibibyte (KiB). 1 KiB = 1,024 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInMebiByte">
            <summary>
            The number of bytes in one mebibyte (MiB). 1 MiB = 1,024 KiB = 1,048,576 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInGibiByte">
            <summary>
            The number of bytes in one gibibyte (GiB). 1 GiB = 1,024 MiB = 1,073,741,824 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInTebiByte">
            <summary>
            The number of bytes in one tebibyte (TiB). 1 TiB = 1,024 GiB = 1,099,511,627,776 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInPebiByte">
            <summary>
            The number of bytes in one pebibyte (PiB). 1 PiB = 1,024 TiB = 1,125,899,906,842,624 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInExabiByte">
            <summary>
            The number of bytes in one exbibyte (EiB). 1 EiB = 1,024 PiB = 1,152,921,504,606,846,976 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.KibiByteSymbol">
            <summary>
            The symbol for kibibyte (KiB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.MebiByteSymbol">
            <summary>
            The symbol for mebibyte (MiB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.GibiByteSymbol">
            <summary>
            The symbol for gibibyte (GiB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.TebiByteSymbol">
            <summary>
            The symbol for tebibyte (TiB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.PebiByteSymbol">
            <summary>
            The symbol for pebibyte (PiB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.ExabiByteSymbol">
            <summary>
            The symbol for exbibyte (EiB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.KibiBytes">
            <summary>
            Gets the value in kibibytes (KiB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.MebiBytes">
            <summary>
            Gets the value in mebibytes (MiB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.GibiBytes">
            <summary>
            Gets the value in gibibytes (GiB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.TebiBytes">
            <summary>
            Gets the value in tebibytes (TiB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.PebiBytes">
            <summary>
            Gets the value in pebibytes (PiB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.ExabiBytes">
            <summary>
            Gets the value in exbibytes (EiB).
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromKibiBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of kibibytes (KiB).
            </summary>
            <param name="value">The number of kibibytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromMebiBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of mebibytes (MiB).
            </summary>
            <param name="value">The number of mebibytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromGibiBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of gibibytes (GiB).
            </summary>
            <param name="value">The number of gibibytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromTebiBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of tebibytes (TiB).
            </summary>
            <param name="value">The number of tebibytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromPebiBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of pebibytes (PiB).
            </summary>
            <param name="value">The number of pebibytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromExabiBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of exbibytes (EiB).
            </summary>
            <param name="value">The number of exbibytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddKibiBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of kibibytes (KiB) to this instance.
            </summary>
            <param name="value">The number of kibibytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddMebiBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of mebibytes (MiB) to this instance.
            </summary>
            <param name="value">The number of mebibytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddGibiBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of gibibytes (GiB) to this instance.
            </summary>
            <param name="value">The number of gibibytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddTebiBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of tebibytes (TiB) to this instance.
            </summary>
            <param name="value">The number of tebibytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddPebiBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of pebibytes (PiB) to this instance.
            </summary>
            <param name="value">The number of pebibytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddExabiBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of exbibytes (EiB) to this instance.
            </summary>
            <param name="value">The number of exbibytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.ToBinaryString">
            <summary>
            Returns a string representation of the value using binary units (IEC), formatted with the current culture.
            </summary>
            <returns>A string representation in binary units (e.g., "1.5 GiB").</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.ToBinaryString(System.IFormatProvider)">
            <summary>
            Returns a string representation of the value using binary units (IEC), formatted with the specified format provider.
            </summary>
            <param name="formatProvider">The format provider to use.</param>
            <returns>A string representation in binary units (e.g., "1.5 GiB").</returns>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BitsInByte">
            <summary>
            The number of bits in one byte. Always 8.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BitSymbol">
            <summary>
            The symbol for a bit ("b").
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.ByteSymbol">
            <summary>
            The symbol for a byte ("B").
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.Bits">
            <summary>
            Gets the total number of bits represented by this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.Bytes">
            <summary>
            Gets the total number of bytes represented by this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.LargestWholeNumberBinarySymbol">
            <summary>
            Gets the largest whole number binary unit symbol (IEC) that is less than or equal to the value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.LargestWholeNumberDecimalSymbol">
            <summary>
            Gets the largest whole number decimal unit symbol (SI) that is less than or equal to the value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.LargestWholeNumberBinaryValue">
            <summary>
            Gets the value in the largest whole number binary unit (IEC) that is less than or equal to the value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.LargestWholeNumberDecimalValue">
            <summary>
            Gets the value in the largest whole number decimal unit (SI) that is less than or equal to the value.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> struct from a number of bits.
            </summary>
            <param name="bits">The number of bits.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> struct from a number of bytes.
            </summary>
            <param name="bytes">The number of bytes.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromBits(System.Int64)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of bits.
            </summary>
            <param name="value">The number of bits.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of bytes.
            </summary>
            <param name="value">The number of bytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.ToString">
            <summary>
            Returns a string representation of the value using the default format and current culture.
            </summary>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.ToString(System.String)">
            <summary>
            Returns a string representation of the value using the specified format and current culture.
            </summary>
            <param name="format">The format string.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the value using the specified format and format provider.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">The format provider.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.ToString(System.String,System.IFormatProvider,System.Boolean)">
            <summary>
            Returns a string representation of the value using the specified format, format provider, and unit system.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">The format provider.</param>
            <param name="useBinaryByte">If true, uses binary (IEC) units; otherwise, uses decimal (SI) units.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.
            </summary>
            <param name="value">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified object is a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> and has the same value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Equals(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether the specified <see cref="T:FluentUI.Blazor.Community.ByteSize"/> is equal to the current instance.
            </summary>
            <param name="value">The <see cref="T:FluentUI.Blazor.Community.ByteSize"/> to compare.</param>
            <returns><c>true</c> if both instances represent the same number of bits; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.CompareTo(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Compares the current instance with another <see cref="T:FluentUI.Blazor.Community.ByteSize"/> and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order.
            </summary>
            <param name="other">A <see cref="T:FluentUI.Blazor.Community.ByteSize"/> to compare with this instance.</param>
            <returns>
            A value less than zero if this instance is less than <paramref name="other"/>; zero if equal; greater than zero if this instance is greater.
            </returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Add(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> that is the sum of this instance and the specified <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.
            </summary>
            <param name="bs">The <see cref="T:FluentUI.Blazor.Community.ByteSize"/> to add.</param>
            <returns>The sum as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddBits(System.Int64)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of bits to this instance.
            </summary>
            <param name="value">The number of bits to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of bytes to this instance.
            </summary>
            <param name="value">The number of bytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Subtract(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> that is the difference between this instance and the specified <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.
            </summary>
            <param name="bs">The <see cref="T:FluentUI.Blazor.Community.ByteSize"/> to subtract.</param>
            <returns>The difference as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Addition(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Adds two <see cref="T:FluentUI.Blazor.Community.ByteSize"/> values.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Increment(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Increments the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by one byte.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_UnaryNegation(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Negates the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> value.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Subtraction(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Subtracts one <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from another.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Decrement(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Decrements the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by one byte.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Multiply(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Multiplies two <see cref="T:FluentUI.Blazor.Community.ByteSize"/> values.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Division(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Divides one <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by another.
            </summary>
            <exception cref="T:System.DivideByZeroException">Thrown when <paramref name="b"/> is zero.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Equality(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether two <see cref="T:FluentUI.Blazor.Community.ByteSize"/> values are equal.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Inequality(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether two <see cref="T:FluentUI.Blazor.Community.ByteSize"/> values are not equal.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_LessThan(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether one <see cref="T:FluentUI.Blazor.Community.ByteSize"/> is less than another.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_LessThanOrEqual(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether one <see cref="T:FluentUI.Blazor.Community.ByteSize"/> is less than or equal to another.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_GreaterThan(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether one <see cref="T:FluentUI.Blazor.Community.ByteSize"/> is greater than another.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_GreaterThanOrEqual(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether one <see cref="T:FluentUI.Blazor.Community.ByteSize"/> is greater than or equal to another.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Parse(System.String)">
            <summary>
            Parses the specified string representation of a byte size using the current culture.
            </summary>
            <param name="s">The string to parse (e.g., "1.5 MB", "2 GiB", "1024 B").</param>
            <returns>A <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance representing the parsed value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="s"/> is null or whitespace.</exception>
            <exception cref="T:System.FormatException">Thrown if the string is not in a valid format or contains an unsupported unit.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses the specified string representation of a byte size using the provided format provider.
            </summary>
            <param name="s">The string to parse (e.g., "1.5 MB", "2 GiB", "1024 B").</param>
            <param name="formatProvider">The format provider to use for parsing numbers.</param>
            <returns>A <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance representing the parsed value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="s"/> is null or whitespace.</exception>
            <exception cref="T:System.FormatException">Thrown if the string is not in a valid format or contains an unsupported unit.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Parses the specified string representation of a byte size using the provided number styles and format provider.
            </summary>
            <param name="value">The string to parse (e.g., "1.5 MB", "2 GiB", "1024 B").</param>
            <param name="numberStyles">The number styles to use for parsing the numeric part.</param>
            <param name="formatProvider">The format provider to use for parsing numbers.</param>
            <returns>A <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance representing the parsed value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is null or whitespace.</exception>
            <exception cref="T:System.FormatException">Thrown if the string is not in a valid format or contains an unsupported unit.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.TryParse(System.String,FluentUI.Blazor.Community.ByteSize@)">
            <summary>
            Tries to parse the specified string representation of a byte size using the current culture.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="result">When this method returns, contains the parsed <see cref="T:FluentUI.Blazor.Community.ByteSize"/> value if parsing succeeded, or the default value if parsing failed.</param>
            <returns><c>true</c> if parsing succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,FluentUI.Blazor.Community.ByteSize@)">
            <summary>
            Tries to parse the specified string representation of a byte size using the provided number styles and format provider.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="numberStyles">The number styles to use for parsing the numeric part.</param>
            <param name="formatProvider">The format provider to use for parsing numbers.</param>
            <param name="result">When this method returns, contains the parsed <see cref="T:FluentUI.Blazor.Community.ByteSize"/> value if parsing succeeded, or the default value if parsing failed.</param>
            <returns><c>true</c> if parsing succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInKiloByte">
            <summary>
            The number of bytes in one kilobyte (KB). 1 KB = 1,000 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInMegaByte">
            <summary>
            The number of bytes in one megabyte (MB). 1 MB = 1,000,000 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInGigaByte">
            <summary>
            The number of bytes in one gigabyte (GB). 1 GB = 1,000,000,000 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInTeraByte">
            <summary>
            The number of bytes in one terabyte (TB). 1 TB = 1,000,000,000,000 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInPetaByte">
            <summary>
            The number of bytes in one petabyte (PB). 1 PB = 1,000,000,000,000,000 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInExaByte">
            <summary>
            The number of bytes in one exabyte (EB). 1 EB = 1,000,000,000,000,000,000 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.KiloByteSymbol">
            <summary>
            The symbol for kilobyte (KB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.MegaByteSymbol">
            <summary>
            The symbol for megabyte (MB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.GigaByteSymbol">
            <summary>
            The symbol for gigabyte (GB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.TeraByteSymbol">
            <summary>
            The symbol for terabyte (TB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.PetaByteSymbol">
            <summary>
            The symbol for petabyte (PB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.ExaByteSymbol">
            <summary>
            The symbol for exabyte (EB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.KiloBytes">
            <summary>
            Gets the value in kilobytes (KB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.MegaBytes">
            <summary>
            Gets the value in megabytes (MB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.GigaBytes">
            <summary>
            Gets the value in gigabytes (GB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.TeraBytes">
            <summary>
            Gets the value in terabytes (TB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.PetaBytes">
            <summary>
            Gets the value in petabytes (PB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.ExaBytes">
            <summary>
            Gets the value in exabytes (EB).
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromKiloBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of kilobytes (KB).
            </summary>
            <param name="value">The number of kilobytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromMegaBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of megabytes (MB).
            </summary>
            <param name="value">The number of megabytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromGigaBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of gigabytes (GB).
            </summary>
            <param name="value">The number of gigabytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromTeraBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of terabytes (TB).
            </summary>
            <param name="value">The number of terabytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromPetaBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of petabytes (PB).
            </summary>
            <param name="value">The number of petabytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromExaBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of exabytes (EB).
            </summary>
            <param name="value">The number of exabytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddKiloBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of kilobytes (KB) to this instance.
            </summary>
            <param name="value">The number of kilobytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddMegaBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of megabytes (MB) to this instance.
            </summary>
            <param name="value">The number of megabytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddGigaBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of gigabytes (GB) to this instance.
            </summary>
            <param name="value">The number of gigabytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddTeraBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of terabytes (TB) to this instance.
            </summary>
            <param name="value">The number of terabytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddPetaBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of petabytes (PB) to this instance.
            </summary>
            <param name="value">The number of petabytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddExaBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of exabytes (EB) to this instance.
            </summary>
            <param name="value">The number of exabytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSizeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSizeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSizeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSizeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:FluentUI.Blazor.Community.EffectBuilder">
            <summary>
            Represents a builder for constructing CSS filter effects.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.EffectBuilder._effects">
            <summary>
            Represents the list of effects to be applied.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.EffectBuilder._invariantCulture">
            <summary>
            Represents the culture info for formatting.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.EffectBuilder.AddBlur(System.Double,FluentUI.Blazor.Community.Components.LengthUnit)">
            <summary>
            Adds a blur effect to the current effect builder with the specified intensity and unit.
            </summary>
            <param name="value">The intensity of the blur effect. Must be a non-negative finite number.</param>
            <param name="unit">The unit of measurement for the blur intensity. Defaults to <see cref="F:FluentUI.Blazor.Community.Components.LengthUnit.Pixels"/>.</param>
            <returns>The current <see cref="T:FluentUI.Blazor.Community.EffectBuilder"/> instance, allowing for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is negative, not a number, or infinite.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.EffectBuilder.AddBrightness(System.Double)">
            <summary>
            Adds a brightness adjustment effect to the current effect builder.
            </summary>
            <param name="value">The brightness adjustment value. Must be a non-negative finite number.</param>
            <returns>The current <see cref="T:FluentUI.Blazor.Community.EffectBuilder"/> instance, allowing for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is less than 0, is <see cref="F:System.Double.NaN"/>, or is <see
            cref="F:System.Double.PositiveInfinity"/> or <see cref="F:System.Double.NegativeInfinity"/>.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.EffectBuilder.AddContrast(System.Double)">
            <summary>
            Adds a contrast adjustment effect with the specified value to the current effect builder.
            </summary>
            <param name="value">The contrast adjustment value. Must be a finite number greater than or equal to 0.</param>
            <returns>The current <see cref="T:FluentUI.Blazor.Community.EffectBuilder"/> instance, allowing for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is less than 0, is <see cref="F:System.Double.NaN"/>, or is infinite.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.EffectBuilder.AddGrayscale(System.Double)">
            <summary>
            Adds a grayscale effect to the current effect builder with the specified intensity.
            </summary>
            <param name="value">A value between 0 and 1 (inclusive) that specifies the intensity of the grayscale effect,  where 0 represents no
            effect and 1 represents full grayscale.</param>
            <returns>The current <see cref="T:FluentUI.Blazor.Community.EffectBuilder"/> instance, allowing for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is less than 0, greater than 1, or is not a finite number.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.EffectBuilder.AddHueRotate(System.Double,FluentUI.Blazor.Community.Components.AngleUnit)">
            <summary>
            Adds a hue rotation effect to the current effect builder.
            </summary>
            <param name="angle">The angle by which to rotate the hue. Must be a valid finite number.</param>
            <param name="unit">The unit of the angle, such as degrees or radians. The default is <see cref="F:FluentUI.Blazor.Community.Components.AngleUnit.Degrees"/>.</param>
            <returns>The current <see cref="T:FluentUI.Blazor.Community.EffectBuilder"/> instance, allowing for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="angle"/> is not a valid finite number.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.EffectBuilder.AddInvert(System.Double)">
            <summary>
            Adds an invert effect with the specified intensity to the effect builder.
            </summary>
            <param name="value">The intensity of the invert effect, specified as a value between 0 and 1, inclusive. A value of 0 applies no
            inversion, while a value of 1 applies full inversion.</param>
            <returns>The current <see cref="T:FluentUI.Blazor.Community.EffectBuilder"/> instance, allowing for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is less than 0, greater than 1, or is not a finite number.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.EffectBuilder.AddOpacity(System.Double)">
            <summary>
            Adds an opacity effect to the current effect builder with the specified value.
            </summary>
            <param name="value">A value between 0 and 1 (inclusive) representing the opacity level, where 0 is fully transparent and 1 is fully
            opaque.</param>
            <returns>The current <see cref="T:FluentUI.Blazor.Community.EffectBuilder"/> instance, allowing for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is less than 0, greater than 1, or is not a finite number.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.EffectBuilder.AddSaturate(System.Double)">
            <summary>
            Adds a saturation effect with the specified intensity to the effect builder.
            </summary>
            <param name="value">The intensity of the saturation effect. Must be a non-negative finite number.</param>
            <returns>The current <see cref="T:FluentUI.Blazor.Community.EffectBuilder"/> instance, allowing for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is less than 0, is <see cref="F:System.Double.NaN"/>, or is infinite.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.EffectBuilder.AddSepia(System.Double)">
            <summary>
            Adds a sepia tone effect to the current effect chain with the specified intensity.
            </summary>
            <param name="value">The intensity of the sepia effect, ranging from 0 to 1. A value of 0 applies no sepia effect,  while a value of
            1 applies the maximum sepia effect.</param>
            <returns>The current <see cref="T:FluentUI.Blazor.Community.EffectBuilder"/> instance, allowing for method chaining.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is less than 0, greater than 1, or is not a finite number.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.EffectBuilder.AddDropShadow(FluentUI.Blazor.Community.Components.CssLength,FluentUI.Blazor.Community.Components.CssLength,FluentUI.Blazor.Community.Components.CssLength,FluentUI.Blazor.Community.Components.RgbaColor)">
            <summary>
            Adds a drop shadow effect to the current effect builder.
            </summary>
            <remarks>This method appends a CSS-compatible drop shadow effect to the internal list of effects.  The
            resulting shadow is defined by the specified offsets, blur radius, and color.</remarks>
            <param name="offsetX">The horizontal offset of the shadow. This value is specified as a <see cref="T:FluentUI.Blazor.Community.Components.CssLength"/>.</param>
            <param name="offsetY">The vertical offset of the shadow. This value is specified as a <see cref="T:FluentUI.Blazor.Community.Components.CssLength"/>.</param>
            <param name="blurRadius">The blur radius of the shadow. This value is specified as a <see cref="T:FluentUI.Blazor.Community.Components.CssLength"/> and must be non-negative.</param>
            <param name="color">The color of the shadow, specified as an <see cref="T:FluentUI.Blazor.Community.Components.RgbaColor"/>.</param>
            <returns>The current <see cref="T:FluentUI.Blazor.Community.EffectBuilder"/> instance, allowing for method chaining.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.EffectBuilder.Build">
            <summary>
            Builds and returns a string representation of the effects, separated by spaces.
            </summary>
            <remarks>If no effects are present, the method returns <see langword="null"/>.</remarks>
            <returns>A string containing the effects separated by spaces, or <see langword="null"/> if no effects are present.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Extensions.ParameterViewExtensions">
            <summary>
            Represents extensions for <see cref="T:Microsoft.AspNetCore.Components.ParameterView"/> struct.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Extensions.ParameterViewExtensions.HasValueChanged``1(Microsoft.AspNetCore.Components.ParameterView,System.String,``0)">
            <summary>
            Gets a value indicating if the <paramref name="parameterName"/> has changed.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="parameterView">Collection of parameters to use.</param>
            <param name="parameterName">Name of the parameter to check.</param>
            <param name="value">Value of the parameter.</param>
            <returns>Returns <see langword="true" /> the value of the parameter has changed, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Extensions.ParameterViewExtensions.HasValueChanged(Microsoft.AspNetCore.Components.ParameterView,System.String,System.String,System.StringComparison)">
            <summary>
            Gets a value indicating if the <paramref name="parameterName"/> has changed.
            </summary>
            <param name="parameterView">Collection of parameters to use.</param>
            <param name="parameterName">Name of the parameter to check.</param>
            <param name="value">Value of the parameter.</param>
            <param name="stringComparison">Type of comparison to use.</param>
            <returns>Returns <see langword="true" /> the value of the parameter has changed, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Extensions.RenderTreeBuilderExtensions">
            <summary>
            Represents the extensions for the <see cref="T:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder"/> class.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Extensions.RenderTreeBuilderExtensions.AddChildContent(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder,System.Int32,Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Adds a child content into the <paramref name="renderTreeBuilder"/> by passing a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> delegate.
            </summary>
            <param name="renderTreeBuilder">RenderTreeBuilder to use.</param>
            <param name="sequence">Number of the sequence.</param>
            <param name="renderFragment">RenderFragment which represents the child content.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Extensions.ServiceCollectionExtensions">
            <summary>
            Represents the extensions for the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Extensions.ServiceCollectionExtensions.AddFluentCxUIComponents(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add common services required by the FluentCx UI Web Components for Blazor library.
            </summary>
            <param name="services">Service collection.</param>
            <returns>Returns the collection of services.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.ColorUtils">
            <summary>
            Provides utility methods for working with colors, including conversions between color formats, validation of color
            values, and generation of color gradients and palettes.
            </summary>
            <remarks>This class includes methods for validating and normalizing hexadecimal color codes, converting
            between RGB, HSL, and hexadecimal formats, and generating color gradients and palettes based on various strategies.
            It is designed to simplify common color manipulation tasks in applications that work with color data. <para> The
            methods in this class are static and thread-safe, making it suitable for use in multi-threaded environments.
            </para></remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.IsValidHex(System.String)">
            <summary>
            Determines whether the specified string represents a valid hexadecimal color code.
            </summary>
            <remarks>A valid hexadecimal color code consists of either 3 or 6 hexadecimal digits, optionally
            prefixed with a '#' character. The method ignores leading and trailing whitespace.</remarks>
            <param name="hex">The string to validate. This can optionally include a leading '#' character.</param>
            <returns><see langword="true"/> if the string is a valid hexadecimal color code with 3 or 6 digits; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.IsValidHexOrCssName(System.String)">
            <summary>
            Determines whether the specified string represents a valid hexadecimal color code  or a recognized CSS color
            name.
            </summary>
            <remarks>A valid hexadecimal color code must start with a '#' character followed by 3 or 6 
            hexadecimal digits. Recognized CSS color names are determined by the  <c>CssColorNamesUtils</c>
            utility.</remarks>
            <param name="value">The string to validate. This can be a hexadecimal color code  (e.g., "#FFFFFF") or a CSS color name (e.g.,
            "red").</param>
            <returns><see langword="true"/> if the string is a valid hexadecimal color code or a recognized  CSS color name;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.NormalizeToHex(System.String)">
            <summary>
            Normalizes a color value to its hexadecimal representation.
            </summary>
            <remarks>This method trims whitespace from the input and attempts to interpret it as a valid
            hexadecimal color code or a CSS color name. If the input is already a valid hexadecimal color code, it is
            normalized to the standard format. If the input is a recognized CSS color name, it is converted to its
            corresponding hexadecimal value.</remarks>
            <param name="value">The input color value, which can be a hexadecimal color code, a CSS color name, or a string to be normalized.</param>
            <returns>A normalized hexadecimal color code in the format "#RRGGBB". If the input is null, empty, or invalid, the method
            returns "#000000".</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.NormalizeHex(System.String)">
            <summary>
            Normalizes a hexadecimal color code to a standard format.
            </summary>
            <remarks>If the input is in short form (e.g., "#123"), it will be expanded to long form (e.g.,
            "#112233"). The method ensures the returned value always starts with a "#" and is in uppercase.</remarks>
            <param name="hex">The hexadecimal color code to normalize. This can be in short form (e.g., "#123"), long form (e.g., "#112233"),
            or null/whitespace.</param>
            <returns>A normalized hexadecimal color code in uppercase long form (e.g., "#112233").  Returns "#000000" if <paramref
            name="hex"/> is null, empty, or consists only of whitespace.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.HexToRgb(System.String)">
            <summary>
            Converts a hexadecimal color code to its RGB components.
            </summary>
            <remarks>The method normalizes the input hexadecimal string by removing the '#' character before
            parsing.</remarks>
            <param name="hex">A string representing the hexadecimal color code. The string must start with a '#' character followed by six
            hexadecimal digits (e.g., "#FF5733").</param>
            <returns>A tuple containing the red, green, and blue components of the color, each as an integer in the range 0 to 255.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.HexToRgbString(System.String)">
            <summary>
            Converts a hexadecimal color code to its RGB string representation.
            </summary>
            <param name="hex">The hexadecimal color code, starting with a '#' character, followed by 6 or 3 hexadecimal digits.</param>
            <returns>A string representing the RGB values in the format "R,G,B", where R, G, and B are integers between 0 and 255.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.RgbToHex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts RGB color values to a hexadecimal color code.
            </summary>
            <param name="r">The red component of the color, ranging from 0 to 255.</param>
            <param name="g">The green component of the color, ranging from 0 to 255.</param>
            <param name="b">The blue component of the color, ranging from 0 to 255.</param>
            <returns>A string representing the hexadecimal color code, prefixed with '#'.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.HexToHsl(System.String)">
            <summary>
            Converts a hexadecimal color code to its equivalent HSL (Hue, Saturation, Lightness) representation.
            </summary>
            <remarks>The input hexadecimal color code must be in the format "#RRGGBB" or "#RRGGBBAA". If the alpha
            channel is included, it is ignored in the conversion.</remarks>
            <param name="hex">The hexadecimal color code, starting with a '#' character, followed by 6 or 8 hexadecimal digits.</param>
            <returns>A tuple containing the HSL representation of the color: <list type="bullet"> <item><description><c>H</c>: The
            hue, in degrees, ranging from 0 to 360.</description></item> <item><description><c>S</c>: The saturation, as a
            percentage, ranging from 0 to 1.</description></item> <item><description><c>L</c>: The lightness, as a
            percentage, ranging from 0 to 1.</description></item> </list></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.HslToHex(System.Double,System.Double,System.Double)">
            <summary>
            Converts a color from HSL (Hue, Saturation, Lightness) format to its hexadecimal color representation.
            </summary>
            <remarks>The method internally converts the HSL values to RGB and then formats the RGB values as a
            hexadecimal string.</remarks>
            <param name="h">The hue of the color, specified as a value between 0 and 360 degrees.</param>
            <param name="s">The saturation of the color, specified as a value between 0.0 and 1.0.</param>
            <param name="l">The lightness of the color, specified as a value between 0.0 and 1.0.</param>
            <returns>A string representing the color in hexadecimal format, prefixed with a '#' character.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.RgbToHsl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts an RGB color value to its equivalent HSL (Hue, Saturation, Lightness) representation.
            </summary>
            <remarks>The method normalizes the hue to ensure it is always within the range 0 to 360 degrees.
            Saturation and lightness values are clamped to the range 0 to 1.</remarks>
            <param name="r">The red component of the color, in the range 0 to 255.</param>
            <param name="g">The green component of the color, in the range 0 to 255.</param>
            <param name="b">The blue component of the color, in the range 0 to 255.</param>
            <returns>A tuple containing the HSL representation of the color: <list type="bullet"> <item><description><c>H</c> (Hue):
            The hue of the color, in degrees, in the range 0 to 360.</description></item> <item><description><c>S</c>
            (Saturation): The saturation of the color, in the range 0 to 1.</description></item> <item><description><c>L</c>
            (Lightness): The lightness of the color, in the range 0 to 1.</description></item> </list></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.HslToRgb(System.Double,System.Double,System.Double)">
            <summary>
            Converts a color from HSL (Hue, Saturation, Lightness) color space to RGB (Red, Green, Blue) color space.
            </summary>
            <remarks>This method normalizes the hue value to ensure it falls within the valid range [0, 360] and
            clamps the saturation and lightness values to the range [0, 1]. The resulting RGB values are calculated based on
            the HSL-to-RGB conversion formula and are clamped to the range [0, 255].</remarks>
            <param name="h">The hue of the color, in degrees. Must be in the range [0, 360].</param>
            <param name="s">The saturation of the color, as a value between 0 and 1. Must be in the range [0, 1].</param>
            <param name="l">The lightness of the color, as a value between 0 and 1. Must be in the range [0, 1].</param>
            <returns>A tuple containing the RGB representation of the color: <list type="bullet"> <item><description><c>R</c>: The
            red component, as an integer in the range [0, 255].</description></item> <item><description><c>G</c>: The green
            component, as an integer in the range [0, 255].</description></item> <item><description><c>B</c>: The blue
            component, as an integer in the range [0, 255].</description></item> </list></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.GenerateRandomHex(System.Int32)">
            <summary>
            Generates a list of unique random hexadecimal color codes.
            </summary>
            <remarks>The method ensures that all generated color codes are unique and case-insensitive. The format
            of each color code is a six-digit hexadecimal value prefixed with a hash symbol (#), representing RGB
            values.</remarks>
            <param name="count">The number of unique hexadecimal color codes to generate. Must be a non-negative integer.</param>
            <returns>A list of strings, where each string is a unique hexadecimal color code in the format "#RRGGBB".</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.GenerateGradient(System.String,System.Int32,FluentUI.Blazor.Community.Components.GradientStrategy,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <summary>
            Generates a gradient of colors based on the specified base color, number of steps, and gradient strategy.
            </summary>
            <remarks>The gradient generation strategy determines how the colors are interpolated: <list
            type="bullet"> <item> <description><see cref="F:FluentUI.Blazor.Community.Components.GradientStrategy.Shades"/>: Adjusts the lightness of the base
            color to create darker or lighter shades.</description> </item> <item> <description><see
            cref="F:FluentUI.Blazor.Community.Components.GradientStrategy.Tints"/>: Adjusts both saturation and lightness to create tints of the base
            color.</description> </item> <item> <description><see cref="F:FluentUI.Blazor.Community.Components.GradientStrategy.Saturation"/>: Adjusts the
            saturation of the base color while keeping lightness constant.</description> </item> <item> <description><see
            cref="F:FluentUI.Blazor.Community.Components.GradientStrategy.HueShift"/>: Shifts the hue of the base color to create a range of colors around the
            color wheel.</description> </item> </list> If the <paramref name="opts"/> parameter specifies <see
            cref="P:FluentUI.Blazor.Community.Components.GenerationOptions.Reverse"/> as <see langword="true"/>, the resulting gradient will be reversed.</remarks>
            <param name="baseHex">The base color in hexadecimal format (e.g., "#FF5733").</param>
            <param name="steps">The number of colors to generate in the gradient. Must be greater than zero.</param>
            <param name="strategy">The strategy used to generate the gradient, such as shades, tints, saturation, or hue shift.</param>
            <param name="opts">Optional configuration for gradient generation, including lightness, saturation, and reversal options. If null,
            default options are used.</param>
            <returns>A list of hexadecimal color strings representing the generated gradient. The list will contain distinct colors,
            and its order may be reversed based on the specified options.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.GenerateCustomGradient(System.String,System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <summary>
            Generates a gradient of colors between two specified hex color values.
            </summary>
            <remarks>The gradient is generated by interpolating the HSL (Hue, Saturation, Lightness) values of the
            start and end colors. The interpolation can be customized using the <paramref name="opts"/> parameter.</remarks>
            <param name="startHex">The starting color of the gradient, represented as a hex string (e.g., "#FF0000").</param>
            <param name="endHex">The ending color of the gradient, represented as a hex string (e.g., "#0000FF").</param>
            <param name="steps">The number of colors to generate in the gradient. Must be greater than zero.</param>
            <param name="opts">Optional configuration for gradient generation, such as saturation and lightness constraints,  and whether to
            reverse the gradient. If null, default options are used.</param>
            <returns>A list of hex color strings representing the gradient. The list contains <paramref name="steps"/> colors, 
            starting with <paramref name="startHex"/> and ending with <paramref name="endHex"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.GenerateScheme(System.String,FluentUI.Blazor.Community.Components.ColorPaletteMode,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <summary>
            Generates a color scheme based on the specified base color, palette mode, and number of steps.
            </summary>
            <remarks>The generated color scheme varies depending on the specified <paramref name="mode"/>: <list
            type="bullet"> <item> <term>Complementary</term> <description>Generates a scheme with complementary colors split
            evenly across the specified steps.</description> </item> <item> <term>Analogous</term> <description>Generates a
            scheme with colors adjacent to the base color on the color wheel.</description> </item> <item>
            <term>Triadic</term> <description>Generates a scheme with three evenly spaced colors on the color
            wheel.</description> </item> <item> <term>SplitComplementary</term> <description>Generates a scheme with colors
            split from the complementary color.</description> </item> <item> <term>Monochrome</term> <description>Generates
            a scheme with shades of the base color.</description> </item> <item> <term>Warm</term> <description>Generates a
            scheme with warm colors (e.g., reds and yellows).</description> </item> <item> <term>Cool</term>
            <description>Generates a scheme with cool colors (e.g., blues and cyans).</description> </item> <item>
            <term>Pastel</term> <description>Generates a scheme with soft, light colors.</description> </item> <item>
            <term>Neon</term> <description>Generates a scheme with bright, vibrant colors.</description> </item> <item>
            <term>Greyscale</term> <description>Generates a scheme with shades of grey.</description> </item> <item>
            <term>AccessibilitySafe</term> <description>Generates a predefined scheme of colors optimized for
            accessibility.</description> </item> </list> The method ensures that the returned list contains distinct colors,
            ignoring case.</remarks>
            <param name="baseHex">The base color in hexadecimal format (e.g., "#FF5733").</param>
            <param name="mode">The <see cref="T:FluentUI.Blazor.Community.Components.ColorPaletteMode"/> that determines the type of color scheme to generate.</param>
            <param name="steps">The number of colors to include in the generated scheme. Must be greater than zero.</param>
            <param name="opts">Optional configuration for color generation, such as gradient strategy or blending options. If null, default
            options are used.</param>
            <returns>A list of hexadecimal color strings representing the generated color scheme. The list will contain distinct
            colors.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.InterpolateEasingValue(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <summary>
            Calculates the interpolated value based on the current step, total steps, and easing options.
            </summary>
            <remarks>The method supports multiple easing functions, including exponential and sine-based easing.
            If <paramref name="steps"/> is 1, the method returns 1.0 regardless of the easing function.</remarks>
            <param name="i">The current step index, where 0 represents the first step.</param>
            <param name="steps">The total number of steps. Must be greater than 0.</param>
            <param name="opts">The options specifying the easing function to apply.</param>
            <returns>A double representing the interpolated value, adjusted according to the specified easing function.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linearly interpolates between two values based on a weighting factor.
            </summary>
            <param name="a">The starting value of the interpolation.</param>
            <param name="b">The ending value of the interpolation.</param>
            <param name="t">The interpolation factor, where 0.0 returns <paramref name="a"/> and 1.0 returns <paramref name="b"/>. Values
            outside the range [0.0, 1.0] will result in extrapolation.</param>
            <returns>The interpolated value, calculated as a weighted average of <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.ShortestHueLerp(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates between two hue values along the shortest path on the color wheel.
            </summary>
            <remarks>This method ensures that the interpolation follows the shortest path on the hue circle,
            accounting for the circular nature of hue values. The result is always normalized to the range [0,
            360).</remarks>
            <param name="h1">The starting hue, in degrees, where 0 ≤ <paramref name="h1"/> &lt; 360.</param>
            <param name="h2">The ending hue, in degrees, where 0 ≤ <paramref name="h2"/> &lt; 360.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.  A value of 0.0 returns <paramref
            name="h1"/>, and a value of 1.0 returns <paramref name="h2"/>.</param>
            <returns>The interpolated hue, in degrees, normalized to the range [0, 360).</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.Clamp01(System.Double)">
            <summary>
            Clamps the specified value to the range [0.0, 1.0].
            </summary>
            <param name="value">The value to clamp.</param>
            <returns>The clamped value, which will be between 0.0 and 1.0, inclusive.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.Clamp255(System.Int32)">
            <summary>
            Clamps the specified integer value to the range of 0 to 255, inclusive.
            </summary>
            <param name="value">The integer value to clamp.</param>
            <returns>The clamped value, which will be 0 if <paramref name="value"/> is less than 0,  255 if <paramref name="value"/> is
            greater than 255, or <paramref name="value"/> itself if it is within the range.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.NormalizeHue(System.Double)">
            <summary>
            Normalizes a hue value to ensure it falls within the range of 0 to 360 degrees.
            </summary>
            <param name="h">The hue value, in degrees, which may be any real number.</param>
            <returns>The normalized hue value, in the range [0, 360).</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.CssColorNamesUtils">
            <summary>
            Retrieves hex values for standard CSS color names.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Helpers.CssColorNamesUtils.DefaultHex">
            <summary>
            Default hex value used when no color name is provided.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Helpers.CssColorNamesUtils._map">
            <summary>
            Represents a mapping of standard CSS color names to their corresponding hex values.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.CssColorNamesUtils.TryGetHex(System.String,System.String@)">
            <summary>
            Tries to get the hex value for a given CSS color name.
            </summary>
            <param name="name">Name of the CSS color.</param>
            <param name="hex">Hex value of the color.</param>
            <returns>Returns <see langword="true" /> if the value was found,
            <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.ImagePalette">
            <summary>
            Retrieves the dominant colors from an image using SkiaSharp.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ImagePalette.ExtractColorsFromImage(System.IO.Stream,System.Int32)">
            <summary>
            Extracts the most frequent colors from an image stream.
            </summary>
            <param name="imageStream">Stream of the image.</param>
            <param name="count">Number of color to take.</param>
            <returns>Returns the list of the most frequent colors extracted from the image.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.MathHelper">
            <summary>
            Represents a helper class for mathematical conversions and calculations.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Helpers.MathHelper.Radians">
            <summary>
            Represents the conversion factor from degrees to radians.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Helpers.MathHelper.Degrees">
            <summary>
            Represents the conversion factor from radians to degrees.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Helpers.MathHelper.TwoPi">
            <summary>
            Represents the value of 2π (two times pi).
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.MathHelper.ToRadians(System.Double)">
            <summary>
            Converts an angle from degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees to be converted.</param>
            <returns>The equivalent angle in radians.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.MathHelper.ToDegrees(System.Double)">
            <summary>
            Converts an angle from radians to degrees.
            </summary>
            <param name="radians">The angle in radians to convert.</param>
            <returns>The equivalent angle in degrees.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.PathHelper">
            <summary>
            Represents a helper class for path operations.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.PathHelper.GetSegments(System.String)">
            <summary>
            Gets the segments of the specified path.
            </summary>
            <param name="path">Path to segment.</param>
            <returns>Returns an array of <see cref="T:System.String"/> which represent the segments of the path.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.RunningWasmHelper">
            <summary>
            Helper class to determine if the application is running in a WebAssembly environment.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Helpers.RunningWasmHelper.IsWasm">
            <summary>
            Gets a value indicating whether the application is running in a WebAssembly environment.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.SvgConverter.ConvertToImage(System.String,FluentUI.Blazor.Community.Components.SignatureImageFormat,System.Int32)">
            <summary>
            Converts an SVG string to an image in the specified format and quality.
            </summary>
            <remarks>The method uses SkiaSharp to render the SVG content and encode it into the specified image
            format. The output image will have a transparent background if the SVG does not specify a background
            color.</remarks>
            <param name="svg">The SVG content as a string. This value cannot be <see langword="null"/> or empty.</param>
            <param name="format">The desired image format, such as PNG or JPEG.</param>
            <param name="quality">The quality of the output image, ranging from 0 to 100. Higher values indicate better quality.</param>
            <returns>A byte array representing the image data in the specified format.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.SvgConverter.ConvertToPdf(System.String)">
            <summary>
            Converts an SVG string to a PDF document represented as a byte array.
            </summary>
            <remarks>This method uses SkiaSharp to render the SVG content and generate a PDF document.  The
            dimensions of the PDF page are determined by the bounds of the SVG content.</remarks>
            <param name="svg">The SVG content as a string. This must be a valid SVG document.</param>
            <returns>A byte array containing the PDF representation of the provided SVG content.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.UnitFormatHelper">
            <summary>
            Represents a helper class for formatting CSS unit values.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Helpers.UnitFormatHelper.pattern">
            <summary>
            Represents a regex pattern to match valid CSS unit values.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.UnitFormatHelper.Format``1(``0)">
            <summary>
            Formats the specified value as a CSS unit string.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">Value to format.</param>
            <returns>Returns the formatted value as a CSS unit string.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Security.EmailAddressRuleAttribute">
            <summary>
            Specifies that a property must contain a valid email address format.
            </summary>
            <remarks>Apply this attribute to a property to enforce email address validation when using data
            annotation-based validation frameworks. The validation checks that the property's value conforms to a standard email
            address pattern, but does not guarantee that the email address exists or is deliverable.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Security.EmailAddressRuleAttribute.emailPattern">
            <summary>
            Represents the regular expression pattern used to validate email addresses according to RFC 5322 specifications.
            </summary>
            <remarks>This pattern supports most valid email address formats, including quoted strings and domain
            literals. It may not cover all edge cases defined by the RFC, but is suitable for general-purpose email
            validation in typical applications.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.EmailAddressRuleAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.EmailAddressRuleAttribute.EmailRegex">
            <remarks>
            Pattern:<br/>
            <code>(?:[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)])</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase</code><br/>
            Explanation:<br/>
            <code>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [!#-'*+-/-9=?A-Z^-~\u0130\u212A] greedily at least once.<br/>
                    ○ Loop greedily any number of times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match a character in the set [!#-'*+-/-9=?A-Z^-~\u0130\u212A] atomically at least once.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '"'.<br/>
                    ○ Loop greedily any number of times.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a character in the set [\u0001-\b\v\f\u000E-\u001F!#-[]-\u007F\u0130\u212A].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '\\'.<br/>
                                ○ Match a character in the set [\u0001-\t\v\f\u000E-\u007F\u0130\u212A].<br/>
                    ○ Match '"'.<br/>
            ○ Match '@'.<br/>
            ○ Match with 2 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Loop greedily at least once.<br/>
                        ○ Match a character in the set [0-9A-Za-z\u0130\u212A].<br/>
                        ○ Optional (greedy).<br/>
                            ○ Match a character in the set [-0-9A-Za-z\u0130\u212A] greedily any number of times.<br/>
                            ○ Match a character in the set [0-9A-Za-z\u0130\u212A].<br/>
                        ○ Match '.'.<br/>
                    ○ Match a character in the set [0-9A-Za-z\u0130\u212A].<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match a character in the set [-0-9A-Za-z\u0130\u212A] greedily any number of times.<br/>
                        ○ Match a character in the set [0-9A-Za-z\u0130\u212A].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match an empty string.<br/>
                    ○ Loop exactly 3 times.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match an empty string.<br/>
                                        ○ Match a character in the set [0-5].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match an empty string.<br/>
                                        ○ Match a character in the set [0-9].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01] greedily, optionally.<br/>
                                ○ Match a character in the set [0-9] atomically at least 1 and at most 2 times.<br/>
                        ○ Match '.'.<br/>
                    ○ Match with 3 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match '2'.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match an empty string.<br/>
                                    ○ Match a character in the set [0-5].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match an empty string.<br/>
                                    ○ Match a character in the set [0-9].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a character in the set [01] greedily, optionally.<br/>
                            ○ Match a character in the set [0-9] atomically at least 1 and at most 2 times.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a character in the set [-0-9A-Za-z\u0130\u212A] greedily any number of times.<br/>
                            ○ Match a character in the set [0-9A-Za-z\u0130\u212A].<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at least once.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a character in the set [\u0001-\b\v\f\u000E-\u001F!-\u007F\u0130\u212A].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '\\'.<br/>
                                        ○ Match a character in the set [\u0001-\t\v\f\u000E-\u007F\u0130\u212A].<br/>
                    ○ Match ']'.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Security.IPasswordRuleOptions">
            <summary>
            Defines a set of options for configuring password rule validation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.IPasswordRuleOptions.MinimumLength">
            <summary>
            Gets the minimum allowed length for the value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.IPasswordRuleOptions.MaximumLength">
            <summary>
            Gets the maximum allowed length for the value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.IPasswordRuleOptions.MinimumLowercaseCharacters">
            <summary>
            Gets the minimum number of lowercase characters required in the value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.IPasswordRuleOptions.MinimumUppercaseCharacters">
            <summary>
            Gets the minimum number of uppercase characters required in a password.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.IPasswordRuleOptions.MinimumDigits">
            <summary>
            Gets the minimum number of digits to display in the formatted output.
            </summary>
            <remarks>If the formatted value contains fewer digits than this property specifies, leading zeros are
            added to meet the minimum digit count. The value must be greater than or equal to 1.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.IPasswordRuleOptions.MinimumSpecialCharacters">
            <summary>
            Gets the minimum number of special characters required in a password.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Security.IRuleLocalization">
            <summary>
            Defines localized messages and formatting for some validation rules.
            </summary>
            <remarks>Implement this interface to provide culture-specific error messages or descriptions for value
            requirements. This is typically used to display user-friendly, localized feedback when validating value in
            applications that support multiple languages.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.IRuleLocalization.ValueCannotBeNullOrEmpty">
            <summary>
            Gets the error message displayed when a value is null or empty.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.IRuleLocalization.IsNotValidEmail">
            <summary>
            Gets the error message to display when an email address is not valid.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.IRuleLocalization.MinimumLength(System.Int32)">
            <summary>
            Returns a validation error message if the specified minimum length requirement is not met.
            </summary>
            <param name="minLength">The minimum number of characters required. Must be greater than or equal to 0.</param>
            <returns>A string containing the error message if the input does not meet the minimum length; otherwise, null if the
            requirement is satisfied.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.IRuleLocalization.MaximumLength(System.Int32)">
            <summary>
            Returns a string consisting of the maximum allowed number of characters, as specified by the provided length.
            </summary>
            <param name="maxLength">The maximum number of characters to include in the returned string. Must be greater than or equal to zero.</param>
            <returns>A string with a length equal to <paramref name="maxLength"/>. Returns an empty string if <paramref
            name="maxLength"/> is zero.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.IRuleLocalization.RequireLowercase(System.Int32)">
            <summary>
            Returns a string consisting of the specified number of randomly selected lowercase alphabetic characters.
            </summary>
            <param name="count">The number of lowercase characters to include in the returned string. Must be non-negative.</param>
            <returns>A string containing exactly the specified number of randomly chosen lowercase letters. Returns an empty string
            if count is 0.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.IRuleLocalization.RequireUppercase(System.Int32)">
            <summary>
            Returns a string containing the specified number of uppercase letters.
            </summary>
            <param name="count">The number of uppercase letters to include in the returned string. Must be non-negative.</param>
            <returns>A string consisting of exactly the specified number of uppercase letters. Returns an empty string if count is 0.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.IRuleLocalization.RequireDigit(System.Int32)">
            <summary>
            Returns a string containing the specified number of random numeric digits.
            </summary>
            <param name="count">The number of digits to include in the returned string. Must be non-negative.</param>
            <returns>A string consisting of exactly the specified number of random digits. Returns an empty string if count is 0.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.IRuleLocalization.RequireSpecial(System.Int32)">
            <summary>
            Returns a string containing a special value based on the specified count.
            </summary>
            <param name="count">The number of special items to include in the result. Must be greater than or equal to zero.</param>
            <returns>A string representing the special value generated from the specified count. Returns an empty string if count is
            zero.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Security.PasswordError">
            <summary>
            Represents a password validation error, including a localized error message and the specific requirement that was
            not met.
            </summary>
            <param name="localizedError">The localized error message describing the password validation failure. Cannot be null.</param>
            <param name="requirement">An integer identifying the specific password requirement that was not satisfied.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordError.#ctor(System.String,System.Int32)">
            <summary>
            Represents a password validation error, including a localized error message and the specific requirement that was
            not met.
            </summary>
            <param name="localizedError">The localized error message describing the password validation failure. Cannot be null.</param>
            <param name="requirement">An integer identifying the specific password requirement that was not satisfied.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordError.LocalizedError">
            <summary>
            Gets the localized error message associated with the current operation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordError.Requirement">
            <summary>
            Gets the numeric requirement value associated with this instance.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Security.PasswordRule">
            <summary>
            Represents the rules to generate a passowrd.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Security.PasswordRule.PasswordRuleType">
            <summary>
            Type of rules allowed for the password.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Security.PasswordRule.PasswordRuleType.Lowercase">
            <summary>
            The password must have lowercase character.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Security.PasswordRule.PasswordRuleType.Uppercase">
            <summary>
            The password must have uppercase character.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Security.PasswordRule.PasswordRuleType.Digit">
            <summary>
            The password must have digit character.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Security.PasswordRule.PasswordRuleType.Special">
            <summary>
            The password must have special character.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Security.PasswordRule._rules">
            <summary>
            Represents the rules to generate a password.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Security.PasswordRule._ruleChars">
            <summary>
            Represents the number of occurrence of each condition to respect the password predicate.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Security.PasswordRule._definition">
            <summary>
            Represents the definition of the password rule.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRule.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Security.PasswordRule"/> class.
            </summary>
            <param name="minimumLength">Minimum length of the password.</param>
            <param name="maximumLength">Maximum length of the password.</param>
            <param name="minimumLowercaseCharacters">Minimum number of lowercase character in the password.</param>
            <param name="minimumUppercaseCharacters">Minimum number of uppercase character in the password.</param>
            <param name="minimumDigits">Minimum number of digits character in the password.</param>
            <param name="minimumSpecialCharacters">Minimum number of special character in the password.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRule.#ctor(FluentUI.Blazor.Community.Security.PasswordRuleDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Security.PasswordRule"/> class.
            </summary>
            <param name="passwordRuleDefinition">Definition of the password rule.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Security.PasswordRule"/> class.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRule.GetLength">
            <summary>
            Gets the length of the password.
            </summary>
            <returns>Returns the length of the password.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRule.GetPassword">
            <summary>
            Generates a password with the defined rule.
            </summary>
            <returns>Returns the generated password.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Exception occurs when the minimum length of the password is lower than
             the sum of all conditions to match.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRule.GetErrors(System.String)">
            <summary>
            Evaluates the specified password and returns an array of errors that describe which password requirements are
            not met.
            </summary>
            <remarks>Use this method to determine which specific password rules are violated, such as minimum
            length, required character types, or other configured constraints. This can be useful for providing detailed
            feedback to users during password creation or update.</remarks>
            <param name="password">The password string to validate. Cannot be null.</param>
            <returns>An array of <see cref="T:FluentUI.Blazor.Community.Security.PasswordError"/> objects representing each password rule that the specified password does
            not satisfy. The array is empty if the password meets all requirements.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRule.IsValid(System.String)">
            <summary>
            Determines whether the specified password meets all configured password rules.
            </summary>
            <remarks>The validation checks for the presence of digits, lowercase letters, uppercase letters, and
            special characters as defined by the configured rules. If the password contains any character not covered by
            these rules, the method returns <see langword="false"/>.</remarks>
            <param name="password">The password string to validate. Can be null or empty, in which case the method returns <see langword="false"/>.</param>
            <returns>A value indicating whether the password satisfies all required rules. Returns <see langword="true"/> if the
            password is valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRule.Reset">
            <summary>
            Restore the rule to the default definition.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRule.GetCharFromRules(FluentUI.Blazor.Community.Security.PasswordRule.PasswordRuleType[])">
            <summary>
            Gets a character from the specified rules.
            </summary>
            <param name="rules">Allowed rules to use to get a character.</param>
            <returns>Returns a character get from the specified rules.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRule.DecreaseRule(FluentUI.Blazor.Community.Security.PasswordRule.PasswordRuleType)">
            <summary>
            Decrease the counter of the specified rule to allow the generator
             to seed good value for the remaining characters of the password.
            </summary>
            <param name="key">Key of the value to decrease.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Security.PasswordRuleAttribute">
            <summary>
            Specifies password complexity requirements for a property and validates that the value meets the
            defined rules.
            </summary>
            <remarks>Apply this attribute to string properties or parameters to enforce password policies such as minimum
            and maximum length, and required counts of lowercase, uppercase, digit, and special characters. Validation error
            messages are localized using an implementation of IPasswordRuleLocalization, which must be registered in the
            dependency injection container.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleAttribute.MinimumLength">
            <summary>
            Gets or sets the minimum allowed length for the value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleAttribute.MaximumLength">
            <summary>
            Gets or sets the maximum allowed length for the value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleAttribute.MinimumLowercaseCharacters">
            <summary>
            Gets or sets the minimum number of lowercase characters required in the value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleAttribute.MinimumUppercaseCharacters">
            <summary>
            Gets or sets the minimum number of uppercase characters required in a password.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleAttribute.MinimumDigits">
            <summary>
            Gets or sets the minimum number of digits to display in the formatted output.
            </summary>
            <remarks>If the formatted value contains fewer digits than this property specifies, leading zeros are
            added to meet the minimum digit count. The value must be greater than or equal to 1.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleAttribute.MinimumSpecialCharacters">
            <summary>
            Gets or sets the minimum number of special characters required in a password.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRuleAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc/>
        </member>
        <member name="T:FluentUI.Blazor.Community.Security.PasswordRuleDefinition">
            <summary>
            Defines a set of rules for password composition, including length and character type requirements.
            </summary>
            <remarks>Use this structure to specify constraints for password validation, such as minimum and maximum
            length, and required counts of lowercase, uppercase, digit, and special characters. The rules ensure that any
            password validated against this definition meets all specified criteria. If the sum of minimum required character
            types exceeds the minimum length, an exception will be thrown during initialization.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRuleDefinition.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the PasswordRuleDefinition class with the specified password complexity
            requirements.
            </summary>
            <remarks>If any of the specified requirements are invalid, an exception may be thrown during
            initialization. Use this constructor to enforce custom password policies for validation purposes.</remarks>
            <param name="minimumLength">The minimum number of characters required for a valid password. Must be greater than zero and less than or equal
            to <paramref name="maximumLength"/>.</param>
            <param name="maximumLength">The maximum number of characters allowed for a valid password. Must be greater than or equal to <paramref
            name="minimumLength"/>.</param>
            <param name="minimumLowercaseCharacters">The minimum number of lowercase alphabetic characters required in the password. Must be zero or greater.</param>
            <param name="minimumUppercaseCharacters">The minimum number of uppercase alphabetic characters required in the password. Must be zero or greater.</param>
            <param name="minimumDigits">The minimum number of numeric digits required in the password. Must be zero or greater.</param>
            <param name="minimumSpecialCharacters">The minimum number of special (non-alphanumeric) characters required in the password. Must be zero or greater.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleDefinition.MinimumLength">
            <summary>
            Gets or sets the minimum length allowed for the password.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleDefinition.MaximumLength">
            <summary>
            Gets or sets the maximum length allowed for the password.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleDefinition.MinimumLowercaseCharacters">
            <summary>
            Gets or sets the minimum number of lowercase character allowed for the password.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleDefinition.MinimumUppercaseCharacters">
            <summary>
            Gets or sets the minimum number of uppercase character allowed for the password.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleDefinition.MinimumDigits">
            <summary>
            Gets or sets the minimum number of digit allowed for the password.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleDefinition.MinimumSpecialCharacters">
            <summary>
            Gets or sets the minimum number of special character allowed for the password.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRuleDefinition.CheckValidation">
            <summary>
            
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:FluentUI.Blazor.Community.Security.PasswordRuleOptions">
            <summary>
            Provides access to password rule configuration options, such as minimum length and character requirements, as
            defined in the application's security settings.
            </summary>
            <remarks>Password rule values are retrieved from the 'Application:Security:PasswordRules' section of the
            provided configuration. If a specific rule is not set in the configuration, its corresponding property will return
            null.</remarks>
            <param name="configuration">The configuration source from which password rule options are read. Must not be null.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Security.PasswordRuleOptions.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Provides access to password rule configuration options, such as minimum length and character requirements, as
            defined in the application's security settings.
            </summary>
            <remarks>Password rule values are retrieved from the 'Application:Security:PasswordRules' section of the
            provided configuration. If a specific rule is not set in the configuration, its corresponding property will return
            null.</remarks>
            <param name="configuration">The configuration source from which password rule options are read. Must not be null.</param>
        </member>
        <member name="F:FluentUI.Blazor.Community.Security.PasswordRuleOptions._section">
            <summary>
            References the configuration section containing password rule settings.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleOptions.MinimumLength">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleOptions.MaximumLength">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleOptions.MinimumLowercaseCharacters">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleOptions.MinimumUppercaseCharacters">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleOptions.MinimumDigits">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Security.PasswordRuleOptions.MinimumSpecialCharacters">
            <inheritdoc />
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EmailRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EmailRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_4DD478A1BFD5998368B427524F2975122A041351722B7FE5DDB3D8749A426159">
            <summary>Supports searching for characters in or not in "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzİK".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_DB42F152D7366DC6BC71F4E8628940C3535C040CC70AB1200D25A1CE6705C31A">
            <summary>Supports searching for characters in or not in "!\"#$%&amp;'*+-/0123456789=?ABCDEFGHIJKLMNOPQRSTUVWXYZ^_`abcdefghijklmnopqrstuvwxyz{|}~İK".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_EA1C3E5D6E90AFBC4A3B85976DAC936933B76D42B7AFB84C407E76AADD1F8FCD">
            <summary>Supports searching for characters in or not in "!#$%&amp;'*+-/0123456789=?ABCDEFGHIJKLMNOPQRSTUVWXYZ^_`abcdefghijklmnopqrstuvwxyz{|}~İK".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_nonAscii_F8E66A3880CC1A40F3CF9C6F5E540A5E2C7142FDB52AC7B1CF80216D601BBC4C">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzİK".</summary>
        </member>
    </members>
</doc>
