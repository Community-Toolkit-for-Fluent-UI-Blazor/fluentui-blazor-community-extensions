@namespace FluentUI.Blazor.Community.Components
@inherits FluentInputBase<byte[]>

<div id="@Id" class="@InternalClass" style="@Style">
    @if (ToolPosition == SignatureToolPosition.Top ||
        ToolPosition == SignatureToolPosition.Bottom)
    {
        <FluentStack Style="height: 100%"
                     Orientation="Orientation.Vertical">
            @if(ToolPosition == SignatureToolPosition.Top)
            {
                @_renderToolbar(Orientation.Horizontal)
            }

            @_renderSignature

            @if(ToolPosition == SignatureToolPosition.Bottom)
            {
                @_renderToolbar(Orientation.Horizontal)
            }
        </FluentStack>
    }
    else
    {
        <FluentStack Style="height: 100%">
            @if (ToolPosition == SignatureToolPosition.Left)
            {
                @_renderToolbar(Orientation.Vertical)
            }

            @_renderSignature

            @if (ToolPosition == SignatureToolPosition.Right)
            {
                @_renderToolbar(Orientation.Vertical)
            }
        </FluentStack>
    }

    <FluentPopover AnchorId="@($"fluent-cx-signature-settings-{Id}")"
                   @bind-Open="_isSettingsOpen"
                   Style="max-width: 360px; width: 360px; min-width: 360px">
        <Header>
            @Labels.SignatureSettings
        </Header>

        <Body>
            <FluentAccordion ActiveIdChanged="@OnActiveIdChangedAsync">
                <FluentAccordionItem Id="@($"accordion-item-{Id}")" Heading="@Labels.Pen">
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="2">
                        <FluentLabel>@Labels.StrokePreview</FluentLabel>
                        <canvas @ref="_previewPenCanvas" width="300" height="60" style="border:1px solid #ccc;"></canvas>

                        <FluentSlider Label="@Labels.StrokeWidth"
                                      AriaLabel="@Labels.StrokeWidth"
                                      Min="1"
                                      Max="20"
                                      Step="1"
                                      TValue="float"
                                      @bind-Value="@State.StrokeWidth"
                                      @bind-Value:after=OnAfterChangeAsync />

                        <FluentSlider Label="@Labels.PenOpacity"
                                      AriaLabel="@Labels.PenOpacity"
                                      Min="0f"
                                      Max="1.0f"
                                      TValue="float"
                                      Step="0.05f"
                                      @bind-Value="@State.PenOpacity"
                                      @bind-Value:after=OnAfterChangeAsync />

                        <FluentTextField Style="width: 100%"
                                         AriaLabel="@Labels.PenColor"
                                         Label="@Labels.PenColor"
                                         @bind-Value="@State.PenColor"
                                         TextFieldType="TextFieldType.Color"
                                         @bind-Value:after=OnAfterChangeAsync />

                        <FluentSwitch Label="@Labels.UseSmoothing"
                                      AriaLabel="@Labels.UseSmoothing"
                                      @bind-Value="@State.UseSmooth"
                                      @bind-Value:after=OnAfterChangeAsync />

                        <FluentSwitch Label="@Labels.UsePointerPressure"
                                      AriaLabel="@Labels.UsePointerPressure"
                                      @bind-Value="@State.UsePointerPressure"
                                      @bind-Value:after=OnAfterChangeAsync />

                        <FluentSelect @bind-SelectedOption=State.StrokeStyle
                                      @bind-SelectedOption:after=OnAfterChangeAsync
                                      Label="@Labels.StrokeLineStyle"
                                      AriaLabel="@Labels.StrokeLineStyle"
                                      Items="@_allLineStyles"
                                      OptionText="@(e => e == SignatureLineStyle.Solid ? Labels.SolidLine :
                                                                                           e == SignatureLineStyle.Dashed ? Labels.DashedLine :
                                                                                                                            Labels.DottedLine)" />
                        <FluentSwitch Label="@Labels.UseShadow"
                                      AriaLabel="@Labels.UseShadow"
                                      @bind-Value="@State.UseShadow"
                                      @bind-Value:after=OnAfterChangeAsync />

                        @if (State.UseShadow)
                        {
                            <FluentSlider Label="@Labels.ShadowOpacity"
                                          AriaLabel="@Labels.ShadowOpacity"
                                          Min="0f"
                                          Max="1.0f"
                                          TValue="float"
                                          Step="0.05f"
                                          @bind-Value="@State.ShadowOpacity"
                                          @bind-Value:after=OnAfterChangeAsync />

                            <FluentTextField Style="width: 100%"
                                             AriaLabel="@Labels.ShadowColor"
                                             Label="@Labels.ShadowColor"
                                             @bind-Value="@State.ShadowColor"
                                             TextFieldType="TextFieldType.Color"
                                             @bind-Value:after=OnAfterChangeAsync />
                        }
                    </FluentStack>      
                </FluentAccordionItem>

                <FluentAccordionItem Heading="@Labels.DisplayOptions">
                    <FluentSwitch @bind-Value="@State.ShowSeparatorLine"
                                  Label="@Labels.ShowSeparatorLine"
                                  AriaLabel="@Labels.ShowSeparatorLine"
                                  @bind-Value:after=OnAfterChangeAsync />
                </FluentAccordionItem>

                @if (!RunningWasmHelper.IsWasm)
                {
                    <FluentAccordionItem Heading="@Labels.ExportOptions">
                        <FluentSelect @bind-SelectedOption=State.ExportFormat
                                      @bind-SelectedOption:after=OnAfterChangeAsync
                                      Label="@Labels.ExportFormat"
                                      AriaLabel="@Labels.ExportFormat"
                                      Items="@_exportFormats"
                                      OptionText="@(e => e.ToString())" />
                    </FluentAccordionItem>
                }
            </FluentAccordion>
        </Body>
    </FluentPopover>
</div>

@code {
    public FluentCxSignature()
    {
        Id = Identifier.NewId();
        _signatureDotNetRef = DotNetObjectReference.Create(this);

        _renderLabel = label => __builder =>
        {
            @label
        };

        _renderSignature = __builder =>
        {
            <div id="@($"fluent-cx-signature-preview-{Id}")" class="fluent-cx-signature-preview" style="@InternalPreviewStyle">
                <canvas @ref="_gridCanvas" style="@InternalCanvasStyle"></canvas>
                <canvas @ref="_previewCanvas" style="@InternalCanvasStyle"></canvas>

                @if (State.ShowSeparatorLine)
                {
                    <div class="fluent-cx-signature-separator" style="top:@SeparatorYPx;"></div>
                }
            </div>

            if (!string.IsNullOrEmpty(WatermarkSettings.Text))
            {
                <div class="fluent-cx-signature-watermark">@WatermarkSettings.Text</div>
            }
        };

        _renderToolbar = orientation => __builder =>
        {
            <FluentToolbar Style="width: 100%;" Orientation="@orientation">
                @if (Capabilities.CanExport)
                {
                    <FluentButton IconStart="@(new Regular.Size24.Save())"
                                  Appearance="Appearance.Neutral"
                                  Title="@Labels.Export"
                                  OnClick="@OnExportAsync"
                                  ChildContent="@(IsMobile ? null : _renderLabel(Labels.Export))" />
                }

                <FluentDivider Orientation="@orientation" />

                @if (Capabilities.CanErase)
                {
                    <FluentMenuButton ButtonAppearance=Appearance.Neutral
                                      IconStart="@(State.CurrentTool == SignatureTool.Pen ? new Regular.Size24.Edit() : new Regular.Size24.Eraser())">
                        <FluentMenuItem Checked=@(State.CurrentTool == SignatureTool.Pen)
                                        Role=MenuItemRole.MenuItemRadio
                                      OnClick="@(() => OnChangeToolAsync(SignatureTool.Pen))">
                            @Labels.Pen
                        </FluentMenuItem>

                        <FluentMenuItem Checked=@(State.CurrentTool == SignatureTool.Eraser)
                                        Role=MenuItemRole.MenuItemRadio
                                        OnClick="@(() => OnChangeToolAsync(SignatureTool.Eraser))">
                            @Labels.Eraser
                        </FluentMenuItem>
                   </FluentMenuButton>

                    <FluentDivider Orientation="@orientation" />
                }

                @if (Capabilities.CanUndo)
                {
                    <FluentButton IconStart="@(new Regular.Size24.ArrowUndo())"
                                  Appearance="Appearance.Neutral"
                                  Title="@Labels.Undo"
                                  OnClick="@OnUndoAsync"
                                  ChildContent="@(IsMobile ? null : _renderLabel(Labels.Undo))" />
                }

                @if (Capabilities.CanRedo)
                {
                    <FluentButton IconStart="@(new Regular.Size24.ArrowRedo())"
                                  Appearance="Appearance.Neutral"
                                  OnClick="@OnRedoAsync"
                                  Title="@Labels.Redo"
                                  ChildContent="@(IsMobile ? null : _renderLabel(Labels.Redo))" />
                }

                @if (Capabilities.CanUndo || Capabilities.CanRedo)
                {
                    <FluentDivider Orientation="@orientation" />
                }

                <FluentMenuButton ButtonAppearance=Appearance.Neutral
                                  IconStart="@(new Regular.Size24.Grid())"
                                  Text="@Labels.Grid">
                    <FluentMenuItem Checked=@(State.GridType == SignatureGridType.None)
                                    Role=MenuItemRole.MenuItemRadio
                                    OnClick="@(() => OnChangeGridAsync(SignatureGridType.None))">
                        @Labels.NoGrid
                    </FluentMenuItem>

                    <FluentMenuItem Checked=@(State.GridType == SignatureGridType.Lines)
                                    Role=MenuItemRole.MenuItemRadio
                                    OnClick="@(() => OnChangeGridAsync(SignatureGridType.Lines))">
                        @Labels.LinesGrid
                    </FluentMenuItem>

                    <FluentMenuItem Checked=@(State.GridType == SignatureGridType.Dots)
                                    Role=MenuItemRole.MenuItemRadio
                                    OnClick="@(() => OnChangeGridAsync(SignatureGridType.Dots))">
                        @Labels.DotsGrid
                    </FluentMenuItem>
                </FluentMenuButton>

                <FluentButton IconStart="@(new Regular.Size24.Settings())"
                              Appearance="Appearance.Neutral"
                              Id="@($"fluent-cx-signature-settings-{Id}")"
                              OnClick="@(() => _isSettingsOpen = !_isSettingsOpen)"
                              Title="@Labels.Settings"
                              ChildContent="@(IsMobile ? null : _renderLabel(Labels.Settings))" />

            
                @if (Capabilities.CanClear)
                {
                    <FluentButton IconStart="@(new Regular.Size24.Delete())"
                                  Appearance="Appearance.Neutral"
                                  OnClick="@OnClearAsync"
                                  Title="@Labels.Clear"
                                  ChildContent="@(IsMobile ? null : _renderLabel(Labels.Clear))" 
                                  slot="end" />
                }
            </FluentToolbar>
        };
    }
}
