@namespace FluentUI.Blazor.Community.Components
@inherits FluentComponentBase
@typeparam TItem

<CascadingValue Value="(this)" IsFixed="true">
    <FluentKeyCode Anchor="@Id" OnKeyDown="@OnKeyDownAsync" />

    <div @ref="@Element"
         id="@Id"
         class="@Css"
         style="@InternalStyle"
         role="list"
         tabindex="0"
         @attributes="@AdditionalAttributes">
        <div class="slideshow-container slideshow-animate">
            @if (ChildContent is not null)
            {
                @ChildContent
            }
            else if (ItemTemplate is not null && ItemFunc is not null)
            {
                var i = 1;

                foreach (var item in Items)
                {
                    <SlideshowItem TItem="TItem"
                                   @key=ItemFunc(item)
                                   aria-hidden="@GetAriaHiddenValue(i)"
                                   AriaLabel="@($"Slide {i}")">
                        @ItemTemplate(item)
                    </SlideshowItem>

                    i++;
                }
            }
        </div>

        @if (ShowControls)
        {
            <FluentButton Appearance="Appearance.Stealth"
                          OnClick="@OnMovePreviousAsync"
                          aria-label="@PreviousLabel"
                          Title="@PreviousLabel"
                          Disabled=@IsPreviousDisabled
                          IconStart="@(new Regular.Size24.ChevronLeft())"
                          Style="position: absolute; left: 50px; top: 50%; transform: translateY(-50%); height: 100px; width: 32px" />

            <FluentButton Appearance="Appearance.Stealth"
                          OnClick="@OnMoveNextAsync"
                          aria-label="@NextLabel"
                          Title="@NextLabel"
                          Disabled=@IsNextDisabled
                          IconStart="@(new Regular.Size24.ChevronRight())"
                          Style="position: absolute; right: 50px; top: 50%; transform: translateY(-50%); height: 100px; width: 32px" />
        }

        @if (ShowIndicators)
        {
            <div class="slideshow-indicators">
                <FluentStack Style="height: 100%;"
                             HorizontalAlignment="HorizontalAlignment.Center"
                             VerticalAlignment="VerticalAlignment.Center">
                    @if (ChildContent is not null)
                    {
                        @_renderDots(_slides.Count)
                    }
                    else
                    {
                        @_renderDots(Items.Count())
                    }
                </FluentStack>
            </div>
        }
    </div>
</CascadingValue>

@code {
    public FluentCxSlideshow()
    {
        Id = Identifier.NewId();
        _renderDots = count => __builder =>
        {
            for(int i = 0; i < count; ++i)
            {
                var k = i;
                <span role="button"
                      aria-label="@($"Item {k}")"
                      aria-roledescription="slide"
                      class="dot-indicator @(Index == k + 1 ? "dot-indicator-active" : null)"
                      @onclick=@(() => MoveToIndexAsync(k)) />

            }
        };
    }
}
