<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FluentUI.Blazor.Community.Components</name>
    </assembly>
    <members>
        <member name="T:FluentUI.Blazor.Community.Components.AnimatedElement">
            <summary>
            Represents an animated element with properties that can be interpolated over time.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> class provides a set of properties, such as position offsets,
            scaling factors,  rotation, color, opacity, and a generic value, that can be animated using associated <see
            cref="T:FluentUI.Blazor.Community.Components.AnimationState`1"/>  objects. Each property can be updated independently based on its animation state and
            interpolation logic.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AnimatedElement.LerpDouble">
            <summary>
            Reusable interpolators for different property types.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AnimatedElement.LerpColor">
            <summary>
            Reusable color interpolator for string-based colors.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.Id">
            <summary>
            Gets or sets the unique identifier for the animated element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.OffsetX">
            <summary>
            Gets or sets the horizontal offset of the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.OffsetY">
            <summary>
            Gets or sets the vertical offset of the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.ScaleX">
            <summary>
            Gets or sets the horizontal scaling factor of the element. A value of 1.0 represents no scaling.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.ScaleY">
            <summary>
            Gets or sets the vertical scaling factor of the element. A value of 1.0 represents no scaling.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.Rotation">
            <summary>
            Gets or sets the rotation angle of the element in degrees.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.Color">
            <summary>
            Gets or sets the color of the element in a string format (e.g., hex code, RGB, etc.).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.BackgroundColor">
            <summary>
            Gets or sets the background color of the element in a string format (e.g., hex code, RGB, etc.).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.Opacity">
            <summary>
            Gets or sets the opacity of the element, where 0.0 is fully transparent and 1.0 is fully opaque.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.Value">
            <summary>
            Gets or sets a generic value associated with the element, which can be used for various purposes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.OffsetXState">
            <summary>
            Gets or sets the animation state for the horizontal offset property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.OffsetYState">
            <summary>
            Gets or sets the animation state for the vertical offset property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.ScaleXState">
            <summary>
            Gets or sets the animation state for the horizontal scaling factor property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.ScaleYState">
            <summary>
            Gets or sets the animation state for the vertical scaling factor property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.RotationState">
            <summary>
            Gets or sets the animation state for the rotation property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.ColorState">
            <summary>
            Gets or sets the animation state for the color property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.BackgroundColorState">
            <summary>
            Gets or sets the animation state for the background color property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.OpacityState">
            <summary>
            Gets or sets the animation state for the opacity property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElement.ValueState">
            <summary>
            Gets or sets the animation state for the generic value property.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElement.Update(System.DateTime)">
            <summary>
            Updates the current state of the object by interpolating its properties based on the specified time.
            </summary>
            <remarks>This method updates the properties of the object, such as offsets, scale, rotation, color,
            opacity,  and value, by interpolating their respective states if they are not yet completed. Each property is 
            updated independently based on its associated state and interpolation function.</remarks>
            <param name="now">The current time used to evaluate the interpolation states.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElement.GetDiff(FluentUI.Blazor.Community.Components.AnimatedElement)">
            <summary>
            Computes the differences between the current <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> instance and a specified previous
            instance.
            </summary>
            <remarks>The method compares the following properties: <c>OffsetX</c>, <c>OffsetY</c>, <c>ScaleX</c>,
            <c>ScaleY</c>, <c>Rotation</c>, <c>Color</c>, <c>Opacity</c>, and <c>Value</c>. Only properties with differing
            values are included in the returned dictionary.</remarks>
            <param name="previous">The previous <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> instance to compare against. Cannot be <c>null</c>.</param>
            <returns>A dictionary containing the properties that differ between the current instance and the <paramref
            name="previous"/> instance. The keys represent the property names, and the values represent the current values
            of those properties. If no differences are found, an empty dictionary is returned.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElement.Clone">
            <summary>
            Clones the current <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> instance, creating a new instance with the same property values.
            </summary>
            <returns>Returns the cloned element.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElement.ResetStates">
            <summary>
            Resets all animation states to <c>null</c>, effectively stopping any ongoing animations for the element.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AnimatedElementGroup">
            <summary>
            Represents a group of animated elements that can be laid out and animated together.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AnimatedElementGroup._displayedItem">
            <summary>
            Represents the currently displayed animated elements in the group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElementGroup.Id">
            <summary>
            Gets or sets the unique identifier for the animated element group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElementGroup.AnimatedElements">
            <summary>
            Gets the list of animated elements in the group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedElementGroup.LayoutStrategy">
            <summary>
            Gets the layout strategy used to arrange the animated elements within the group.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElementGroup.ApplyLayout(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Applies the specified layout strategy to the displayed item.
            </summary>
            <param name="layoutStrategy">The layout strategy to apply. If <see langword="null"/>, a default layout strategy is used.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElementGroup.ApplyStartTime(System.DateTime)">
            <summary>
            Applies the specified start time to the current layout strategy, if one is defined.
            </summary>
            <remarks>This method delegates the operation to the <see cref="P:FluentUI.Blazor.Community.Components.AnimatedElementGroup.LayoutStrategy"/> if it is not null.
            Ensure that a layout strategy is set before calling this method to avoid no-op behavior.</remarks>
            <param name="now">The start time to apply, represented as a <see cref="T:System.DateTime"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElementGroup.GetDiff(System.DateTime,System.Collections.Concurrent.ConcurrentQueue{FluentUI.Blazor.Community.Components.JsonAnimatedElement},System.Collections.Generic.Dictionary{System.String,FluentUI.Blazor.Community.Components.AnimatedElement})">
            <summary>
            Computes the differences between the current state of animated elements and their previous state,  and enqueues
            the changes as JSON-serializable objects for further processing.
            </summary>
            <remarks>This method processes animated elements in parallel to compute their differences. If an
            element has  changes compared to its previous state, the differences are added to the queue as a <see
            cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement"/>  object. The method also updates the <paramref name="previousElements"/> dictionary
            with the current state  of the modified elements.</remarks>
            <param name="now">The current timestamp used to update the state of each animated element.</param>
            <param name="queue">A thread-safe queue to which the computed differences are enqueued as <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement"/> objects.</param>
            <param name="previousElements">A dictionary containing the previous state of animated elements, keyed by their unique identifiers.  This
            dictionary is updated with the current state of elements that have changes.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElementGroup.SetLayoutStrategy(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Sets the layout strategy for arranging the animated elements within the group.
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedElementGroup.SetMaxDisplayedItems(System.Nullable{System.Int32})">
            <summary>
            Sets the maximum number of animated elements to be displayed in the group.
            </summary>
            <param name="maxDisplayedItems">Maximum number of animated elements to be displayed in the group.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AnimationState`1">
            <summary>
            Represents a set of animation states, including start and end values, duration, easing functions, and interpolation
            logic.
            </summary>
            <remarks>This class is designed to facilitate animations by defining the start and end values, the duration of
            the animation,  and the easing function and mode used to interpolate between the values. The <see
            cref="M:FluentUI.Blazor.Community.Components.AnimationState`1.Interpolate(System.DateTime,FluentUI.Blazor.Community.Components.IInterpolator{`0})"/> method calculates  the interpolated value at a specific point in time based on these
            parameters.</remarks>
            <typeparam name="T">The type of the values being interpolated. This type must support the interpolation strategy defined by the provided
            interpolator.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationState`1.StartValue">
            <summary>
            Gets or sets the initial value of the operation or process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationState`1.EndValue">
            <summary>
            Gets or sets the end value of the range or operation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationState`1.Duration">
            <summary>
            Gets or sets the duration of the operation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationState`1.StartTime">
            <summary>
            Gets or sets the start time of the event.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationState`1.EasingFunction">
            <summary>
            Gets or sets the easing function used to interpolate values during animations.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationState`1.EasingMode">
            <summary>
            Gets or sets the easing mode that determines the interpolation behavior of the animation.
            </summary>
            <remarks>The easing mode specifies how the animation interpolates between its start and end values. 
            Common modes include <see cref="F:FluentUI.Blazor.Community.Components.EasingMode.In"/>, <see cref="F:FluentUI.Blazor.Community.Components.EasingMode.Out"/>, and <see
            cref="F:FluentUI.Blazor.Community.Components.EasingMode.InOut"/>.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationState`1.Interpolate(System.DateTime,FluentUI.Blazor.Community.Components.IInterpolator{`0})">
            <summary>
            Calculates the interpolated value at a specified point in time based on the elapsed duration, easing function,
            and interpolation strategy.
            </summary>
            <remarks>The interpolation progress is determined by the elapsed time since the start time, relative
            to the  total duration. The progress is then adjusted using the specified easing function and mode before  being
            passed to the interpolator.</remarks>
            <param name="now">The current time used to calculate the interpolation progress.</param>
            <param name="interpolator">An object that defines the interpolation strategy for transitioning  between the start and end values.</param>
            <returns>The interpolated value of type <typeparamref name="T"/> at the specified time.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationState`1.ApplyEasing(FluentUI.Blazor.Community.Components.EasingFunction,FluentUI.Blazor.Community.Components.EasingMode,System.Double)">
            <summary>
            Applies the specified easing function and mode to calculate the eased value for the given time.
            </summary>
            <param name="easingFunction">The easing function to use, such as <see cref="F:FluentUI.Blazor.Community.Components.EasingFunction.Linear"/> or <see cref="F:FluentUI.Blazor.Community.Components.EasingFunction.Bounce"/>.</param>
            <param name="easingMode">The easing mode to apply, such as <see cref="F:FluentUI.Blazor.Community.Components.EasingMode.In"/>, <see cref="F:FluentUI.Blazor.Community.Components.EasingMode.Out"/>, or <see
            cref="F:FluentUI.Blazor.Community.Components.EasingMode.InOut"/>.</param>
            <param name="time">The normalized time value, typically between 0.0 and 1.0, representing the progress of the animation.</param>
            <returns>The eased value corresponding to the specified time, calculated using the provided easing function and mode.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if the specified combination of <paramref name="easingFunction"/> and <paramref name="easingMode"/> is
            not supported.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationState`1.Apply(`0,`0,System.DateTime,System.TimeSpan)">
            <summary>
            Applies the specified animation parameters to the current instance, updating its state accordingly.
            </summary>
            <param name="startValue">The starting value of the animation. Defaults to the type's default value if not specified.</param>
            <param name="endValue">The ending value of the animation. Defaults to the type's default value if not specified.</param>
            <param name="startTime">The start time of the animation.</param>
            <param name="duration">The duration of the animation.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.BackEasing">
            <summary>
            Provides easing functions that implement a "back" motion, where the animation overshoots its target and then returns
            to it. These functions are commonly used in animations to create a spring-like effect.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BackEasing.EaseIn(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in interpolation of a value using a back easing function.
            </summary>
            <param name="t">The current time or position, where 0 represents the start and <paramref name="d"/> represents the end.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <param name="s">The overshoot amount, which controls the extent of the "back" effect. Defaults to 1.70158.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BackEasing.EaseOut(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an "ease-out" interpolation to calculate a value based on the specified parameters.
            </summary>
            <remarks>This method implements a "back" easing function with an ease-out behavior, where the
            interpolation starts quickly and decelerates toward the end. The optional <paramref name="s"/> parameter allows
            customization of the overshoot effect, with higher values producing a more pronounced overshoot.</remarks>
            <param name="t">The current time or position, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <param name="s">An optional overshoot parameter that controls the intensity of the easing effect. Defaults to 1.70158.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BackEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an easing function that combines both "ease-in" and "ease-out" effects to calculate an interpolated
            value.
            </summary>
            <remarks>This method uses a combination of "ease-in" and "ease-out" easing, making it suitable for
            animations that require a smooth acceleration at the start and deceleration at the end. The optional parameter
            <paramref name="s"/> allows customization of the overshoot effect, where higher values result in a more
            pronounced easing curve.</remarks>
            <param name="t">The current time or position in the animation, where 0 represents the start and <paramref name="d"/> represents
            the end.</param>
            <param name="b">The starting value of the property being animated.</param>
            <param name="c">The total change in the value of the property being animated.</param>
            <param name="d">The total duration of the animation.</param>
            <param name="s">An optional overshoot parameter that controls the intensity of the easing effect. Defaults to 1.70158.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.BounceEasing">
            <summary>
            Provides easing functions that simulate a bouncing motion for animations.
            </summary>
            <remarks>This class includes static methods for calculating bounce easing values, which are commonly used in
            animations to create effects that mimic the behavior of a bouncing object. The easing functions include: <list
            type="bullet"> <item><term>EaseOut</term>: Starts quickly and decelerates, simulating a bounce at the end.</item>
            <item><term>EaseIn</term>: Starts slowly and accelerates, simulating a bounce at the beginning.</item>
            <item><term>EaseInOut</term>: Combines the effects of EaseIn and EaseOut, simulating a bounce at both the beginning
            and end.</item> </list> These methods are useful for creating visually appealing animations in user interfaces,
            games, or other graphical applications.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BounceEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an easing-out function to interpolate a value over time, creating a decelerating motion.
            </summary>
            <remarks>This method uses a piecewise easing-out function based on the "bounce" easing equation.  It
            is commonly used in animations to create a natural deceleration effect.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BounceEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in value for a given time, using an easing function.
            </summary>
            <remarks>This method applies an easing-in effect, which starts the interpolation slowly and
            accelerates as it progresses. The easing behavior is determined by the complementary <see cref="M:FluentUI.Blazor.Community.Components.BounceEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)"/>
            function.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BounceEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates an eased value using a combination of ease-in and ease-out interpolation.
            </summary>
            <remarks>This method combines ease-in and ease-out easing functions to create a smooth transition. The
            first half of the duration applies an ease-in effect, while the second half applies an ease-out
            effect.</remarks>
            <param name="t">The current time or position within the easing duration. Must be between 0 and <paramref name="d"/>.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the easing operation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>, smoothly transitioning between ease-in and
            ease-out phases.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CircularEasing">
            <summary>
            Provides easing functions based on a circular mathematical formula.
            </summary>
            <remarks>Circular easing functions create smooth transitions that mimic the motion of an object following a
            circular path. These functions are commonly used in animations to achieve natural-looking acceleration and
            deceleration effects.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CircularEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in value for a given time using a circular easing function.
            </summary>
            <param name="t">The current time, or position, within the easing duration. Must be between 0 and <paramref name="d"/>.</param>
            <param name="b">The starting value of the property being eased.</param>
            <param name="c">The total change in the value of the property being eased.</param>
            <param name="d">The total duration of the easing operation. Must be greater than 0.</param>
            <returns>The calculated eased-in value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CircularEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an ease-out interpolation to calculate a value based on the specified parameters.
            </summary>
            <remarks>The ease-out interpolation starts quickly and decelerates toward the end, creating a smooth
            transition. Ensure that <paramref name="d"/> is greater than zero to avoid division by zero.</remarks>
            <param name="t">The current time or position, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CircularEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates an eased value using an "ease-in-out" interpolation, which provides a smooth transition  that
            accelerates at the beginning and decelerates at the end.
            </summary>
            <remarks>This method is commonly used in animations or transitions to create a natural acceleration
            and deceleration effect. The input <paramref name="t"/> is normalized relative to the duration <paramref
            name="d"/> to calculate the eased value.</remarks>
            <param name="t">The current time or position within the easing duration. Must be between 0 and <paramref name="d"/>.</param>
            <param name="b">The starting value of the property being eased.</param>
            <param name="c">The total change in the value of the property being eased.</param>
            <param name="d">The total duration of the easing operation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>, based on the "ease-in-out" easing function.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CubicEasing">
            <summary>
            Provides cubic easing functions for animations, including easing in, easing out, and easing in and out.
            </summary>
            <remarks>Cubic easing functions are commonly used in animations to create smooth transitions. These functions
            calculate the interpolated value based on the cubic easing formula, which determines the rate of change over time.
            The methods in this class allow for acceleration, deceleration, or a combination of both.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CubicEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in interpolation value for a given time, using a cubic easing function.
            </summary>
            <remarks>This method uses a cubic easing-in function, which starts the motion slowly and accelerates
            as time progresses.</remarks>
            <param name="t">The current time, or position, within the easing duration. Must be between 0 and <paramref name="d"/>.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the easing operation. Must be greater than 0.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CubicEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an ease-out cubic interpolation to calculate a value based on the given time and range.
            </summary>
            <param name="t">The current time or position, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the range.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CubicEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates an eased value using a cubic ease-in-out interpolation.
            </summary>
            <param name="t">The current time or position, where 0 represents the start and <paramref name="d"/> represents the end.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.EasingFunction">
            <summary>
            Represents the various easing functions available for animations.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Linear">
            <summary>
            Represents a linear easing function, which results in a constant speed animation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Back">
            <summary>
            Represents a "back" easing function, which creates an animation that overshoots its target and then settles back.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Bounce">
            <summary>
            Represents a "bounce" easing function, which creates an animation that simulates a bouncing effect.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Circular">
            <summary>
            Represents a "circular" easing function, which creates an animation that follows a circular path.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Cubic">
            <summary>
            Represents a "cubic" easing function, which creates an animation that accelerates and decelerates in a cubic manner.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Elastic">
            <summary>
            Represents an "elastic" easing function, which creates an animation that simulates an elastic effect.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Exponential">
            <summary>
            Represents an "exponential" easing function, which creates an animation that accelerates and decelerates exponentially.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Quadratic">
            <summary>
            Represents a "quadratic" easing function, which creates an animation that accelerates and decelerates in a quadratic manner.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Quartic">
            <summary>
            Represents a "quartic" easing function, which creates an animation that accelerates and decelerates in a quartic manner.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingFunction.Quintic">
            <summary>
            Represents a "quintic" easing function, which creates an animation that accelerates and decelerates in a quintic manner.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.EasingMode">
            <summary>
            Represents the easing mode for animations, indicating how the animation progresses over time.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingMode.In">
            <summary>
            Represents an easing mode where the animation starts slowly and accelerates towards the end.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingMode.Out">
            <summary>
            Represents an easing mode where the animation starts quickly and decelerates towards the end.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EasingMode.InOut">
            <summary>
            Represents an easing mode where the animation starts slowly, accelerates in the middle, and then decelerates towards the end.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ElasticEasing">
            <summary>
            Provides easing functions that produce an elastic motion effect, commonly used in animations.
            </summary>
            <remarks>Elastic easing functions create a motion effect that resembles a spring oscillating back and forth
            before settling. These functions are useful for creating dynamic and visually appealing animations.  The class
            includes three easing modes: <list type="bullet"> <item> <term>EaseIn</term> <description>Starts the motion slowly,
            then accelerates with an elastic effect.</description> </item> <item> <term>EaseOut</term> <description>Starts the
            motion quickly, then decelerates with an elastic effect.</description> </item> <item> <term>EaseInOut</term>
            <description>Combines the effects of <c>EaseIn</c> and <c>EaseOut</c>, starting and ending with an elastic
            effect.</description> </item> </list></remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ElasticEasing.m">
            <summary>
            Represents a constant multiplier used in calculations.
            </summary>
            <remarks>The value is derived from multiplying 0.3 by 1.5.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ElasticEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in value for a given time, using an elastic easing function.
            </summary>
            <remarks>This method uses an elastic easing function, which produces an oscillating effect that
            gradually decreases in amplitude as the animation progresses.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the property being animated.</param>
            <param name="c">The total change in the value of the property being animated.</param>
            <param name="d">The total duration of the animation.</param>
            <returns>The calculated eased-in value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ElasticEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-out value of a parameter over time using an elastic easing function.
            </summary>
            <remarks>This method implements an elastic easing-out function, which starts quickly and then
            decelerates  with oscillations as it approaches the target value. It is commonly used in animations to create  a
            spring-like effect.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the parameter.</param>
            <param name="c">The total change in the parameter's value.</param>
            <param name="d">The total duration of the easing operation.</param>
            <returns>The calculated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ElasticEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an easing function that combines both "ease-in" and "ease-out" effects to calculate a value  based on
            the progression of time.
            </summary>
            <remarks>This method uses a sinusoidal easing function to create a smooth transition effect. The
            "ease-in" effect  accelerates the value at the beginning, while the "ease-out" effect decelerates it toward the
            end.</remarks>
            <param name="t">The current time or position in the animation, where 0 represents the start and <paramref name="d"/> represents
            the end.</param>
            <param name="b">The starting value of the property being animated.</param>
            <param name="c">The total change in the value of the property being animated.</param>
            <param name="d">The total duration of the animation.</param>
            <returns>The calculated value of the property at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ExponentialEasing">
            <summary>
            Provides methods for performing exponential easing calculations, commonly used in animations to create smooth
            transitions between values.
            </summary>
            <remarks>Exponential easing functions are used to interpolate values over time, producing transitions that
            start or end with a rapid change in value. These methods are useful in scenarios such as animating UI elements or
            simulating motion effects.  The class includes three easing modes: <list type="bullet"> <item> <term>EaseIn</term>
            <description>Starts the transition slowly and accelerates towards the end.</description> </item> <item>
            <term>EaseOut</term> <description>Starts the transition quickly and decelerates towards the end.</description>
            </item> <item> <term>EaseInOut</term> <description>Combines EaseIn and EaseOut, starting and ending slowly with
            acceleration in the middle.</description> </item> </list></remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExponentialEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in value for a given time using an exponential easing function.
            </summary>
            <remarks>This method uses an exponential easing function, which starts slowly and accelerates  as time
            progresses. If <paramref name="t"/> is 0, the method returns <paramref name="b"/>.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the property being eased.</param>
            <param name="c">The total change in the value of the property being eased.</param>
            <param name="d">The total duration of the easing, in the same units as <paramref name="t"/>.</param>
            <returns>The calculated eased-in value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExponentialEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an exponential easing-out function to interpolate a value over time.
            </summary>
            <remarks>This method implements an exponential easing-out function, which starts quickly and
            decelerates toward the end of the duration. If <paramref name="t"/> equals <paramref name="d"/>, the method
            returns <paramref name="b"/> + <paramref name="c"/>.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation. Must be greater than 0.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ExponentialEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates an eased value using an exponential easing function with both "ease-in" and "ease-out" behavior.
            </summary>
            <remarks>This method applies an exponential easing function that accelerates at the beginning
            ("ease-in") and decelerates at the end ("ease-out"). The easing effect is symmetric, with the midpoint of the
            animation being the transition between acceleration and deceleration.</remarks>
            <param name="t">The current time or position within the animation, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the property being animated.</param>
            <param name="c">The total change in the value of the property being animated.</param>
            <param name="d">The total duration of the animation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LinearEasing">
            <summary>
            Represents a linear easing function where the output is directly proportional to the input.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LinearEasing.Ease(System.Double)">
            <summary>
            Calculates the linear easing value for a given time parameter t.
            </summary>
            <param name="t">Value to ease.</param>
            <returns>Returns the eased value.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.QuadraticEasing">
            <summary>
            Represents a quadratic easing function for animations.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuadraticEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in value for a given time, using a quadratic easing function.
            </summary>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the property being eased.</param>
            <param name="c">The total change in the value of the property being eased.</param>
            <param name="d">The total duration of the easing operation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuadraticEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an ease-out interpolation to calculate a value based on the specified parameters.
            </summary>
            <remarks>The ease-out interpolation starts quickly and decelerates toward the end of the duration.
            Ensure that <paramref name="d"/> is not zero to avoid division by zero errors.</remarks>
            <param name="t">The current time or position, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuadraticEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an ease-in-out quadratic interpolation to calculate a value based on the progression of time.
            </summary>
            <remarks>This method uses a quadratic easing function to smoothly transition between the starting and
            ending values. The easing effect accelerates at the beginning, decelerates in the middle, and accelerates again
            toward the end.</remarks>
            <param name="t">The current time or position within the duration, where 0 represents the start and <paramref name="d"/>
            represents the end.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.QuarticEasing">
            <summary>
            Provides quartic easing functions for animations, which calculate intermediate values based on a quartic polynomial.
            These functions are commonly used to create smooth transitions in animations.
            </summary>
            <remarks>The class includes three easing functions: <list type="bullet"> <item> <term>EaseIn</term>
            <description>Starts the motion slowly and accelerates as it progresses.</description> </item> <item>
            <term>EaseOut</term> <description>Starts the motion quickly and decelerates as it progresses.</description> </item>
            <item> <term>EaseInOut</term> <description>Combines the behaviors of EaseIn and EaseOut, starting and ending slowly
            while accelerating in the middle.</description> </item> </list> Each function takes the same parameters,
            representing the current time, start value, change in value, and duration of the animation.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuarticEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased-in value for a given time using a quartic easing function.
            </summary>
            <remarks>This method applies a quartic easing-in function, which starts the motion slowly  and
            accelerates as time progresses. It is commonly used in animations to create  a smooth, natural-looking
            transition.</remarks>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the easing operation. Must be greater than 0.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuarticEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an ease-out cubic interpolation to calculate a value based on the progression of time.
            </summary>
            <param name="t">The current time or position in the interpolation, where 0 represents the start and <paramref name="d"/>
            represents the end.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration of the interpolation.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuarticEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates an eased value using an ease-in-out quartic interpolation.
            </summary>
            <remarks>This method applies an ease-in-out quartic easing function, which accelerates at the
            beginning and decelerates at the end. The input <paramref name="t"/> is normalized relative to <paramref
            name="d"/> to calculate the eased value.</remarks>
            <param name="t">The current time or position within the interpolation, where 0 represents the start and <paramref name="d"/>
            represents the end.</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration of the interpolation.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the specified time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.QuinticEasing">
            <summary>
            Provides easing functions based on a quintic polynomial (t^5) for smooth animations.
            </summary>
            <remarks>Quintic easing functions are commonly used in animations to create smooth transitions. These
            functions calculate intermediate values based on a time parameter, allowing for different easing effects such as
            accelerating, decelerating, or a combination of both.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuinticEasing.EaseIn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the eased value for a given time using an "EaseIn" quintic easing function.
            </summary>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the property being eased.</param>
            <param name="c">The total change in the value of the property being eased.</param>
            <param name="d">The total duration of the easing operation.</param>
            <returns>The calculated eased value at the specified time.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuinticEasing.EaseOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an easing-out function to interpolate a value over time, creating a decelerating motion.
            </summary>
            <param name="t">The current time, in the range [0, <paramref name="d"/>].</param>
            <param name="b">The starting value of the interpolation.</param>
            <param name="c">The total change in value over the duration.</param>
            <param name="d">The total duration of the interpolation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.QuinticEasing.EaseInOut(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Applies an ease-in-out quintic interpolation to the given time value.
            </summary>
            <remarks>This method uses a quintic easing function to create a smooth transition that accelerates at
            the start,  decelerates at the end, and maintains a steady rate in the middle.</remarks>
            <param name="t">The current time, or position, within the animation. Must be between 0 and <paramref name="d"/>.</param>
            <param name="b">The starting value of the property being animated.</param>
            <param name="c">The total change in the value of the property being animated.</param>
            <param name="d">The total duration of the animation.</param>
            <returns>The interpolated value at the given time <paramref name="t"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ILayoutStrategy">
            <summary>
            Represents a strategy for laying out animated elements within a container.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ILayoutStrategy.Immediate">
            <summary>
            Gets or sets a value indicating whether the layout changes should be applied immediately without animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ILayoutStrategy.Duration">
            <summary>
            Gets or sets the duration of the layout animation.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ILayoutStrategy.ApplyLayout(System.Collections.Generic.List{FluentUI.Blazor.Community.Components.AnimatedElement})">
            <summary>
            Applies the layout strategy to the provided list of animated elements.
            </summary>
            <param name="elements">Elements to animate within this layout instance.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ILayoutStrategy.ApplyStartTime(System.DateTime)">
            <summary>
            Applies the start time for the layout animation.
            </summary>
            <param name="now">Start time of the layout animation.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ILayoutStrategy.EasingFunction">
            <summary>
            Gets or sets the easing function used for the layout animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ILayoutStrategy.EasingMode">
            <summary>
            Gets or sets the easing mode used for the layout animation.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ILayoutStrategy.SetDimensions(System.Double,System.Double)">
            <summary>
            Sets the dimensions of the container in which the layout is applied.
            </summary>
            <param name="width">Width of the container.</param>
            <param name="height">Height of the container.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ColorInterpolator">
            <summary>
            Provides functionality to interpolate between two <see cref="T:System.Drawing.Color"/> values.
            </summary>
            <remarks>This class performs linear interpolation (lerp) on the RGBA components of the colors. It is useful
            for creating smooth transitions between colors, such as in animations or gradients.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ColorInterpolator.Lerp(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DoubleInterpolator">
            <summary>
            Represents an interpolator for double values, providing linear interpolation functionality.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DoubleInterpolator.Lerp(System.Double,System.Double,System.Double)">
            <inheritdoc/> 
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FloatInterpolator">
            <summary>
            Represents an interpolator for floating-point values.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FloatInterpolator.Lerp(System.Single,System.Single,System.Double)">
            <inheritdoc/> 
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IInterpolator`1">
            <summary>
            Represents a generic interface for interpolating between two values of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of the value to interpolate.</typeparam>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IInterpolator`1.Lerp(`0,`0,System.Double)">
            <summary>
            Linearly interpolates between two values based on a weighting factor.
            </summary>
            <remarks>The behavior of the interpolation depends on the implementation of the type <typeparamref
            name="T"/>.  Ensure that the type supports the required operations for linear interpolation.</remarks>
            <param name="start">The starting value of the interpolation.</param>
            <param name="end">The ending value of the interpolation.</param>
            <param name="amount">A value between 0.0 and 1.0 that specifies the weight of the <paramref name="end"/> value.  A value of 0.0
            returns <paramref name="start"/>, and a value of 1.0 returns <paramref name="end"/>.</param>
            <returns>The interpolated value between <paramref name="start"/> and <paramref name="end"/> based on the <paramref
            name="amount"/>.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.StringColorInterpolator">
            <summary>
            
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.StringColorInterpolator.Lerp(System.String,System.String,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement">
            <summary>
            Represents an animated element with properties that can be serialized to JSON for animation purposes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.Id">
            <summary>
            Gets or sets the unique identifier for the animated element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.X">
            <summary>
            Gets or sets the horizontal position of the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.Y">
            <summary>
            Gets or sets the vertical position of the element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.ScaleX">
            <summary>
            Gets or sets the horizontal scaling factor of the element. A value of 1.0 represents no scaling.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.ScaleY">
            <summary>
            Gets or sets the vertical scaling factor of the element. A value of 1.0 represents no scaling.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.Rotation">
            <summary>
            Gets or sets the rotation angle of the element in degrees.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.Color">
            <summary>
            Gets or sets the color of the element in a string format (e.g., hex code, RGB, etc.).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.BackgroundColor">
            <summary>
            Gets or sets the background color of the element in a string format (e.g., hex code, RGB, etc.).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.Opacity">
            <summary>
            Gets or sets the opacity of the element, where 1.0 is fully opaque and 0.0 is fully transparent.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.JsonAnimatedElement.Value">
            <summary>
            Gets or sets a generic value associated with the element, which can be used for custom purposes.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AnimationGroup">
            <summary>
            Represents a group of animated items within a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.AnimationGroup"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationGroup.Layout">
            <summary>
            Gets or sets the layout to apply to the animated items in this group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationGroup.ChildContent">
            <summary>
            Gets or sets the child content of the animation group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationGroup.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationGroup.MaxDisplayedItems">
            <summary>
            Gets or sets the maximum number of items to display in the group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationGroup.AnimatedElementGroup">
            <summary>
            Gets the internal animated element group used to manage the animated items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationGroup.InternalCss">
            <summary>
            Gets the internal CSS classes for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.AddElement(FluentUI.Blazor.Community.Components.AnimationItem)">
            <summary>
            Adds an animated item to the group if it is not already present.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.RemoveElement(FluentUI.Blazor.Community.Components.AnimationItem)">
            <summary>
            Removes an animated item from the group.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.RemoveLayout">
            <summary>
            Removes the layout strategy from the group.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.SetLayout(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Sets the layout strategy for the group.
            </summary>
            <param name="layout">Layout to use to animate the items in the group.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.ApplyLayout(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Applies the specified layout strategy to the collection of animated elements.
            </summary>
            <remarks>If no layout strategy is provided, the method uses the default grid layout strategy. The
            method processes the collection of items and applies the layout to their associated animated elements.</remarks>
            <param name="layoutStrategy">The layout strategy to apply. If <see langword="null"/>, a default grid layout strategy is used.</param>
            <returns>A list of animated elements with the applied layout.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.ApplyStartTime(System.DateTime)">
            <summary>
            Applies the specified start time to all animated elements in the group.
            </summary>
            <param name="now">Start time.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationGroup.SetMaxDisplayedItems(System.Int32)">
            <summary>
            Sets the maximum number of displayed items if it has not already been set.
            </summary>
            <param name="maxDisplayedItems">Maximum number of displayed items.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AnimationItem">
            <summary>
            Represents an item that can be animated within a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> or <see cref="P:FluentUI.Blazor.Community.Components.AnimationItem.AnimationGroup"/> component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.AnimationItem"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.AnimationGroup">
            <summary>
            Gets or sets the parent <see cref="P:FluentUI.Blazor.Community.Components.AnimationItem.AnimationGroup"/> component, if any.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.ChildContent">
            <summary>
            Gets or sets the child content of the animation item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.BackgroundColor">
            <summary>
            Gets or sets the background color of the animation item.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Color">
            <summary>
            Gets or sets the color of the animation item.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.OffsetX">
            <summary>
            Gets or sets the horizontal offset value.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.OffsetY">
            <summary>
            Gets or sets the vertical offset value.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Opacity">
            <summary>
            Gets or sets the opacity of the animation item.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Rotation">
            <summary>
            Gets or sets the rotation angle in degrees.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.ScaleX">
            <summary>
            Gets or sets the horizontal scaling factor.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.ScaleY">
            <summary>
            Gets or sets the vertical scaling factor.
            </summary>
            <remarks>This parameter is animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Value">
            <summary>
            Gets or sets the value associated with the animation item.
            </summary>
            <remarks>This parameter is animatable. This parameter should be used for animating an item which represents a chart item.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Width">
            <summary>
            Gets or sets the width of the animation item in pixels.
            </summary>
            <remarks>This parameter is not animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Height">
            <summary>
            Gets or sets the height of the animation item in pixels.
            </summary>
            <remarks>This parameter is not animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Left">
            <summary>
            Gets or sets the left position of the animation item.
            </summary>
            <remarks>This parameter is not animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Top">
            <summary>
            Gets or sets the top position of the animation item.
            </summary>
            <remarks>This parameter is not animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Right">
            <summary>
            Gets or sets the right position of the animation item.
            </summary>
            <remarks>This parameter is not animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.Bottom">
            <summary>
            Gets or sets the bottom position of the animation item.
            </summary>
            <remarks>This parameter is not animatable.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.ZIndex">
            <summary>
            Gets or sets the z-index of the animation item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.InternalCss">
            <summary>
            Gets the css class for the animation item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.InternalStyle">
            <summary>
            Gets the inline style for the animation item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimationItem.AnimatedElement">
            <summary>
            Gets the <see cref="P:FluentUI.Blazor.Community.Components.AnimationItem.AnimatedElement"/> representation of the current state of the animation item.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationItem.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimationItem.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxAnimation">
            <summary>
            Represents a container for animating child elements using various layout strategies.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._isRendered">
            <summary>
            Reprensents a value indicating whether the component has been rendered.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._hasMaxDisplayedItemsChanged">
            <summary>
            Represents a value indicating whether the MaxDisplayedItems parameter has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._layouts">
            <summary>
            Represents the layout strategy used for animating elements.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation.JavaScriptModulePath">
            <summary>
            Represents the javascript module file path for animation handling.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._module">
            <summary>
            Represents the module reference for JavaScript interop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._hasLoopChanged">
            <summary>
            Represents a flag indicating if the loop parameter has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._hasSizeChanged">
            <summary>
            Represents a flag indicating if the width or height parameters have changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._dotNetRef">
            <summary>
            Represents the dotnet object reference for JavaScript interop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._animationEngine">
            <summary>
            Represents the animation engine instance.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxAnimation._immediate">
            <summary>
            Represents whether the animation should run immediately without any transition duration.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.JSRuntime">
            <summary>
            Gets or sets the javaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.ChildContent">
            <summary>
            Gets or sets the content to be rendered inside this component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.Layout">
            <summary>
            Gets or sets the layout content to be rendered inside this component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.Loop">
            <summary>
            Gets or sets a value indicating whether the animation should loop continuously.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.Width">
            <summary>
            Gets or sets the width of the animation container in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.Height">
            <summary>
            Gets or sets the height of the animation container in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.MaxDisplayedItems">
            <summary>
            Gets or sets the maximum number of items to display in the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationStarted">
            <summary>
            Gets or sets the event callback that is invoked when the animation starts.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationStopped">
            <summary>
            Gets or sets the event callback that is invoked when the animation stops.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationPaused">
            <summary>
            Gets or sets the event callback that is invoked when the animation is paused.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationResumed">
            <summary>
            Gets or sets the event callback that is invoked when the animation is resumed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationLooped">
            <summary>
            Gets or sets the event callback that is invoked when the animation loop is completed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationCompleted">
            <summary>
            Gets or sets the event callback that is invoked when the animation is completed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnLayoutChanged">
            <summary>
            Gets or sets the event callback that is invoked when the layout changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.InternalCss">
            <summary>
            Gets or sets the internal css class for the animation container.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxAnimation.InternalStyle">
            <summary>
            Gets or sets the inline style for the animation container, including width and height CSS variables.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.InvokeAsync(Microsoft.AspNetCore.Components.EventCallback)">
            <summary>
            Invokes the specified <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> asynchronously if it has a delegate.
            </summary>
            <remarks>If the <paramref name="callback"/> does not have a delegate, the method completes without
            invoking anything.</remarks>
            <param name="callback">The <see cref="T:Microsoft.AspNetCore.Components.EventCallback"/> to invoke. Must have a delegate to be invoked.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.AddElement(FluentUI.Blazor.Community.Components.AnimationItem)">
            <summary>
            Adds an animated element to the animation engine for management and rendering.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.RemoveElement(FluentUI.Blazor.Community.Components.AnimationItem)">
            <summary>
            Removes an animated element from the animation engine.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.AddGroup(FluentUI.Blazor.Community.Components.AnimationGroup)">
            <summary>
            Adds an animation group to the animation container.
            </summary>
            <param name="group">Group to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.RemoveGroup(FluentUI.Blazor.Community.Components.AnimationGroup)">
            <summary>
            Removes an animation group from the animation container.
            </summary>
            <param name="group">Group to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.SetLayoutAsync(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Sets the layout strategy for the animation engine.
            </summary>
            <remarks>The specified layout strategy is updated with the current dimensions of the  object and then
            applied to the animation engine. Ensure that the layout strategy  is compatible with the animation engine's
            requirements.</remarks>
            <param name="layoutBase">The layout strategy to be applied. This determines how the layout dimensions  are configured and animated.
            Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.RemoveLayout(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Removes the current layout strategy from the animation engine.
            </summary>
            <param name="value">The layout to remove from the component.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnLoopCompletedAsync">
            <summary>
            Occurs when the animation loop is completed.
            </summary>
            <remarks>This method reset the elasped time of the layout.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationCompletedAsync">
            <summary>
            Occurs when the animation is completed.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.OnAnimationFrame">
            <summary>
            Occurs on each animation frame to update the animated elements and return their current state.
            </summary>
            <returns>Returns the elements to be animated.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.PauseAsync">
            <summary>
            Pauses the animation.
            </summary>
            <returns>Returns a task which pauses the animation when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.ResumeAsync">
            <summary>
            Resumes the animation associated with the current instance.
            </summary>
            <returns>Returns a task which resumes the animation when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.StopAsync">
            <summary>
            Stops the animation associated with the current instance.
            </summary>
            <returns>Returns a task which stops the animation when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.SetDurationAsync(System.Double)">
            <summary>
            Asynchronously sets the duration for the specified animation.
            </summary>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.SetImmediateAsync(System.Boolean)">
            <summary>
            Sets whether the animation should run immediately without any transition duration.
            </summary>
            <param name="immediate">Value indicating that the animation is immediate.</param>
            <returns>Returns a task which sets the duration of the animation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxAnimation.StartAsync">
            <summary>
            Starts the animation by invoking the JavaScript function with the necessary parameters.
            </summary>
            <returns>Returns a task which starts the animation when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AnimatedLayoutBase">
            <summary>
            Represents the base class for animated layout strategies used in conjunction with <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> and <see cref="T:FluentUI.Blazor.Community.Components.AnimationGroup"/> components.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AnimatedLayoutBase._hasImmediateChanged">
            <summary>
            Represents whether the <see cref="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Immediate"/> property has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AnimatedLayoutBase._lastDuration">
            <summary>
            Represents the last set duration to detect changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Duration">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Group">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.AnimationGroup"/> component, if any.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Animation">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> component, if any.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.MorphingLayout">
            <summary>
            Gets or sets the parent <see cref="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.MorphingLayout"/> component, if any.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.StartTime">
            <summary>
            Gets the start time of the current layout application.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.EasingFunction">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.EasingMode">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Width">
            <summary>
            Gets the width of the container where the layout is applied.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Height">
            <summary>
            Gets the height of the container where the layout is applied.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Immediate">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.ImmediateChanged">
            <summary>
            Gets or sets a callback that is invoked when the <see cref="P:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Immediate"/> property changes.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.ApplyLayout(System.Collections.Generic.List{FluentUI.Blazor.Community.Components.AnimatedElement})">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <summary>
            Updates the specified animated element's properties based on its index and the total count of elements.
            </summary>
            <param name="index">Index of the element in the layout.</param>
            <param name="count">Total number of elements in the layout</param>
            <param name="animatedElement">Element to update.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.ApplyStartTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.SetDimensions(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnimatedLayoutBase.CreateState``1(``0,``0)">
            <summary>
            Creates a new animation state with the specified start and end values.
            </summary>
            <typeparam name="T">The type of the animation values. Must be a value type.</typeparam>
            <param name="startValue">The initial value of the animation.</param>
            <param name="endValue">The final value of the animation.</param>
            <returns>An <see cref="T:FluentUI.Blazor.Community.Components.AnimationState`1"/> object representing the animation state,  initialized with the specified
            start and end values, as well as the current  duration, start time, easing function, and easing mode.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.BindStackLayout">
            <summary>
            Represents a layout that stacks elements with specified offsets and spacing, optionally reversing the order and applying variant opacity.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.BindStackLayout.OffsetX">
            <summary>
            Gets or sets the initial horizontal offset for the stacked elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.BindStackLayout.OffsetY">
            <summary>
            Gets or sets the initial vertical offset for the stacked elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.BindStackLayout.Spacing">
            <summary>
            Gets or sets the spacing between each stacked element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.BindStackLayout.Reversed">
            <summary>
            Gets or sets a value indicating whether the stacking order should be reversed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.BindStackLayout.VariantOpacity">
            <summary>
            Gets or sets the opacity reduction applied to each subsequent element in the stack.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BindStackLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CascadeLayout">
            <summary>
            Represents a layout that arranges elements in a cascading pattern, applying incremental offsets to each element
            based on its position in the sequence.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.CascadeLayout"/> class is designed to animate elements by applying horizontal and
            vertical offsets that increase proportionally with the element's index. This layout is useful for creating visually
            appealing staggered animations or cascading effects.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CascadeLayout.OffsetXStep">
            <summary>
            Gets or sets the horizontal offset step applied to each subsequent element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CascadeLayout.OffsetYStep">
            <summary>
            Gets or sets the vertical offset step applied to each subsequent element.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CascadeLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ChaosLayout">
            <summary>
            Represents a layout that applies randomized transformations to animated elements,  creating a chaotic and dynamic
            visual effect.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.ChaosLayout"/> class randomizes the position, rotation, scale, and opacity  of
            animated elements within a specified spread range. This layout is useful for creating  visually dynamic and
            unpredictable animations. The randomness is applied independently  to each element, ensuring unique transformations
            for each.  The <see cref="P:FluentUI.Blazor.Community.Components.ChaosLayout.Spread"/> property determines the range within which the random offsets  for position are
            calculated. The layout also applies random rotation (0 to 360 degrees),  scaling (between 0.5 and 1.5), and opacity
            (between 0.5 and 1.0) to each element.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ChaosLayout.Spread">
            <summary>
            Gets or sets the spread value, which represents the difference between two related quantities.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ChaosLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FanLayout">
            <summary>
            Represents a layout that arranges elements in a fan-like pattern, with configurable radius and angle spread.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.FanLayout"/> positions elements in a circular arc, where the radius determines the
            distance  from the center and the angle spread defines the total angular range covered by the elements. The layout 
            animates the position and rotation of each element based on the specified animation parameters.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FanLayout.Radius">
            <summary>
            Gets or sets the radius of the fan layout, determining how far elements are positioned from the center.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FanLayout.AngleSpread">
            <summary>
            Gets or sets the angle spread of the fan layout in degrees, defining the total angular range covered by the elements.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FanLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FloatLayout">
            <summary>
            Represents a layout where elements float freely without a specific arrangement.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FloatLayout.DriftRange">
            <summary>
            Gets or sets the allowable range of drift.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FloatLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FlowerLayout">
            <summary>
            Arranges elements in a circular layout resembling the petals of a flower.
            </summary>
            <remarks>The layout positions elements in a circular pattern, with each element placed at an equal angular    
            distance from its neighbors. The radius of the circle is determined as one-third of the smaller dimension of the
            layout's width or height. The layout also applies a rotation to each element corresponding to its angular
            position.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FlowerLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GalaxyLayout">
            <summary>
            Represents a layout that arranges elements in a spiral pattern resembling a galaxy,  with configurable arms, spread,
            rotation, and number of turns.
            </summary>
            <remarks>This layout animates the position and rotation of elements to create a dynamic galaxy-like effect.
            The layout is defined by several parameters, including the number of arms, the spread of the elements,  the rotation
            per turn, and the total number of turns. The animation is applied to each element's  position and rotation over
            time.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GalaxyLayout.Arms">
            <summary>
            Gets or sets the number of arms in the galaxy layout.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GalaxyLayout.Spread">
            <summary>
            Gets or sets the spread factor of the galaxy layout, determining how far elements are spread out from the center.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GalaxyLayout.RotationPerTurn">
            <summary>
            Gets or sets the rotation in degrees for each complete turn of the spiral.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GalaxyLayout.Turns">
            <summary>
            Gets or sets the number of turns in the galaxy layout.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GalaxyLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GoldenSpiralLayout">
            <summary>
            Provides a layout strategy that arranges elements in a golden spiral pattern.
            </summary>
            <remarks>The golden spiral layout is based on the mathematical constant Phi (approximately 1.618), which
            defines the proportions of the spiral. Elements are positioned in a spiral pattern radiating outward from the center
            of the layout area. The layout animates the position and rotation of elements over a specified duration.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GoldenSpiralLayout.Phi">
            <summary>
            Represents the mathematical constant Phi (φ), also known as the golden ratio.
            </summary>
            <remarks>The value of Phi is approximately 1.61803398875. It is an irrational number that appears in
            various fields such as mathematics, art, architecture, and nature.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GoldenSpiralLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.GoldenSpiralLayout"/> class.
            </summary>
            <remarks>The default duration for the layout animation is set to 2.5 seconds.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GoldenSpiralLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GridLayout">
            <summary>
            Represents a layout that arranges elements in a grid with a fixed number of columns and uniform cell dimensions.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.GridLayout"/> class organizes elements into rows and columns based on the specified
            number of columns  and the dimensions of each cell. The layout automatically calculates the position of each element
            within the grid  and animates their transitions when the layout changes.  This layout is particularly useful for
            scenarios where elements need to be displayed in a structured grid format,  such as image galleries, dashboards, or
            data visualizations.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayout.Columns">
            <summary>
            Gets or sets the number of columns in the grid. Must be at least 1.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayout.CellWidth">
            <summary>
            Gets or sets the width of each cell in the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayout.CellHeight">
            <summary>
            Gets or sets the height of each cell in the grid.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayout.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.HeartLayout">
            <summary>
            Represents a layout that arranges elements in the shape of a heart.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.HeartLayout"/> class positions elements in a heart-shaped pattern,  with their
            positions animated over time. The layout dynamically calculates the  position of each element based on its index and
            the total number of elements,  ensuring that all elements are evenly distributed along the heart curve.  This layout
            is particularly useful for visually appealing animations or  decorative UI elements. The animation parameters, such
            as duration and easing  functions, are inherited from the base class <see cref="T:FluentUI.Blazor.Community.Components.AnimatedLayoutBase"/>.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.HeartLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.HelixLayout">
            <summary>
            Represents a layout that arranges elements in a helical pattern, with each element positioned at an increasing angle
            and distance from the center.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.HelixLayout"/> class calculates the position and rotation of elements based on their
            index in the sequence. Elements are arranged in a spiral-like structure, with their offsets and rotations animated
            over time. The layout is centered within the available width and height of the container.  This layout is
            particularly useful for creating visually dynamic animations or effects where elements appear to follow a helical
            path.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.HelixLayout.AngleStep">
            <summary>
            Represents the fixed angle increment, in degrees, used for calculations or operations that require discrete
            angular steps.
            </summary>
            <remarks>This constant defines the step size for angles, measured in degrees, and is intended for use
            in scenarios where angular values are processed in fixed increments, such as in geometric calculations or
            graphical rendering.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.HelixLayout.Spacing">
            <summary>
            Represents the default spacing value used for layout calculations.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.HelixLayout.AngleIncrement">
            <summary>
            Represents the constant angle increment in radians, calculated as the product of the angle step and the radians
            conversion factor.
            </summary>
            <remarks>This value is used to determine the incremental change in angle for operations requiring
            angular calculations in radians.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.HelixLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MagnetLayout">
            <summary>
            Represents a layout strategy that positions elements towards a specified point with some randomness, creating a "magnet" effect.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MagnetLayout.MagnetX">
            <summary>
            Gets or sets the target X coordinate towards which elements will be attracted.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MagnetLayout.MagnetY">
            <summary>
            Gets or sets the target Y coordinate towards which elements will be attracted.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MagnetLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MorphingLayout">
            <summary>
            Represents a layout strategy that enables smooth transitions between multiple animated layouts.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.MorphingLayout"/> class is used to manage and animate transitions between different
            layouts of elements. It supports defining multiple layouts and morphing between them using specified animation
            parameters such as duration, easing function, and easing mode. This class is typically used in scenarios where
            dynamic and visually appealing layout transitions are required, such as in UI animations or data visualization.  The
            layout transitions are controlled by the parent animation context, and the class provides methods to apply layouts,
            set dimensions, and manage the sequence of layouts. It also ensures proper disposal of resources when no longer
            needed.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.MorphingLayout._layouts">
            <summary>
            Represents the collection of layouts managed by this instance.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.MorphingLayout._fromLayout">
            <summary>
            Represents the layout being transitioned from.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.MorphingLayout._toLayout">
            <summary>
            Represents the layout being transitioned to.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.MorphingLayout._currentLayoutIndex">
            <summary>
            Represents the index of the current layout in the sequence.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.MorphingLayout._startTime">
            <summary>
            Represents the start time of the current layout transition.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.ChildContent">
            <summary>
            Gets or sets the child content to be rendered inside this component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxAnimation"/> component, if any.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.Duration">
            <summary>
            Gets or sets the duration of the layout transition animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.Width">
            <summary>
            Gets or sets the width of the container where the layout is applied.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.Height">
            <summary>
            Gets or sets the height of the container where the layout is applied.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.EasingFunction">
            <summary>
            Gets or sets the easing function used for the layout transition animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.EasingMode">
            <summary>
            Gets or sets the easing mode used for the layout transition animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MorphingLayout.Immediate">
            <summary>
            Gets or sets a value indicating whether layout changes should be applied immediately without animation.
            </summary>
            <remarks>
            MorphingLayout does not support immediate changes. Attempting to set this property to true will result in a NotSupportedException.
            </remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.ApplyLayout(System.Collections.Generic.List{FluentUI.Blazor.Community.Components.AnimatedElement})">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.NextLayout">
            <summary>
            Advances to the next layout in the sequence, looping back to the start if necessary.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.ApplyMorph(FluentUI.Blazor.Community.Components.AnimatedElement,FluentUI.Blazor.Community.Components.AnimatedElement,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <summary>
            Applies a morphing transformation to the specified <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> by interpolating its state
            properties between two other <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> instances.
            </summary>
            <remarks>This method updates the state properties of <paramref name="animatedElement"/> (such as
            position, scale, rotation, color, and opacity) by interpolating between the corresponding properties of
            <paramref name="fromElement"/> and <paramref name="toElement"/>. Default values are used for any null state
            properties in the source or target elements.</remarks>
            <param name="animatedElement">The <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> to which the morphing transformation will be applied.</param>
            <param name="fromElement">The source <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> representing the starting state of the morph.</param>
            <param name="toElement">The target <see cref="T:FluentUI.Blazor.Community.Components.AnimatedElement"/> representing the ending state of the morph.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.ApplyStartTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.SetDimensions(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.Remove(FluentUI.Blazor.Community.Components.AnimatedLayoutBase)">
            <summary>
            Removes the specified layout from the collection of animated layouts.
            </summary>
            <remarks>If the specified layout is not found in the collection, no action is taken.</remarks>
            <param name="value">The layout to remove from the collection. Must not be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.Add(FluentUI.Blazor.Community.Components.AnimatedLayoutBase)">
            <summary>
            Adds the specified layout to the collection if it is not already present.
            </summary>
            <param name="value">The layout to add to the collection. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.CreateState``1(``0,``0)">
            <summary>
            Creates a new animation state with the specified start and end values.
            </summary>
            <typeparam name="T">The type of the animation values. Must be a value type.</typeparam>
            <param name="startValue">The initial value of the animation.</param>
            <param name="endValue">The final value of the animation.</param>
            <returns>An <see cref="T:FluentUI.Blazor.Community.Components.AnimationState`1"/> object representing the animation state,  initialized with the specified
            start and end values, as well as the current  duration, start time, easing function, and easing mode.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MorphingLayout.SetImmediate(System.Boolean)">
            <summary>
            Sets whether the layout change should be applied immediately.
            </summary>
            <param name="immediate">A value indicating whether the layout change should be applied immediately.  Must be <see langword="false"/> as
            immediate changes are not supported.</param>
            <exception cref="T:System.NotSupportedException">Thrown if <paramref name="immediate"/> is <see langword="true"/> because immediate changes are not supported.</exception>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.OrbitLayout">
            <summary>
            Represents a layout strategy that arranges elements in a circular orbit around a specified center point.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.OrbitLayout.Radius">
            <summary>
            Gets or sets the radius of the orbit circle.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.OrbitLayout.CenterX">
            <summary>
            Gets or sets the X coordinate of the center point of the orbit.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.OrbitLayout.CenterY">
            <summary>
            Gets or sets the Y coordinate of the center point of the orbit.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.OrbitLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PinLayout">
            <summary>
            Represents a layout that positions animated elements at a fixed point defined by the <see cref="P:FluentUI.Blazor.Community.Components.PinLayout.PinX"/> and <see
            cref="P:FluentUI.Blazor.Community.Components.PinLayout.PinY"/> coordinates.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.PinLayout"/> class is used to anchor animated elements to a specific point within a
            layout. The position is determined by the <see cref="P:FluentUI.Blazor.Community.Components.PinLayout.PinX"/> and <see cref="P:FluentUI.Blazor.Community.Components.PinLayout.PinY"/> properties, which specify the
            horizontal and vertical coordinates, respectively.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PinLayout.PinX">
            <summary>
            Gets or sets the X coordinate of the pin point where elements will be positioned.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PinLayout.PinY">
            <summary>
            Gets or sets the Y coordinate of the pin point where elements will be positioned.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PinLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PulseLayout">
            <summary>
            Represents a layout that applies a pulsing animation to its child elements,  scaling them dynamically based on a
            randomized pulse factor.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.PulseLayout"/> class is designed to animate the scaling of child elements  by applying
            a randomized pulse effect. The pulse scale is determined by the combination  of the <see cref="P:FluentUI.Blazor.Community.Components.PulseLayout.BaseScale"/> and a
            random value scaled by <see cref="P:FluentUI.Blazor.Community.Components.PulseLayout.PulseScale"/>.  This layout is useful for creating dynamic, attention-grabbing
            animations in user interfaces.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PulseLayout.BaseScale">
            <summary>
            Gets or sets the base scale factor for the pulsing animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PulseLayout.PulseScale">
            <summary>
            Gets or sets the maximum additional scale factor for the pulsing animation.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PulseLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SnakeLayout">
            <summary>
            Represents a layout that arranges elements in a snake-like pattern,  typically used for animated transitions in UI
            components.
            </summary>
            <remarks>This layout is designed to provide a visually dynamic arrangement of elements,  where items are
            positioned in a winding or serpentine sequence. It is particularly  useful for creating engaging animations or
            unique visual effects in user interfaces.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SnakeLayout.Columns">
            <summary>
            Gets or sets the number of columns in the snake layout.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SnakeLayout.CellWidth">
            <summary>
            Gets or sets the cell width of the layout.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SnakeLayout.CellHeight">
            <summary>
            Gets or sets the cell height of the layout.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SnakeLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SpiralGalaxyLayout">
            <summary>
            Represents a layout that arranges animated elements in a spiral galaxy pattern.
            </summary>
            <remarks>The layout positions elements in a spiral formation, with their positions determined by the specified
            <see cref="P:FluentUI.Blazor.Community.Components.SpiralGalaxyLayout.SpiralFactor"/> and their index in the sequence. The animation includes transitions for the X and Y
            offsets as well as rotation, creating a dynamic spiral effect.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SpiralGalaxyLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SpiralGalaxyLayout"/> class with default settings.
            </summary>
            <remarks>The default duration for the layout animation is set to 2.5 seconds.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SpiralGalaxyLayout.SpiralFactor">
            <summary>
            Gets or sets the spiral factor that influences the tightness of the spiral.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SpiralGalaxyLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SpiralLayout">
            <summary>
            Represents a layout that arranges elements in a spiral pattern, where each element's position is determined by its
            index, a step radius, and a step angle.
            </summary>
            <remarks>The layout calculates the position of each element based on polar coordinates, converting them to
            Cartesian coordinates. The distance between elements is controlled by <see cref="P:FluentUI.Blazor.Community.Components.SpiralLayout.RadiusStep"/>, and the angular
            spacing is controlled by <see cref="P:FluentUI.Blazor.Community.Components.SpiralLayout.AngleStep"/>. The layout also supports animating the position and rotation of
            elements.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SpiralLayout.RadiusStep">
            <summary>
            Gets or sets the incremental distance between each element in the spiral.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SpiralLayout.AngleStep">
            <summary>
            Gets or sets the angular increment (in degrees) between each element in the spiral.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SpiralLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.StackedRotatingLayout">
            <summary>
            Represents a layout that arranges elements in a stacked formation, applying a rotational transformation to each
            element.
            </summary>
            <remarks>This layout is typically used to create visually dynamic arrangements where elements are stacked on
            top of each other with a rotational offset. It is suitable for scenarios such as card stacks, carousel-like
            displays, or layered visual effects.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.StackedRotatingLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.StackLayout">
            <summary>
            Represents a layout that arranges its child elements in a stack, either horizontally or vertically,  with optional
            spacing between elements.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.StackLayout"/> is a specialized layout that positions its child elements sequentially 
            in a single line, determined by the <see cref="P:FluentUI.Blazor.Community.Components.StackLayout.Orientation"/> property. The spacing between elements  can be
            customized using the <see cref="P:FluentUI.Blazor.Community.Components.StackLayout.Spacing"/> property. This layout supports animations for  transitioning child
            elements to their new positions.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.StackLayout.Spacing">
            <summary>
            Gets or sets the spacing value used to define the distance between elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.StackLayout.Orientation">
            <summary>
            Gets or sets the orientation of the layer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.StackLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SunburstLayout">
            <summary>
            Represents a layout that arranges elements in a sunburst pattern, where elements are positioned  radially around a
            central point with animated transitions.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.SunburstLayout"/> calculates the position of each element based on its index, 
            distributing elements evenly around a circle. The layout supports animated transitions for  smooth movement of
            elements to their calculated positions. The radius of each element's position  increases incrementally, creating a
            layered, concentric effect.  This layout is particularly useful for visualizations or UI components that require a
            radial  arrangement of elements, such as charts or menus.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SunburstLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.VortexLayout">
            <summary>
            Represents a layout that arranges elements in a dynamic spiral pattern, with optional rotation effects.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.VortexLayout"/> arranges elements in a spiral configuration, where the spacing between
            elements is determined by <see cref="P:FluentUI.Blazor.Community.Components.VortexLayout.RadiusStep"/> and <see cref="P:FluentUI.Blazor.Community.Components.VortexLayout.AngleStep"/>. The layout also supports dynamic
            rotation effects based on the elapsed time, controlled by the <see cref="P:FluentUI.Blazor.Community.Components.VortexLayout.RotationSpeed"/> property.  This layout is
            particularly useful for creating visually engaging animations or effects where elements follow a vortex-like
            motion.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VortexLayout.RadiusStep">
            <summary>
            Gets or sets the incremental distance between each element in the spiral.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VortexLayout.AngleStep">
            <summary>
            Gets or sets the angular increment (in degrees) between each element in the spiral.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.VortexLayout.RotationSpeed">
            <summary>
            Gets or sets the rotation speed, in degrees per second.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.VortexLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.WaveLayout">
            <summary>
            Represents a layout that arranges elements in a wave-like pattern, where the vertical position of each element is
            determined by a sine function based on its horizontal position.
            </summary>
            <remarks>The layout calculates the position of each element using the specified amplitude, frequency, and
            spacing. The horizontal position is determined by the index of the element multiplied by the spacing, while the
            vertical position is calculated as the sine of the horizontal position scaled by the amplitude and frequency. This
            layout is animated, and the positions of the elements are updated over time using the specified animation
            parameters.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.WaveLayout.Amplitude">
            <summary>
            Gets or sets the amplitude of the wave, which determines the height of the wave peaks and troughs.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.WaveLayout.Frequency">
            <summary>
            Gets or sets the frequency of the wave, which determines how many wave cycles occur over a given horizontal distance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.WaveLayout.Spacing">
            <summary>
            Gets or sets the spacing between consecutive elements along the horizontal axis.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.WaveLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ZigZagLayout">
            <summary>
            Represents a zig-zag layout strategy where elements are arranged in a zig-zag pattern.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ZigZagLayout.StepX">
            <summary>
            Gets or sets the horizontal step size between elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ZigZagLayout.StepY">
            <summary>
            Gets or sets the vertical step size between elements.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ZigZagLayout.Update(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.AnimatedElement)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ColorPaletteEasing">
            <summary>
            Represents the easing functions available for color transitions in the ColorPalette component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteEasing.Linear">
            <summary>
            Represents a linear easing function, where the transition progresses at a constant rate.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteEasing.ExponentialIn">
            <summary>
            Represents an ease-in easing function, where the transition starts slowly and accelerates towards the end.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteEasing.ExponentialOut">
            <summary>
            Represents an ease-out easing function, where the transition starts quickly and decelerates towards the end.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteEasing.Sine">
            <summary>
            Represents an ease-in-out easing function, where the transition starts slowly, accelerates in the middle, and decelerates towards the end.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ColorPaletteItem">
            <summary>
            Represents an individual color option in a color palette.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ColorPaletteItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.ColorPaletteItem"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.Color">
            <summary>
            Gets or sets the color value for this palette item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.Size">
            <summary>
            Gets or sets the size of the color square in pixels. Default is 32.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.IsFocused">
            <summary>
            Gets or sets a value indicating whether this item is focused.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether this item is selected.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.OnClick">
            <summary>
            Gets or sets the callback to invoke when the item is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.IsAnimated">
            <summary>
            Gets or sets a value indicating whether the selection change should be animated.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ColorPaletteItem.OnReady">
            <summary>
            Gets or sets the callback to invoke when the component is ready.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ColorPaletteItem.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ColorPaletteMode">
            <summary>
            Represents the mode used for generating color palettes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.None">
            <summary>
            Represents no specific palette mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Provided">
            <summary>
            Represents a palette mode where colors are provided directly.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Random">
            <summary>
            Represents a palette mode where colors are generated randomly.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Gradient">
            <summary>
            Represents a palette mode where colors are generated in a gradient.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.CustomGradient">
            <summary>
            Represents a palette mode where colors are generated using a custom gradient.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Complementary">
            <summary>
            Represents a palette mode where colors are generated using complementary colors.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Analogous">
            <summary>
            Represents a palette mode where colors are generated using analogous colors.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Triadic">
            <summary>
            Represents a palette mode where colors are generated using triadic colors.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Tetradic">
            <summary>
            Represents a palette mode where colors are generated using tetradic colors.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.SplitComplementary">
            <summary>
            Represents a palette mode where colors are generated using split-complementary colors.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Monochrome">
            <summary>
            Represents a palette mode where colors are generated in a monochrome scheme.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Warm">
            <summary>
            Represents a palette mode where colors are generated in a warm scheme with variations.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Cool">
            <summary>
            Represents a palette mode where colors are generated in a cool scheme with cool variations.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Pastel">
            <summary>
            Represents a palette mode where colors are generated in a pastel scheme.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Neon">
            <summary>
            Represents a palette mode where colors are generated in a vibrant scheme.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Greyscale">
            <summary>
            Represents a palette mode where colors are generated in a greyscale scheme.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.AccessibilitySafe">
            <summary>
            Represents a palette mode where colors are generated to be accessibility safe.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.FromImage">
            <summary>
            Represents a palette mode where colors are generated based on an image.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Desaturate">
            <summary>
            Represents a palette mode where colors are generated in a desaturated scheme.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxColorPalette">
            <summary>
            Represents a customizable color palette component that supports various color generation modes, gradient strategies,
            and selection options.
            </summary>
            <remarks>This component allows users to generate and interact with a color palette using predefined modes,
            gradients, or custom plugins. It supports single and multi-selection of colors, as well as advanced customization
            options such as grid layout, item size, and maximum color limits. The palette can also be populated from an image or
            preset configurations.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette.DefaultProvided">
            <summary>
            Represents the default set of colors provided by the palette when no custom colors are specified.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette.JavaScriptModulePath">
            <summary>
            Represents the path to the JavaScript module associated with the color palette component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette._jsModule">
            <summary>
            Represents the javascript module reference for the color palette component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette._buttonsRef">
            <summary>
            Represents a unique identifier for the color palette instance.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette.HarmonyModes">
            <summary>
            Represents the list of harmony modes available for color generation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette._colors">
            <summary>
            Represents the list of colors currently generated and displayed in the palette.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette._focusIndex">
            <summary>
            Represents the index of the currently focused item.
            </summary>
            <remarks>This field is used to track the position of the focused item within a collection or
            list.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxColorPalette._errorMessage">
            <summary>
            Represents an error message that may be displayed to the user.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxColorPalette"/> class.
            </summary>
            <remarks>This constructor generates a unique identifier for the instance using <see
            cref="M:Microsoft.FluentUI.AspNetCore.Components.Identifier.NewId(System.Int32)"/>.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GlobalState">
            <summary>
            Gets or sets the global state service for localization and directionality.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.Runtime">
            <summary>
            Gets or sets the JavaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.HarmonyLabel">
            <summary>
            Gets or sets the label for the harmony mode picker. Default is "Harmony".
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.PresetLabel">
            <summary>
            Gets or sets the label for the preset picker. Default is "Presets".
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.Columns">
            <summary>
            Gets or sets the number of columns in the color grid layout. Default is 10.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ItemSize">
            <summary>
            Gets or sets the size of each color item in the grid, in pixels. Default is 28.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GridGap">
            <summary>
            Gets or sets the gap between grid items, in pixels. Default is 6.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MaxHeight">
            <summary>
            Gets or sets the maximum height of the color palette container, in pixels. Default is 300.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.Mode">
            <summary>
            Gets or sets the color generation mode for the palette. Default is <see cref="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Provided"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ProvidedColors">
            <summary>
            Gets or sets a list of user-provided colors to be used when the mode is set to <see cref="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.Provided"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.Presets">
            <summary>
            Gets or sets a dictionary of preset color lists that can be selected by the user.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SelectedPreset">
            <summary>
            Gets or sets the key of the currently selected preset from the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.Presets"/> dictionary.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.BaseColor">
            <summary>
            Gets or sets the base color used for generating gradients and color schemes. Default is "#3B82F6".
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GradientStrategy">
            <summary>
            Gets or sets the strategy used for generating gradients. Default is <see cref="F:FluentUI.Blazor.Community.Components.GradientStrategy.Shades"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GradientSteps">
            <summary>
            Gets or sets the number of steps to use when generating gradients. Default is 24.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GradientStart">
            <summary>
            Gets or sets the starting color for custom gradient generation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GradientEnd">
            <summary>
            Gets or sets the ending color for custom gradient generation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GenerationOptions">
            <summary>
            Gets or sets additional options for color generation, such as brightness and contrast adjustments.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ShowHarmonyPicker">
            <summary>
            Gets or sets a value indicating whether to display the harmony mode picker when applicable.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MultiSelect">
            <summary>
            Gets or sets a value indicating whether multiple colors can be selected simultaneously.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SelectedColor">
            <summary>
            Gets or sets the currently selected color when <see cref="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MultiSelect"/> is false.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SelectedColorChanged">
            <summary>
            Gets or sets an event callback that is invoked when the selected color changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SelectedColors">
            <summary>
            Gets or sets the list of currently selected colors when <see cref="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MultiSelect"/> is true.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SelectedColorsChanged">
            <summary>
            Gets or sets an event callback that is invoked when the list of selected colors changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ShowPreview">
            <summary>
            Gets or sets a value indicating whether to show a preview of the selected color(s) above the palette.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.Plugins">
            <summary>
            Gets or sets a list of custom color plugins that can be used to generate additional color schemes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MaxColors">
            <summary>
            Gets or sets the maximum number of colors to generate in the palette. Default is 120.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ImageDataProvider">
            <summary>
            Gets or sets a function that provides the data of an image to extract colors from when the mode is set to <see cref="F:FluentUI.Blazor.Community.Components.ColorPaletteMode.FromImage"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ComputedRows">
            <summary>
            Gets the computed number of rows in the color grid based on the number of colors and columns.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SelectedColorsSet">
            <summary>
            Gets a set of selected colors for efficient lookup.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxColorPalette.HarmonyModeString">
            <summary>
            Gets or sets the harmony mode as a string for binding purposes.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.GenerateColorsAsync">
            <summary>
            Generates the color palette based on the current settings and parameters.
            </summary>
            <returns>Returns a task which generates the colors of the palette when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.ToggleSelectAsync(System.String,System.Int32)">
            <summary>
            Toggles the selection state of a color at the specified index.
            </summary>
            <param name="hex">Selected color to toggle.</param>
            <param name="index">Index of the selected color.</param>
            <returns>Returns a task which toggle the color when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.SetFocusAsync(System.Int32)">
            <summary>
            Sets focus to the button at the specified index.
            </summary>
            <param name="index">Index of the button to focus.</param>
            <returns>Returns a task which focus the button at the specified index when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.OnGridKeyDownAsync(Microsoft.FluentUI.AspNetCore.Components.FluentKeyCodeEventArgs)">
            <summary>
            Manages keyboard navigation within the color grid.
            </summary>
            <param name="e">Event args associated to this instance.</param>
            <returns>Returns a task which navigates withing the color grid when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MoveLeft(System.Int32)">
            <summary>
            Moves the focus to the left in the color grid, wrapping around if necessary.
            </summary>
            <param name="index">Current index of the focus.</param>
            <returns>Returns the new index of the focus.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MoveRight(System.Int32)">
            <summary>
            Moves the focus to the right in the color grid, wrapping around if necessary.
            </summary>
            <param name="index">Current index of the focus.</param>
            <returns>Returns the new index of the focus.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MoveUp(System.Int32)">
            <summary>
            Moves the focus up in the color grid, wrapping around if necessary.
            </summary>
            <param name="index">Current index of the focus.</param>
            <returns>Returns the new index of the focus.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.MoveDown(System.Int32)">
            <summary>
            Moves the focus down in the color grid, wrapping around if necessary.
            </summary>
            <param name="index">Current index of the focus.</param>
            <returns>Returns the new index of the focus.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxColorPalette.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GenerationOptions">
            <summary>
            Represents the options for generating a color palette in the ColorPalette component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GenerationOptions.SaturationMin">
            <summary>
            Gets or sets the minimum saturation value for the color palette generation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GenerationOptions.SaturationMax">
            <summary>
            Gets or sets the maximum saturation value for the color palette generation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GenerationOptions.LightnessMin">
            <summary>
            Gets or sets the minimum lightness value for the color palette generation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GenerationOptions.LightnessMax">
            <summary>
            Gets or sets the maximum lightness value for the color palette generation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GenerationOptions.Reverse">
            <summary>
            Gets or sets a value indicating whether the generated colors should be in reverse order.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GenerationOptions.Easing">
            <summary>
            Gets or sets the easing function to be used for color transitions in the palette.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GradientStrategy">
            <summary>
            Represents the strategy used to generate color gradients.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GradientStrategy.Shades">
            <summary>
            Represents a gradient strategy that generates shades of a color.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GradientStrategy.Tints">
            <summary>
            Represents a gradient strategy that generates tints of a color.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GradientStrategy.Saturation">
            <summary>
            Represents a gradient strategy that generates tones of a color.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GradientStrategy.HueShift">
            <summary>
            Represents a gradient strategy that shifts the hue of a color.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IColorPlugin">
            <summary>
            Represents a plugin for generating color palettes based on a base color and specified options.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IColorPlugin.Name">
            <summary>
            Gets the name of the color plugin.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IColorPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <summary>
            Generates a list of color variations based on the specified base color.
            </summary>
            <param name="baseColor">The base color from which variations will be generated. Must be a valid color string (e.g., a hex code or color
            name).</param>
            <param name="steps">The number of variations to generate. Must be a positive integer.</param>
            <param name="options">An object specifying additional options for color generation, such as brightness or saturation adjustments.</param>
            <returns>A list of strings representing the generated color variations. The list will contain exactly <paramref
            name="steps"/> items.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AccessibilitySafePlugin">
            <summary>
            Returns a predefined set of colors that are designed to be accessible and distinguishable.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AccessibilitySafePlugin._safeColors">
            <summary>
            Represents a set of colors that are designed to be accessible and distinguishable.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AccessibilitySafePlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AccessibilitySafePlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AnalogousPlugin">
            <summary>
            Represents a plugin that generates analogous color palettes based on a base color.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.AnalogousPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AnalogousPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ComplementaryPlugin">
            <summary>
            Provides functionality to generate a complementary color gradient based on a specified base color.
            </summary>
            <remarks>This plugin calculates the complementary color of the given base color and generates a gradient using
            the complementary color as the starting point. The gradient is created based on the specified number of steps and
            generation options.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ComplementaryPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ComplementaryPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CoolPlugin">
            <summary>
            Represents a plugin that generates a gradient of colors based on a specified base color and options.
            </summary>
            <remarks>This plugin is designed to generate a gradient starting from a predefined base color of blue. The
            gradient generation process can be customized using the specified number of steps and additional options.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CoolPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CoolPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DesaturatePlugin">
            <summary>
            Represents a plugin that desaturates a base color by reducing its saturation level.
            </summary>
            <remarks>The desaturation amount is specified as a value between 0 and 1, where 0 leaves the color unchanged
            and 1 completely removes saturation, resulting in a grayscale color. This plugin generates a gradient of desaturated
            colors based on the specified number of steps and generation options.</remarks>
            <param name="amount"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DesaturatePlugin.#ctor(System.Double)">
            <summary>
            Represents a plugin that desaturates a base color by reducing its saturation level.
            </summary>
            <remarks>The desaturation amount is specified as a value between 0 and 1, where 0 leaves the color unchanged
            and 1 completely removes saturation, resulting in a grayscale color. This plugin generates a gradient of desaturated
            colors based on the specified number of steps and generation options.</remarks>
            <param name="amount"></param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DesaturatePlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DesaturatePlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DualHuePlugin">
            <summary>
            Represents a color plugin that generates a gradient between two hues.
            </summary>
            <remarks>This plugin creates a gradient by blending a base color with a secondary color. The secondary color
            is specified during the initialization of the plugin.</remarks>
            <param name="secondaryHex"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DualHuePlugin.#ctor(System.String)">
            <summary>
            Represents a color plugin that generates a gradient between two hues.
            </summary>
            <remarks>This plugin creates a gradient by blending a base color with a secondary color. The secondary color
            is specified during the initialization of the plugin.</remarks>
            <param name="secondaryHex"></param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DualHuePlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DualHuePlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GrayscalePlugin">
            <summary>
            Represents a plugin that generates a series of greyscale colors.
            </summary>
            <remarks>This plugin implements the <see cref="T:FluentUI.Blazor.Community.Components.IColorPlugin"/> interface and generates greyscale colors by
            varying the lightness component while keeping hue and saturation fixed at zero.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GrayscalePlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GrayscalePlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MonochromaticPlugin">
            <summary>
            Represents a plugin that generates a monochromatic color palette based on a given base color.
            </summary>
            <remarks>This plugin creates a gradient of colors with a constant hue, varying only in saturation and
            lightness. It is useful for generating visually cohesive color schemes where all colors share the same
            hue.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MonochromaticPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MonochromaticPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.NeonPlugin">
            <summary>
            Represents a plugin that generates a sequence of neon-like colors based on a specified base color.
            </summary>
            <remarks>This plugin implements the <see cref="T:FluentUI.Blazor.Community.Components.IColorPlugin"/> interface and generates colors by varying the
            hue of the base color across the HSL color space. The resulting colors are designed to have maximum saturation and a
            fixed lightness, creating a vibrant neon effect.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.NeonPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.NeonPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PastelPlugin">
            <summary>
            Represents a plugin that generates a pastel color gradient based on a specified base color.
            </summary>
            <remarks>This plugin adjusts the saturation and lightness of the base color to create a pastel effect and
            generates a gradient using a hue-shifting strategy.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PastelPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PastelPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SplitComplementaryPlugin">
            <summary>
            Represents a plugin that generates color palettes based on the split-complementary color scheme.
            </summary>
            <remarks>The split-complementary color scheme is a variation of the complementary color scheme.  It uses a
            base color and two colors adjacent to the base color's complement on the color wheel. This plugin generates
            gradients for each of the three colors in the scheme, combining them into a single palette.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SplitComplementaryPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SplitComplementaryPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TetradicPlugin">
            <summary>
            Generates a tetradic color scheme based on the specified base color, number of steps, and generation options.
            </summary>
            <remarks>A tetradic color scheme consists of four colors evenly spaced around the color wheel (90° apart).
            This method generates gradients for each of the four colors, distributing the specified number of steps across the
            gradients. The resulting list contains all generated colors in sequence.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TetradicPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.TetradicPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TriadicPlugin">
            <summary>
            Generates a triadic color palette based on the specified base color.
            </summary>
            <remarks>A triadic color scheme is created by selecting three colors that are evenly spaced around the color
            wheel (120 degrees apart in hue). This method generates gradients for each of the three colors and combines them
            into a single palette.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TriadicPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.TriadicPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.WarmPlugin">
            <summary>
            Represents a plugin that generates a gradient of warm colors.
            </summary>
            <remarks>This plugin generates a gradient transitioning from red to gold. It can be used to create warm color
            palettes for various applications, such as UI design or data visualization.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.WarmPlugin.Name">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.WarmPlugin.Generate(System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CookieChoices">
            <summary>
            Represents the available choices for the cookie.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CookieChoices.AcceptOnly">
            <summary>
            The user can only accept the cookies.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CookieChoices.AcceptDeny">
            <summary>
            The user can accept or deny the cookies.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CookieChoices.AcceptDenyManage">
            <summary>
            The user can accept, deny or manage the cookies.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CookieData">
            <summary>
            Represents the content of the <see cref="T:FluentUI.Blazor.Community.Components.ManageCookie"/> dialog.
            </summary>
            <param name="Items">Items to activate / deactivate.</param>
            <param name="Labels">Labels to localize some part of the <see cref="T:FluentUI.Blazor.Community.Components.ManageCookie"/> dialog.</param>
            <param name="ItemTemplate">Template to render the items in the dialog.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CookieData.#ctor(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.CookieItem},FluentUI.Blazor.Community.Components.CookieLabels,Microsoft.AspNetCore.Components.RenderFragment{FluentUI.Blazor.Community.Components.CookieItem})">
            <summary>
            Represents the content of the <see cref="T:FluentUI.Blazor.Community.Components.ManageCookie"/> dialog.
            </summary>
            <param name="Items">Items to activate / deactivate.</param>
            <param name="Labels">Labels to localize some part of the <see cref="T:FluentUI.Blazor.Community.Components.ManageCookie"/> dialog.</param>
            <param name="ItemTemplate">Template to render the items in the dialog.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieData.Items">
            <summary>Items to activate / deactivate.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieData.Labels">
            <summary>Labels to localize some part of the <see cref="T:FluentUI.Blazor.Community.Components.ManageCookie"/> dialog.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieData.ItemTemplate">
            <summary>Template to render the items in the dialog.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CookieItem">
            <summary>
            Represents a cookie item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItem.Name">
            <summary>
            Gets or sets the name of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItem.Title">
            <summary>
            Gets or sets the title of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItem.Description">
            <summary>
            Gets or sets the description of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItem.IsActive">
            <summary>
            Gets or sets a value indicating if the item is active.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItem.Disabled">
            <summary>
            Gets or sets a value indicating that the item is disabled.
            </summary>
            <remarks>
            A disabled cookie item defines a mandatory item.
            </remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CookieItem.CreateGoogleAnalyticsCookie(System.String)">
            <summary>
            Gets the cookie item for the google analytics view.
            </summary>
            <param name="description">Description of the cookie.</param>
            <returns>Returns the cookie.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CookieItemView">
            <summary>
            Represents a view for a <see cref="T:FluentUI.Blazor.Community.Components.CookieItem"/>.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CookieItemView.#ctor">
            <summary>
            Initializes a new instance of the class <see cref="T:FluentUI.Blazor.Community.Components.CookieItemView"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItemView.Item">
            <summary>
            Gets or sets the item to render.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItemView.Template">
            <summary>
            Gets or sets the template of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItemView.ShowDivider">
            <summary>
            Gets or sets a value indicating that a divider is shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItemView.AcceptLabel">
            <summary>
            Gets or sets the accept label button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItemView.DeclineLabel">
            <summary>
            Gets or sets the decline label button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieItemView.OnActivationChanged">
            <summary>
            Gets or sets the event callback to raise when the <see cref="P:FluentUI.Blazor.Community.Components.CookieItem.IsActive" /> parameter changed.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CookieItemView.OnActivationChangedAsync">
            <summary>
            Occurs when the activation has changed.
            </summary>
            <returns>Returns a task which invokes <see cref="P:FluentUI.Blazor.Community.Components.CookieItemView.OnActivationChanged"/> when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CookieLabels">
            <summary>
            Represents the labels used in a cookie consent component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.Default">
            <summary>
            Gets the default instance of the <see cref="T:FluentUI.Blazor.Community.Components.CookieLabels"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.French">
            <summary>
            Gets the french instance of the <see cref="T:FluentUI.Blazor.Community.Components.CookieLabels"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.Title">
            <summary>
            Gets or sets the title of the cookie consent dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.PrimaryDescription">
            <summary>
            Gets or sets the primary description of the cookie consent dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.SecondaryDescription">
            <summary>
            Gets or sets the secondary description of the cookie consent dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.Accept">
            <summary>
            Gets or sets the label for the accept button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.Decline">
            <summary>
            Gets or sets the label for the decline button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.ManageCookies">
            <summary>
            Gets or sets the label for the manage cookies button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.PrivacyStatement">
            <summary>
            Gets or sets the label for the privacy statement link.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.ThirdPartyCookies">
            <summary>
            Gets or sets the label for third-party cookies section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.ManageCookiesTitle">
            <summary>
            Gets or sets the title for the manage cookies dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.SaveChanges">
            <summary>
            Gets or sets the label for the save changes button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.Cancel">
            <summary>
            Gets or sets the label for the cancel button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.GoogleAnalyticsDescription">
            <summary>
            Gets or sets the description for Google Analytics cookies.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.ShowCookieDialogTitle">
            <summary>
            Gets or sets the title for the button that shows the cookie dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CookieLabels.HideCookieDialogTitle">
            <summary>
            Gets or sets the title for the button that hides the cookie dialog.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CookieView">
            <summary>
            Represents the view of the cookie dialog.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CookieView.Default">
            <summary>
            The cookie dialog is centered on the screen.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.CookieView.Small">
            <summary>
            The cookie dialog is set to the bottom-right on the screen.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxCookie">
            <summary>
            Represents the cookie dialog.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie._isMobile">
            <summary>
            Gets or sets a value indicating whether the device is a mobile device or not.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie._showCookieDialog">
            <summary>
            Represents a value that show the dialog or not.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie._manageCookieVisible">
            <summary>
            Gets or sets a value indicating whether the open button is disabled when the manage cookies dialog is visible.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie.JavascriptFilename">
            <summary>
            Represents the javascript file to load.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie._module">
            <summary>
            Represents the javascript module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie.GoogleAnalytics">
            <summary>
            Represents the google analytics item.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie._cookieState">
            <summary>
            Represents the cookies to accept or deny.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxCookie._renderActionButtons">
            <summary>
            Represents the actions buttons to render.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Runtime">
            <summary>
            Gets or sets the javascript runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.DialogService">
            <summary>
            Gets or sets the dialog service.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.DeviceInfoState">
            <summary>
            Gets or sets the device info state.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.View">
            <summary>
            Gets or sets the view of the cookie dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Choices">
            <summary>
            Gets or sets the choices to close the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.DefaultViewContent">
            <summary>
            Gets or sets the default view content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.SmallViewContent">
            <summary>
            Gets or sets the small view content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.ItemTemplate">
            <summary>
            Gets or sets the template to render the item in the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Items">
            <summary>
            Gets or sets the cookies to accept or deny.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Labels">
            <summary>
            Gets or sets the labels of the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.PrivacyStatementUrl">
            <summary>
            Gets or sets the privacy statement url.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.ThirdPartyCookiesUrl">
            <summary>
            Gets or sets the third party cookie url.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Width">
            <summary>
            Gets or sets the width of the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Height">
            <summary>
            Gets or sets the height of the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.OnInitActiveCookie">
            <summary>
            Gets or sets the event callback to raise when an active cookie is selected.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.CookieEmoji">
            <summary>
            Gets or sets the emoji to represent the cookie.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.GoogleAnalyticsId">
            <summary>
            Gets or sets the Google analytics id.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.Modal">
            <summary>
            Gets or sets a value indicating whether the dialog is modal or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.OpenButtonPosition">
            <summary>
            Gets or sets the position of the open button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.OpenConsentVisibility">
            <summary>
            Gets or sets a value indicating whether the open button is visible or not.
            </summary>
            <remarks>
            When this property is set to <see cref="F:FluentUI.Blazor.Community.Components.OpenCookieVisibility.Always" />, the user can open the cookie dialog again to change his cookie preferences.
            When this property is set to <see cref="F:FluentUI.Blazor.Community.Components.OpenCookieVisibility.Never" />, the user cannot open the cookie dialog again after he accepted or declined the cookies.
            When this property is set to <see cref="F:FluentUI.Blazor.Community.Components.OpenCookieVisibility.WhenFirstHidden" />, the user can open the cookie dialog again only if he accepted or declined the cookies the first time.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.CloseButtonIcon">
            <summary>
            Gets or sets the icon of the close button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.OpenButtonIcon">
            <summary>
            Gets or sets the icon of the open button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.RelativeContainerId">
            <summary>
            Gets or sets the id of the container to which the dialog is relative.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.IsDescriptionMarkup">
            <summary>
            Gets or sets a value indicating whether the descriptions contains markup or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.SwitchToMobileDeviceWidth">
            <summary>
            Gets or sets the width under which the dialog switch to the mobile device view.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.InternalCss">
            <summary>
            Gets the css to use for the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxCookie.InternalStyle">
            <summary>
            Gets the style to use for the dialog.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.InitOtherCookiesAsync(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.CookieItem})">
            <summary>
            Initializes all other active cookies in an asynchronous way.
            </summary>
            <param name="items">Items to initialize.</param>
            <returns>Returns a task which initialize all active cookies when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.StoreCookieAsync(System.Boolean)">
            <summary>
            Stores the cookies in the local storage in an asynchronous way.
            </summary>
            <param name="activated">Indicates if the cookie is active or not.</param>
            <returns>Returns a task wich stores the cookies in the local storage in an asynchronous way.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.StoreCookieInternalAsync(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.CookieItem})">
            <summary>
            Stores the cookies in the local storage in an asynchronous way.
            </summary>
            <param name="value">Cookies to store.</param>
            <returns>Returns a task wich stores the cookies in the local storage in an asynchronous way.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.InitGoogleAnalyticsAsync">
            <summary>
            Initializes the Google Analytics cookie if activated.
            </summary>
            <returns>Returns a task which actives the Google Analytics cookie when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.DeleteCookieAsync">
            <summary>
            Deletes the cookie from the local storage in an asynchronous way.
            </summary>
            <returns>Returns a task which deletes the cookie from the local storage when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.OnAcceptAsync">
            <summary>
            Occurs when the Accept button is clicked.
            </summary>
            <returns>Returns a task which active all cookies when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.OnDeclineAsync">
            <summary>
            Occurs when the Decline button is clicked.
            </summary>
            <returns>Returns a task which deactive all cookies when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.OnManageCookiesAsync">
            <summary>
            Occurs when the Manage Cookies button is clicked.
            </summary>
            <returns>Returns a task which manage the cookie dialog when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxCookie.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ManageCookie">
            <summary>
            Represents the dialog to manage the cookies.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ManageCookie.Dialog">
            <summary>
            Gets or sets the parent dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ManageCookie.Content">
            <summary>
            Gets or sets the content of the dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ManageCookie.ButtonsDisabled">
            <summary>
            Gets a value indicating that the buttons are disabled or not.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ManageCookie.OnCancelAsync">
            <summary>
            Closes the dialog with a cancel result.
            </summary>
            <returns>Returns a task which closes the dialog with a cancel result.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ManageCookie.OnSaveAsync">
            <summary>
            Closes the dialog with an ok result.
            </summary>
            <returns>Returns a task which closes the dialog with an ok result.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.OpenCookieVisibility">
            <summary>
            Represents the visibility options for the open button in a cookie consent component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OpenCookieVisibility.Always">
            <summary>
            The open button is always visible.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OpenCookieVisibility.Never">
            <summary>
            The open button is never visible.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OpenCookieVisibility.WhenFirstHidden">
            <summary>
            The open button is visible only when the first cookie consent banner is hidden.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Cursor">
            <summary>
            Represents the different types of cursors that can be used in the Fluent UI Blazor Community components.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.None">
            <summary>
            No cursor is specified.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Auto">
            <summary>
            Cursor is set automatically based on context.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Default">
            <summary>
            Cursor is the default arrow cursor.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.ContextMenu">
            <summary>
            Cursor indicates a context menu is available, typically a pointer with a small menu icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Help">
            <summary>
            Cursor indicates help is available, typically a question mark or a pointer with a question mark.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Pointer">
            <summary>
            Cursor indicates a clickable item, typically a hand icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Progress">
            <summary>
            Cursor indicates a progress action is occurring, typically a pointer with a spinning circle or hourglass.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Wait">
            <summary>
            Cursor indicates that the user should wait, typically an hourglass or spinning circle.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Cell">
            <summary>
            Cursor indicates a cell selection, typically a plus sign.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Crosshair">
            <summary>
            Cursor indicates crosshair selection, typically a crosshair icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Text">
            <summary>
            Cursor indicates text selection, typically an I-beam icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.VerticalText">
            <summary>
            Cursor indicates vertical text selection, typically an horizontal I-beam icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Alias">
            <summary>
            Cursor indicates an alias action, typically a pointer with a small arrow.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Copy">
            <summary>
            Cursor indicates a copy action, typically a pointer with a small plus sign.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Move">
            <summary>
            Cursor indicates a move action, typically a pointer with four arrows.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NoDrop">
            <summary>
            Cursor indicates no drop action, typically a circle with a line through it.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NotAllowed">
            <summary>
            Cursor indicates that an action is not allowed, typically a circle with a line through it.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Grab">
            <summary>
            Cursor indicates grabbing action, typically a hand icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.Grabbing">
            <summary>
            Cursor indicates grabbing action, typically a closed hand icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.AllScroll">
            <summary>
            Cursor indicates all-direction scrolling, typically a four-arrow icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.ColResize">
            <summary>
            Cursor indicates column resizing, typically a horizontal double arrow.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.RowResize">
            <summary>
            Cursor indicates row resizing, typically a vertical double arrow.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NResize">
            <summary>
            Cursor indicates north resizing, typically a vertical double arrow pointing up and down.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.EResize">
            <summary>
            Cursor indicates east resizing, typically a horizontal double arrow pointing left and right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.SResize">
            <summary>
            Cursor indicates south resizing, typically a vertical double arrow pointing up and down.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.WResize">
            <summary>
            Cursor indicates west resizing, typically a horizontal double arrow pointing left and right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NeResize">
            <summary>
            Cursor indicates northeast resizing, typically a diagonal double arrow pointing top-right and bottom-left.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NwResize">
            <summary>
            Cursor indicates northwest resizing, typically a diagonal double arrow pointing top-left and bottom-right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.SeResize">
            <summary>
            Cursor indicates southeast resizing, typically a diagonal double arrow pointing top-left and bottom-right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.SwResize">
            <summary>
            Cursor indicates southwest resizing, typically a diagonal double arrow pointing top-right and bottom-left.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.EwResize">
            <summary>
            Cursor indicates east-west resizing, typically a horizontal double arrow pointing left and right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NsResize">
            <summary>
            Cursor indicates north-south resizing, typically a vertical double arrow pointing up and down.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NeswResize">
            <summary>
            Cursor indicates northeast-southwest resizing, typically a diagonal double arrow pointing top-right and bottom-left.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.NwseResize">
            <summary>
            Cursor indicates northwest-southeast resizing, typically a diagonal double arrow pointing top-left and bottom-right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.ZoomIn">
            <summary>
            Cursor indicates zooming in, typically a magnifying glass with a plus sign.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Cursor.ZoomOut">
            <summary>
            Cursor indicates zooming out, typically a magnifying glass with a minus sign.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Browser">
            <summary>
            Represents the browser used to running the app.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.Undefined">
            <summary>
            Undefined browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.Edge">
            <summary>
            Represents Microsoft Edge browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.InternetExplorer9">
            <summary>
            Represents Internet Explorer 9 browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.InternetExplorer10">
            <summary>
            Represents Internet Explorer 10 browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.InternetExplorer11">
            <summary>
            Represents Internet Explorer 11 browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.InternetExplorerUnknown">
            <summary>
            Represents an unknown Internet Explorer browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.Firefox">
            <summary>
            Represents Firefox browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.Chrome">
            <summary>
            Represents Chrome browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.Safari">
            <summary>
            Represents Safari browser.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Browser.Opera">
            <summary>
            Represents Opera browser.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.BrowserConverter">
            <summary>
            Represents a converter to a <see cref="T:FluentUI.Blazor.Community.Components.Browser"/> enumeration from a <see cref="T:System.String"/> format.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BrowserConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.BrowserConverter.Write(System.Text.Json.Utf8JsonWriter,FluentUI.Blazor.Community.Components.Browser,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DeviceInfo">
            <summary>
            Represents the information of the device where the app is running.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.Browser">
            <summary>
            Gets the used browser.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.OperatingSystem">
            <summary>
            Gets the operating system.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.Touch">
            <summary>
            Gets if touch is enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.Mobile">
            <summary>
            Gets the used mobile.
            </summary>
            <remarks>If the app is running on desktop, this value is set to <see cref="F:FluentUI.Blazor.Community.Components.Mobile.NotMobileDevice"/></remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.IsTablet">
            <summary>
            Gets a value indicating if the app is running on a tablet.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.IsMobile">
            <summary>
            Gets a value if the app is running on a mobile.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.IsIPad">
            <summary>
            Gets or sets a value indicating if the app is running on an iPad.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfo.Orientation">
            <summary>
            Gets the orientation of the device.
            </summary>
        </member>
        <member name="E:FluentUI.Blazor.Community.Components.DeviceInfo.OrientationChanged">
            <summary>
            Events occured when the orientation of the device has changed.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DeviceInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DeviceInfo.ToMarkup">
            <summary>
            Returns a <see cref="T:Microsoft.AspNetCore.Components.MarkupString"/> that represents the current object.
            </summary>
            <returns>A <see cref="T:Microsoft.AspNetCore.Components.MarkupString"/> that represents the current object.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DeviceInfoState">
            <summary>
            Represents the state of the device information.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeviceInfoState.DeviceInfo">
            <summary>
            Gets or sets the information of the device.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DeviceOrientation">
            <summary>
            Represents the orientation of the device.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.DeviceOrientation.Portrait">
            <summary>
            The orientation is portrait.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.DeviceOrientation.PortraitReversed">
            <summary>
            The orientation is portrait but image is flipped.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.DeviceOrientation.Landscape">
            <summary>
            The device is oriented horizontally.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.DeviceOrientation.LandscapeReversed">
            <summary>
            The device is oriented horizontally, but the image is flipped.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector">
            <summary>
            Represents a component which detects the device where the app is running.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector._deviceDetectorReference">
            <summary>
            Represents the reference of the device detector.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector._module">
            <summary>
            Represents the javascript object.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.JavascriptFileName">
            <summary>
            Represents the name of the javascript.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.ChildContent">
            <summary>
            Gets or sets the ChildContent render fragment.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.JSRuntime">
            <summary>
            Gets or sets the Javascript Runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.State">
            <summary>
            Gets the state which contains the information of the device.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.DeviceInfoUpdated">
            <summary>
            Gets or sets the callback to use when the device information is updated.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.DeviceInfo">
            <summary>
            Gets the information about the device.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.ChangeOrientation(System.String)">
            <summary>
            Occurs when the orientation of the device changed.
            </summary>
            <param name="orientation">Value indicating the orientation of the device.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxDeviceDetector.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Mobile">
            <summary>
            Represents the mobile where the app is running.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.UnknownMobileDevice">
            <summary>
            The app is running on a mobile but the app doesn't know the kind of the mobile.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.NotMobileDevice">
            <summary>
            The app is running on a desktop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.WindowsPhone">
            <summary>
            The app is running on a Windows Phone.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.IPhone">
            <summary>
            The app is running on an Iphone.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.IPad">
            <summary>
            The app is running on an Ipad.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.IPod">
            <summary>
            The app is running on an Ipod.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.Android">
            <summary>
            The app is running on an Android.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.BlackBerry">
            <summary>
            The app is running on a BlackBerry.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Mobile.Safari">
            <summary>
            The app is running on a Safari.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MobileConverter">
            <summary>
            Represents a converter to a <see cref="T:FluentUI.Blazor.Community.Components.Mobile"/> enumeration from a <see cref="T:System.String"/> format.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MobileConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.MobileConverter.Write(System.Text.Json.Utf8JsonWriter,FluentUI.Blazor.Community.Components.Mobile,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.OperatingSystem">
            <summary>
            Represents the operating system where the app is running.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Undefined">
            <summary>
            Unknown operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.WindowsNT">
            <summary>
            Windows NT operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.WindowsXp">
            <summary>
            Windows XP operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Windows7">
            <summary>
            Windows 7 operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Windows8">
            <summary>
            Windows 8 operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Windows10">
            <summary>
            Windows 10 operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Windows11">
            <summary>
            Windows 11 operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.WindowsVista">
            <summary>
            Windows Vista operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Mac">
            <summary>
            Mac operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Linux">
            <summary>
            Linux operating system.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OperatingSystem.Nix">
            <summary>
            Nix operating system.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.OperatingSystemConverter">
            <summary>
            Represents a converter to a <see cref="T:FluentUI.Blazor.Community.Components.OperatingSystem"/> enumeration from a <see cref="T:System.String"/> format.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.OperatingSystemConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.OperatingSystemConverter.Write(System.Text.Json.Utf8JsonWriter,FluentUI.Blazor.Community.Components.OperatingSystem,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AcceptFile">
            <summary>
            Represents the accepted files inside a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.None">
            <summary>
            No file allowed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Audio">
            <summary>
            Audio files allowed.
            </summary>
            <remarks>Represents the audio/* tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Image">
            <summary>
            Image files allowed.
            </summary>
            <remarks>Represents the image/* tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Video">
            <summary>
            Video files allowed.
            </summary>
            <remarks>Represents the video/* tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Pdf">
            <summary>
            Pdf files allowed.
            </summary>
            <remarks>Represents the .pdf tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Excel">
            <summary>
            Excel files allowed.
            </summary>
            <remarks>Represents the .xls and .xlsx tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Word">
            <summary>
            Word files allowed.
            </summary>
            <remarks>Represents the .doc and .docx tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Powerpoint">
            <summary>
            Powerpoint files allowed.
            </summary>
            <remarks>Represents the .ppt and .pptx tag.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.AcceptFile.Document">
            <summary>
            Document files allowed.
            </summary>
            <remarks>Represents <see cref="F:FluentUI.Blazor.Community.Components.AcceptFile.Pdf"/>, <see cref="F:FluentUI.Blazor.Community.Components.AcceptFile.Word"/>, <see cref="F:FluentUI.Blazor.Community.Components.AcceptFile.Excel"/>, <see cref="F:FluentUI.Blazor.Community.Components.AcceptFile.Powerpoint"/> tags.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.AcceptFileProvider">
            <summary>
            Represents a provider to convert <see cref="T:FluentUI.Blazor.Community.Components.AcceptFile"/> into html tag to be able to select files with <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.AcceptFileProvider.Get(FluentUI.Blazor.Community.Components.AcceptFile)">
            <summary>
            Gets the html tags from <see cref="T:FluentUI.Blazor.Community.Components.AcceptFile"/> value.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Returns a <see cref="T:System.String"/> which contains all tags to use in the file selector
             inside <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/></returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels">
            <summary>
            Represents the labels for the file from its extension.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.#ctor">
            <summary>
            Prevents the creation of an instance of the class <see cref="T:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Default">
            <summary>
            Gets the default labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.French">
            <summary>
            Gets the french labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WindowsAudioFile">
            <summary>
            Gets or sets the label for a Windows audio file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftAccessDatabaseFile">
            <summary>
            Gets or sets the label for Microsoft Access database file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftAccessExecuteOnlyFile">
            <summary>
            Gets or sets the label for icrosoft Access execute-only file
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftAccessRuntimeDatabase">
            <summary>
            Gets or sets the label for Microsoft Access runtime database file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftAccessDatabaseTemplate">
            <summary>
            Gets or sets the label for Microsoft Access database template file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.AudioInterchangeFileFormatFile">
            <summary>
            Gets or sets the label for audio interchange file format file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.AspNetActiveServerPage">
            <summary>
            Gets or sets the label for Asp.Net file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.AspFile">
            <summary>
            Gets or sets the label for Asp file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.AudioVideoInterleaveFile">
            <summary>
            Gets or sets the label for avi file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.BatchFile">
            <summary>
            Gets or sets the label for batch file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.BinaryFile">
            <summary>
            Gets or sets the label for binary file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.BitmapFile">
            <summary>
            Gets or sets the label for bitmap file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Cab">
            <summary>
            Gets or sets the label for Windows cabinet file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Cda">
            <summary>
            Gets or sets the label for CD audio track.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Csv">
            <summary>
            Gets or sets the label for csv file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Dif">
            <summary>
            Gets or sets the label for dif file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Dll">
            <summary>
            Gets or sets the label for dll file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftWordDocument">
            <summary>
            Gets or sets the label for Microsoft Word file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftWordTemplate">
            <summary>
            Gets or sets the label for Microsoft Word template file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftWordMacroEnabledDocument">
            <summary>
            Gets or sets the label for Microsoft Word macro enabled document.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Eml">
            <summary>
            Gets or sets the label for eml file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Eps">
            <summary>
            Gets or sets the label for eps file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Exe">
            <summary>
            Gets or sets the label for exe file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Flv">
            <summary>
            Gets or sets the label for flv file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Gif">
            <summary>
            Gets or sets the label for gif file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Html">
            <summary>
            Gets or sets the label for html file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Ini">
            <summary>
            Gets or sets the label for ini file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Iso">
            <summary>
            Gets or sets the label for iso file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Jar">
            <summary>
            Gets or sets the label for jar file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Jpg">
            <summary>
            Gets or sets the label for jpg file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Jpeg">
            <summary>
            Gets or sets the label for jpeg file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.M4a">
            <summary>
            Gets or sets the label for m4a file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mdb">
            <summary>
            Gets or sets the label for Microsoft access database file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Midi">
            <summary>
            Gets or sets the label for midi file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mov">
            <summary>
            Gets or sets the label for mov file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mp3">
            <summary>
            Gets or sets the label for mp3 file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mp4">
            <summary>
            Gets or sets the label for mp4 file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mpeg">
            <summary>
            Gets or sets the label for mpg file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mpg">
            <summary>
            Gets or sets the label for mp1 file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Msi">
            <summary>
            Gets or sets the label for msi file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Mui">
            <summary>
            Gets or sets the label for mui file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Pdf">
            <summary>
            Gets or sets the label for pdf file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Png">
            <summary>
            Gets or sets the label for png file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPowerPointAddIn">
            <summary>
            Gets or sets the label for Microsoft Powerpoint Add-in file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPowerPointSlide">
            <summary>
            Gets or sets the label for Microsoft Powerpoint slide file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.PowerShell">
            <summary>
            Gets or sets the label for Microsoft Powershell file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.AdobePhotoshopFile">
            <summary>
            Gets or sets the label for Adobe photoshop file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.OutlookDataStore">
            <summary>
            Gets or sets the label for Microsoft Outlook data store file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPublisherFile">
            <summary>
            Gets or sets the label for Microsoft Publisher file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.ArchiveCompressedFile">
            <summary>
            Gets or sets the label for zip, rar, 7zip file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.RichTextFormatFile">
            <summary>
            Gets or sets the label for rtf file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.ShockwaveFlashFile">
            <summary>
            Gets or sets the label for Shockwave flash file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftWindowsSystemSettings">
            <summary>
            Gets or sets the label for Microsoft Windows system settings file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.TaggedImageFormatFile">
            <summary>
            Gets or sets the label for tiff file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.TemporaryDataFile">
            <summary>
            Gets or sets the label for temp data file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.TextDocument">
            <summary>
            Gets or sets the label for text file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.VideoObjectFile">
            <summary>
            Gets or sets the label for video object file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftVisio">
            <summary>
            Gets or sets the label for Microsoft Visio file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftVisioMacroEnabled">
            <summary>
            Gets or sets the label for Microsoft Visio macro-enabled drawing file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftVisioDrawing">
            <summary>
            Gets or sets the label for Microsoft Visio drawing file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftVisioTemplate">
            <summary>
            Gets or sets the label for Microsoft Visio template.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WaveAudioFile">
            <summary>
            Gets or sets the label for wave file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftWorksFile">
            <summary>
            Gets or sets the label for Microsoft Works file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WindowsMediaAudioFile">
            <summary>
            Gets or sets the label for Windows media audio file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WindowsMediaDownloadFile">
            <summary>
            Gets or sets the label for Windows media download file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WindowsMediaVideoFile">
            <summary>
            Gets or sets the label for Windows media video file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WindowsMediaSkinsFile">
            <summary>
            Gets or sets the label for Windows media skin file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.WordPerfectDocument">
            <summary>
            Gets or sets the label for Word perfect document file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftExcelAddIn">
            <summary>
            Gets or sets the label for Microsoft Excel add-in file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftExcelDocument">
            <summary>
            Gets or sets the label for Microsoft Excel file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftExcelTemplate">
            <summary>
            Gets or sets the label for Microsoft Excel template file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftExcelWorkbook">
            <summary>
            Gets or sets the label for Microsoft Excel workbook file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftExcelMacroEnabled">
            <summary>
            Gets or sets the label for Microsoft Excel macro-enabled file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.Xps">
            <summary>
            Gets or sets the label for xps file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.UnknownValue">
            <summary>
            Gets or sets the label for unknwon file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPowerPointTemplate">
            <summary>
            Gets or sets the label for Microsoft Powerpoint template file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPowerPointMacroEnabled">
            <summary>
            Gets or sets the label for Microsoft Powerpoint marcro-enabled file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPowerPointDocument">
            <summary>
            Gets or sets the label for Microsoft Powerpoint Document file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftExcelDllAddIn">
            <summary>
            Gets or sets the label for Microsoft Excel dll based add-in file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.MicrosoftPowerBiDocument">
            <summary>
            Gets or sets the label for Microsoft PowerBi Document file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.SvgFile">
            <summary>
            Gets or sets the label for svg file.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileExtensionTypeLabels.JsonFile">
            <summary>
            Gets or sets the label for json file.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons">
            <summary>
            Represents the icons used by <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileIcons._iconForDetailsPanel">
            <summary>
            Represents the icons for the details panel.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileIcons._iconsFromExtension">
            <summary>
            Represents the icons from extensions.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileIcons._sizedGridOptionsIconFromExtensions">
            <summary>
            Represents the icons used for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> from its <see cref="T:FluentUI.Blazor.Community.Components.FileView"/> parameter. 
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.FromExtension(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from its extension.
            </summary>
            <param name="extension">Extension of the file.</param>
            <returns>Returns the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from its extension.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.FromExtensionAndGridViewOptions(System.String,FluentUI.Blazor.Community.Components.FileView)">
            <summary>
            Gets the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from the <paramref name="extension"/> and <paramref name="view"/>.
            </summary>
            <param name="extension">Extension of the file.</param>
            <param name="view">View used from the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.</param>
            <returns>Returns the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from its extension and its view.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.GetFolderFromGridViewOptions(FluentUI.Blazor.Community.Components.FileView)">
            <summary>
            Gets the folder <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from the <paramref name="view"/>.
            </summary>
            <param name="view">View used from the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.</param>
            <returns>Returns the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from its view.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.GetIconForDetails(System.String,System.Boolean)">
            <summary>
            Gets the icons from the extension.
            </summary>
            <param name="extension">Extension of the file.</param>
            <param name="isDirectory">True if we want to have the folder icon.</param>
            <returns>Returns the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> from its extension.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.ToImageSource(Microsoft.FluentUI.AspNetCore.Components.Icon)">
            <summary>
            Convert the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> value into an image source.
            </summary>
            <param name="icon">Icon to convert.</param>
            <returns>Returns the html image source from its icon.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128">
            <summary>
            Represents the icon on a square of 128x128 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.MusicIcon">
            <summary>
            Represents a music file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.MusicIcon.#ctor">
            <summary>
            Represents a music file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.DefaultFileIcon">
            <summary>
            Represents a default file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.DefaultFileIcon.#ctor">
            <summary>
            Represents a default file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.ExcelIcon">
            <summary>
            Represents a excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.ExcelIcon.#ctor">
            <summary>
            Represents a excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size128.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size128.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16">
            <summary>
            Represents the icon on a square of 16x16 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.DefaultFileIcon">
            <summary>
            Represents a default file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.DefaultFileIcon.#ctor">
            <summary>
            Represents a default file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.ExcelIcon">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.ExcelIcon.#ctor">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.MusicIcon">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.MusicIcon.#ctor">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size16.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size16.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24">
            <summary>
            Represents the icon on a square of 24x24 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.DefaultFileIcon">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.DefaultFileIcon.#ctor">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.ExcelIcon">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.ExcelIcon.#ctor">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.MusicIcon">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.MusicIcon.#ctor">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size24.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size24.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32">
            <summary>
            Represents the icon on a square of 32x32 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.DefaultFileIcon">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.DefaultFileIcon.#ctor">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.ExcelIcon">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.ExcelIcon.#ctor">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.MusicIcon">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.MusicIcon.#ctor">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size32.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size32.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48">
            <summary>
            Represents the icon on a square of 48x48 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.DefaultFileIcon">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.DefaultFileIcon.#ctor">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.ExcelIcon">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.ExcelIcon.#ctor">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.MusicIcon">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.MusicIcon.#ctor">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size48.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size48.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72">
            <summary>
            Represents the icon on a square of 72x72 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.DefaultFileIcon">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.DefaultFileIcon.#ctor">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.ExcelIcon">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.ExcelIcon.#ctor">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.MusicIcon">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.MusicIcon.#ctor">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size72.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size72.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96">
            <summary>
            Represents the icon on a square of 96x96 pixels.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.ProgramIcon">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.ProgramIcon.#ctor">
            <summary>
            Represents a program icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.JsonIcon">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.JsonIcon.#ctor">
            <summary>
            Represents a json file icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.GiftIcon">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.GiftIcon.#ctor">
            <summary>
            Represents a gift icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.MultiSelectionIcon">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.MultiSelectionIcon.#ctor">
            <summary>
            Represents a multiselection icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.DefaultFileIcon">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.DefaultFileIcon.#ctor">
            <summary>
            Represents a default icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.PowerpointIcon">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.PowerpointIcon.#ctor">
            <summary>
            Represents a powerpoint icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.FolderIcon">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.FolderIcon.#ctor">
            <summary>
            Represents a folder icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.ExcelIcon">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.ExcelIcon.#ctor">
            <summary>
            Represents an excel icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.CSharpIcon">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.CSharpIcon.#ctor">
            <summary>
            Represents a csharp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.CppIcon">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.CppIcon.#ctor">
            <summary>
            Represents a cpp icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.CIcon">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.CIcon.#ctor">
            <summary>
            Represents a c icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.OutlookIcon">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.OutlookIcon.#ctor">
            <summary>
            Represents an outlook icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.OneNoteIcon">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.OneNoteIcon.#ctor">
            <summary>
            Represents an onenote icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.PdfIcon">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.PdfIcon.#ctor">
            <summary>
            Represents a pdf icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.ImageIcon">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.ImageIcon.#ctor">
            <summary>
            Represents an image icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.PowerBiIcon">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.PowerBiIcon.#ctor">
            <summary>
            Represents a powerbi icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.WordIcon">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.WordIcon.#ctor">
            <summary>
            Represents a word icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.MusicIcon">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.MusicIcon.#ctor">
            <summary>
            Represents a music icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileIcons.Size96.VideoIcon">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileIcons.Size96.VideoIcon.#ctor">
            <summary>
            Represents a video icon.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileListDataGridColumnLabels">
            <summary>
            Represents the labels for the DataGrid column inside the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileListDataGridColumnLabels.Default">
            <summary>
            Gets the default labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileListDataGridColumnLabels.French">
            <summary>
            Gets the french labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileListDataGridColumnLabels.Name">
            <summary>
            Gets or sets the label for the name column.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileListDataGridColumnLabels.Size">
            <summary>
            Gets or sets the label for the size column.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileListDataGridColumnLabels.CreatedDate">
            <summary>
            Gets or sets the label for the created date column. 
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManager`1">
            <summary>
            Represents the file manager.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManager`1._isBusy">
            <summary>
            Represents a value indicating if the file manager is busy.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManager`1._fluentCxPathBar">
            <summary>
            Represents the reference to the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar" />.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.FileNavigationViewVisible">
            <summary>
            Gets or sets a value indicating if the file navigation view is visible or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.IsIndeterminateProgress">
            <summary>
            Gets or sets a value indicating if the progess is indeterminate or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.ProgressPercent">
            <summary>
            Gets or sets the percentage of the progression.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.ProgressLabel">
            <summary>
            Gets or sets the label of the progress.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.IsMobile">
            <summary>
            Gets or sets a value indicating if the file manager runs on mobile or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.ItemTemplate">
            <summary>
            Gets or sets the template of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.SelectedItems">
            <summary>
            Gets or sets the selected items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.OnItemDoubleClick">
            <summary>
            Gets or sets the event callback when an item is double clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.ColumnLabels">
            <summary>
            Gets or sets the labels of the columns when the file manager renders the items as list or details.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.SelectedItemsChanged">
            <summary>
            Gets or sets the event callback when the selecteditems has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.Entry">
            <summary>
            Gets or sets the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.Download">
            <summary>
            Gets or sets the event callback when an item is downloaded.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.RootPath">
            <summary>
            Gets or sets the items of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar" />.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.Path">
            <summary>
            Gets or sets the path of the navigation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.OnPathChanged">
            <summary>
            Gets or sets the callback when a path changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManager`1.State">
            <summary>
            Gets or sets the state of the file manager.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.OnSelectedItemsChangedAsync">
            <summary>
            Occurs when the selected items has changed.
            </summary>
            <returns>Returns a task which contains the way to process the selecteditems propery when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.OnViewUpdated(System.Object,System.EventArgs)">
            <summary>
            Occurs when the view is updated.
            </summary>
            <param name="sender">Object which invokes the method.</param>
            <param name="e">Events args associated to this method.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.OnUpdated(System.Object,System.EventArgs)">
            <summary>
            Occurs when the state of the file manager is updated.
            </summary>
            <param name="sender">Object which invokes the method.</param>
            <param name="e">Events args associated to this method.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.SetEntry(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Sets the entry to render in the file manager.
            </summary>
            <param name="entry">Entry to set.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.OnItemDoubleTappedAsync(FluentUI.Blazor.Community.Components.FileManagerEntryEventArgs{`0})">
            <summary>
            Occurs when an item is double clicked.
            </summary>
            <param name="e">EventArgs which contains the item which was double clicked.</param>
            <returns>Returns a task which contains the way to process the double clicked item when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.Sort">
            <summary>
            Sort the current entry.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.SetBusy(System.Boolean)">
            <summary>
            Sets if the file manager is busy or not.
            </summary>
            <param name="isBusy">Value indicating if the file manager is busy or not.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.InvalidatePathBarItemSize(System.String)">
            <summary>
            Invalidate the size of a specific item in the path bar.
            </summary>
            <param name="id">Identifier of the item</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManager`1.ClearPathBar(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Clears the items of the path bar.
            </summary>
            <param name="value">All segments to remove.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerBase`1">
            <summary>
            Represents the base for the file manager.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.Parent">
            <summary>
            Gets or sets the parent of this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.Entry">
            <summary>
            Gets or sets the entry to view.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.SelectedItems">
            <summary>
            Gets or sets the selected items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.SelectedItemsChanged">
            <summary>
            Gets or sets an event callback which occurs when the <see cref="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.SelectedItems"/> changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnItemTapped">
            <summary>
            Gets or sets an event callback which occurs when an item is tapped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnItemDoubleTapped">
            <summary>
            Gets or sets an event callback which occurs when an item is double tapped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.IsMobile">
            <summary>
            Gets or sets a value indicating if the filemanager runs on mobile.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.IsBusy">
            <summary>
            Gets or sets a value indicating if the filemanager is busy or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.IsIndeterminateProgress">
            <summary>
            Gets or sets a value indicating if the progess is indeterminate or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.ProgressPercent">
            <summary>
            Gets or sets the percentage of the progression.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.ProgressLabel">
            <summary>
            Gets or sets the label of the progress.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.ColumnLabels">
            <summary>
            Gets or sets the labels of the columns when the file manager renders the items as list or details.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnSelectedItemsChangedAsync">
            <summary>
            Occurs when the <see cref="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.SelectedItems"/> has changed.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.SelectedItemsChanged"/> event callback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnItemDoubleTappedAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Occurs when an item is double clicked.
            </summary>
            <param name="entry">Represents the clicked entry.</param>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnItemDoubleTapped"/> event callback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnItemTappedAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Occurs when an item is double clicked.
            </summary>
            <param name="entry">Represents the clicked entry.</param>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnItemTapped"/> event callback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.GetIconFromFile(System.String)">
            <summary>
            Gets the icon from an extension.
            </summary>
            <param name="extension">Extension of the file.</param>
            <returns>Returns the icons to render.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.GetIconFromExtensionAndGridViewOptions(System.String,FluentUI.Blazor.Community.Components.FileView)">
            <summary>
            Gets the icon from an extension and the current used view.
            </summary>
            <param name="extension">Extension of the file.</param>
            <param name="options">Current used view.</param>
            <returns>Returns the icons to render.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.GetFolderIconFromGridViewOptions(FluentUI.Blazor.Community.Components.FileView)">
            <summary>
            Gets the folder icon from the current used view.
            </summary>
            <param name="options">Current used view.</param>
            <returns>Returns the icons to render.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerBase`1.OnRenameAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Occurs when a rename operation is performed.
            </summary>
            <param name="entry">Entry to rename.</param>
            <returns>Returns a task which contains the rename process when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerContent">
            <summary>
            Represents the content of an item of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
            <param name="Label">Label of the content.</param>
            <param name="Placeholder">Placeholder of the content.</param>
            <param name="Name">Name of the file or folder.</param>
            <param name="IsDirectory">Value indicating if the item is a directory.</param>
            <param name="IsRenaming">Value indicating if the item will be renamed.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerContent.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Represents the content of an item of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
            <param name="Label">Label of the content.</param>
            <param name="Placeholder">Placeholder of the content.</param>
            <param name="Name">Name of the file or folder.</param>
            <param name="IsDirectory">Value indicating if the item is a directory.</param>
            <param name="IsRenaming">Value indicating if the item will be renamed.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerContent.Label">
            <summary>Label of the content.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerContent.Placeholder">
            <summary>Placeholder of the content.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerContent.IsDirectory">
            <summary>Value indicating if the item is a directory.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerContent.IsRenaming">
            <summary>Value indicating if the item will be renamed.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerContent.Name">
            <summary>
            Gets or sets the name of the file or the folder.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerDetailsDialogContent`1">
            <summary>
            Represents the content for the FileManagerDetailsDialog.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="FileExtensionTypeLabels">Labels for the files.</param>
            <param name="Entries">Represents the selected entries.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerDetailsDialogContent`1.#ctor(FluentUI.Blazor.Community.Components.FileExtensionTypeLabels,System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Represents the content for the FileManagerDetailsDialog.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="FileExtensionTypeLabels">Labels for the files.</param>
            <param name="Entries">Represents the selected entries.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsDialogContent`1.FileExtensionTypeLabels">
            <summary>Labels for the files.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsDialogContent`1.Entries">
            <summary>Represents the selected entries.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels">
            <summary>
            Represents the labels used by the <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.Default">
            <summary>
            Gets the default labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.French">
            <summary>
            Gets the french labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.ElementPlural">
            <summary>
            Gets or sets the plural label for elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.ElementSingular">
            <summary>
            Gets or sets the singular label for element.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.NoEntryFoundDescription">
            <summary>
            Gets or sets the label when no entry was found.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.SelectSingleFileToGetMoreInformation">
            <summary>
            Gets or sets the label when multiple files are selected.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.Size">
            <summary>
            Gets or sets the label for size.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.Type">
            <summary>
            Gets or sets the label for type.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.ContentType">
            <summary>
            Gets or sets the label for content type.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.ModifiedDate">
            <summary>
            Gets or sets the label for modified date.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.CreatedDate">
            <summary>
            Gets or sets the label for created date.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.DateFormat">
            <summary>
            Gets or sets the format of the date.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.SelectedElements">
            <summary>
            Gets or sets the label for selected elements.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerDetailsLabels.Details">
            <summary>
            Gets or sets the label for details.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerEntriesMovedEventArgs`1">
            <summary>
            Represents the event args for entries which are moved from one place to another.
            </summary>
            <typeparam name="TItem">Type of the folder.</typeparam>
            <param name="DestinationFolder">Represents the destination folder where the entries moved.</param>
            <param name="MovedEntries">Represents the entries that have been moved.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntriesMovedEventArgs`1.#ctor(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Represents the event args for entries which are moved from one place to another.
            </summary>
            <typeparam name="TItem">Type of the folder.</typeparam>
            <param name="DestinationFolder">Represents the destination folder where the entries moved.</param>
            <param name="MovedEntries">Represents the entries that have been moved.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntriesMovedEventArgs`1.DestinationFolder">
            <summary>Represents the destination folder where the entries moved.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntriesMovedEventArgs`1.MovedEntries">
            <summary>Represents the entries that have been moved.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1">
            <summary>
            Represents an entry for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> component.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntry`1._files">
            <summary>
            Represents the files inside the current instance.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntry`1._directories">
            <summary>
            Represents the directories inside the current instance.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntry`1._fileExtensionContentTypeProvider">
            <summary>
            Gets the provider of content type from a file extension.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntry`1._merged">
            <summary>
            Represents the list of files and directories of the current instance.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.#ctor">
            <summary>
            Prevents the creation of an instance of the class <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1"/>.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.#ctor(`0,System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Boolean,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Prevents the creation of an instance of the class <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1"/>.
            </summary>
            <param name="itemData">Represents the data inside the current instance.</param>
            <param name="dataBytesAsyncFunc">Represents the function to get the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="isDirectory">Value indicating if the entry is a directory or a file.</param>
            <param name="size">Size of the entry.</param>
            <param name="createdDate">Creation date of the item of the entry.</param>
            <param name="modifiedDate">Modification date of the item of the entry.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.#ctor(`0,System.Byte[],System.String,System.Boolean,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Prevents the creation of an instance of the class <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1"/>.
            </summary>
            <param name="itemData">Represents the data inside the current instance.</param>
            <param name="dataBytes">Represents the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="isDirectory">Value indicating if the entry is a directory or a file.</param>
            <param name="size">Size of the entry.</param>
            <param name="createdDate">Creation date of the item of the entry.</param>
            <param name="modifiedDate">Modification date of the item of the entry.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Home">
            <summary>
            Gets the home entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Parent">
            <summary>
            Gets the parent of this entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.TotalEntriesCount">
            <summary>
            Gets the total number of entries.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.DataBytesAsyncFunc">
            <summary>
            Gets the function which retrieves the raw data of the entry asynchronously.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.DataBytes">
            <summary>
            Gets the data of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Size">
            <summary>
            Gets the size of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Data">
            <summary>
            Gets the data instance of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreatedDate">
            <summary>
            Gets the creation date of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.ModifiedDate">
            <summary>
            Gets the modified date of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.ContentType">
            <summary>
            Gets the content type of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Name">
            <summary>
            Gets the name of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.NameWithoutExtension">
            <summary>
            Gets the name of the file without its extension.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Count">
            <summary>
            Gets or sets the number of file which contains the same name.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.HasExtension">
            <summary>
            Gets a value indicating if the entry has an extension.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Extension">
            <summary>
            Gets the extension of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.IsDirectory">
            <summary>
            Gets a value indicating if the entry is a directory or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.HasDirectory">
            <summary>
            Gets a value indicating if the entry has directories.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.HasFiles">
            <summary>
            Gets a value indicating if the entry has files.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Id">
            <summary>
            Gets or sets the identifier of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntry`1.RelativePath">
            <summary>
            Gets the relative path of the entry.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetContentType">
            <summary>
            Gets the content type of the entry.
            </summary>
            <returns>Returns the content type of the entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetMerged">
            <summary>
            Gets the merged list of entries inside the current entry.
            </summary>
            <returns>Returns the merged entries.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.RemoveEntry(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Remove the <paramref name="entry"/> from specified <paramref name="root"/>;
            </summary>
            <param name="root">Root where the entry to remove is.</param>
            <param name="entry">Entry to remove.</param>
            <returns>Returns <see langword="true"/> if the entry was successfully removed, <see langword="false" /> sinon.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDirectory(System.DateTime,System.DateTime,System.String,System.Int64)">
            <summary>
            Creates a directory inside the current entry.
            </summary>
            <param name="creationDate">Date of creation of the directory.</param>
            <param name="modificationDate">Modification date of the directory.</param>
            <param name="directoryName">Name of the directory.</param>
            <param name="size">Size of the directory.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDirectory(System.String)">
            <summary>
            Creates a directory inside the current entry.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateHomeDirectory">
            <summary>
            Creates the home directory. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.op_Equality(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Check if <paramref name="x"/> is equal to <paramref name="y"/>.
            </summary>
            <param name="x">Left entry to compare with.</param>
            <param name="y">Right entry to compare with.</param>
            <returns>Returns <see langword="true"/> if the entries are equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.op_Inequality(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Check if <paramref name="x"/> is inequal to <paramref name="y"/>.
            </summary>
            <param name="x">Left entry to compare with.</param>
            <param name="y">Right entry to compare with.</param>
            <returns>Returns <see langword="true"/> if the entries are not equal, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Equals(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetHashCode(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetBytesAsync">
            <summary>
            Gets the raw data of the entry in an asynchronous way.
            </summary>
            <returns>Returns the raw data of the entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.SetName(System.String)">
            <summary>
            Sets the name of the entry.
            </summary>
            <param name="newName">Name of the entry.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Add(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Adds an entry in the current instance.
            </summary>
            <param name="entry">Entry to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.AddRange(FluentUI.Blazor.Community.Components.FileManagerEntry{`0}[])">
            <summary>
            Adds a range of entries in the current instance.
            </summary>
            <param name="entries">Entries to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Clear">
            <summary>
            Clears the current entry.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetDirectories">
            <summary>
            Gets the directories of the current entry.
            </summary>
            <returns>Returns the directories of the current entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.GetFiles">
            <summary>
            Gets the files of the current entry.
            </summary>
            <returns>Returns the files of the current entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Remove(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Removes the entry from the current entry.
            </summary>
            <param name="entry">Entry to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Remove(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Removes all specified entries from the current entry.
            </summary>
            <param name="entries">Entries to removed.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.InvalidateMerge">
            <summary>
            Invalidate the merged entries.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Enumerate">
            <summary>
            Enumerates all the entries in the current entries.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Sort(FluentUI.Blazor.Community.Components.FileSortMode,FluentUI.Blazor.Community.Components.FileSortBy)">
            <summary>
            Sorts the entries.
            </summary>
            <param name="sortBy">Type of sort.</param>
            <param name="sortMode">Ascending or descending sort.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Find(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.String)">
            <summary>
            Finds the entry specified <paramref name="id"/> by starting from <paramref name="root"/>.
            </summary>
            <param name="root">Entry to use as a search entry.</param>
            <param name="id">Identifier to find.</param>
            <returns>Returns the entry if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Find(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Func{FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Boolean})">
            <summary>
            Finds an entry from the <paramref name="root"/>.
            </summary>
            <param name="root">Entry to use as a search entry.</param>
            <param name="predicate">Predicate to apply to find the entry.</param>
            <returns>Returns the entry if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Find(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}},System.String)">
            <summary>
            Finds the entry specified with <paramref name="id"/> inside the specified <paramref name="items"/>.
            </summary>
            <param name="items">List of items where the search begins.</param>
            <param name="id">Identifier of the entry to find.</param>
            <returns>Returns the entry if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.Find(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}},System.Func{FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Boolean})">
            <summary>
            Finds an entry from the <paramref name="items"/>.
            </summary>
            <param name="items">List of entries to use.</param>
            <param name="predicate">Predicate to apply to find the entry.</param>
            <returns>Returns the entry if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.FindByName(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.String)">
            <summary>
            Finds an entry from its name.
            </summary>
            <param name="entry">Entry to use as search entry.</param>
            <param name="name">Name of the entry.</param>
            <returns>Returns the entry if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDefaultFileEntry(System.Byte[],System.String,System.Int32)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="data">Data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDefaultFileEntry(System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Int64)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDefaultFileEntry(System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <param name="creationDate">Date of the creation of the entry.</param>
            <param name="lastModificationDate">Date of the last modification of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDefaultFileEntryWithData(`0,System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="data">Instance of the item.</param>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <param name="creationDate">Date of the creation of the entry.</param>
            <param name="lastModificationDate">Date of the last modification of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateDefaultFileEntryWithData(`0,System.Byte[],System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="data">Instance of the item.</param>
            <param name="value">Raw data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <param name="creationDate">Date of the creation of the entry.</param>
            <param name="lastModificationDate">Date of the last modification of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateEntryWithData(`0,System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="data">Instance of the item.</param>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <param name="creationDate">Date of the creation of the entry.</param>
            <param name="lastModificationDate">Date of the last modification of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateEntryWithData(`0,System.Byte[],System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="data">Instance of the item.</param>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <param name="creationDate">Date of the creation of the entry.</param>
            <param name="lastModificationDate">Date of the last modification of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateEntry(System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <param name="creationDate">Date of the creation of the entry.</param>
            <param name="lastModificationDate">Date of the last modification of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateEntry(System.Func{System.Threading.Tasks.Task{System.Byte[]}},System.String,System.Int64)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="value">Function to retrieve the data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.CreateEntry(System.Byte[],System.String,System.Int64)">
            <summary>
            Creates a default file entry.
            </summary>
            <param name="value">Raw data of the entry.</param>
            <param name="name">Name of the entry.</param>
            <param name="length">Size of the entry.</param>
            <returns>Returns the newly created entry.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntry`1.InvalidateSize">
            <summary>
            Invalidates the size of the entry.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryComparer`1.Compare(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1">
            <summary>
            Represents the details view for a selected entry.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1._entryDataContent">
            <summary>
            Represents the raw data of the entry.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1._fileContentTypeProvider">
            <summary>
            Represents the provider for the content type from a file extension.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1._fileExtensionTypeProvider">
            <summary>
            Represents the provider for the file extension.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1._isImage">
            <summary>
            Represents a value indicating if the entry is an image.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1._contentType">
            <summary>
            Represents the content type of the entry.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.Entries">
            <summary>
            Gets ors sets the selected entries.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.EmptyContent">
            <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> to use when the content is empty.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.DetailsLabel">
            <summary>
            Gets or sets the labels to use for the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.FileExtensionTypeLabels">
            <summary>
            Gets or sets the labels to describe the file extension.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.GetEntryDataContentAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Gets the data of the entry in an asynchronous way.
            </summary>
            <param name="entry">Entry which contains the data to get.</param>
            <returns>Returns a task which get the data of the entry when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.GetBase64Content(System.Byte[],System.String)">
            <summary>
            Gets the data of the entry in base64 format.
            </summary>
            <param name="data">Data to convert.</param>
            <param name="contentType">Type of the content.</param>
            <returns>Returns the data content type as a <see cref="T:System.String" /> in base64 format.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryDetails`1.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerEntryEventArgs`1">
            <summary>
            Represents the event args for a <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="Entry">Represents the entry to use</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryEventArgs`1.#ctor(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Represents the event args for a <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="Entry">Represents the entry to use</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryEventArgs`1.Entry">
            <summary>Represents the entry to use</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs`1">
            <summary>
            Represents the event args when an entry is created.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="Parent">Entry which contains the <paramref name="Entry"/>.</param>
            <param name="Entry">Represents the created entry.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs`1.#ctor(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Represents the event args when an entry is created.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="Parent">Entry which contains the <paramref name="Entry"/>.</param>
            <param name="Entry">Represents the created entry.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs`1.Parent">
            <summary>Entry which contains the <paramref name="Entry"/>.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs`1.Entry">
            <summary>Represents the created entry.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DeleteFileManagerEntryEventArgs`1">
            <summary>
            Represents the event args when some entries are deleted.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="Parent">Entry which contains the <paramref name="Entries"/> to delete.</param>
            <param name="Entries">Represents the entries to delete.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DeleteFileManagerEntryEventArgs`1.#ctor(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Represents the event args when some entries are deleted.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="Parent">Entry which contains the <paramref name="Entries"/> to delete.</param>
            <param name="Entries">Represents the entries to delete.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeleteFileManagerEntryEventArgs`1.Parent">
            <summary>Entry which contains the <paramref name="Entries"/> to delete.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DeleteFileManagerEntryEventArgs`1.Entries">
            <summary>Represents the entries to delete.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerEntryMenuItemDescription`1">
            <summary>
            Represents the description of a menu item.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryMenuItemDescription`1.OnClick">
            <summary>
            Gets or sets the function to execute when the item is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryMenuItemDescription`1.Icon">
            <summary>
            Gets or sets the icon of the menu.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryMenuItemDescription`1.Label">
            <summary>
            Gets or sets the label of the menu.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerEntryTreeViewItemComparer">
            <summary>
            Represents a comparer for the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.ITreeViewItem"/> for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerEntryTreeViewItemComparer.Default">
            <summary>
            Gets the default comparer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerEntryTreeViewItemComparer.Compare(Microsoft.FluentUI.AspNetCore.Components.ITreeViewItem,Microsoft.FluentUI.AspNetCore.Components.ITreeViewItem)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerGrid`1">
            <summary>
            Represents the grid of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerGrid`1.ItemTemplate">
            <summary>
            Gets or sets the template of the items in the grid.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerGrid`1.GetRowHeightFromGridViewOptions">
            <summary>
            Gets the height of the row from the <see cref="T:FluentUI.Blazor.Community.Components.FileView"/> value.
            </summary>
            <returns>Returns the height of the row.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerGrid`1.GetColumnWidthFromGridViewOptions">
            <summary>
            Gets the width of the column from the <see cref="T:FluentUI.Blazor.Community.Components.FileView"/> value.
            </summary>
            <returns>Returns the width of the column.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerGrid`1.GetIconSizeFromGridViewOptions">
            <summary>
            Gets the size of the icon from the <see cref="T:FluentUI.Blazor.Community.Components.FileView"/> value.
            </summary>
            <returns>Returns the size of the icons.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerGrid`1.GetMaxWidthFromGridViewOptions">
            <summary>
            Gets the max width of the text from the <see cref="T:FluentUI.Blazor.Community.Components.FileView"/> value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerGrid`1.OnCheckedItemChangedAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Boolean)">
            <summary>
            Occurs when an item is selected or unselected.
            </summary>
            <param name="entry">Entry on which occurs the selection.</param>
            <param name="isSelected">Value indicating if the entry is selected or unselected.</param>
            <returns>A task which contains the selecteditems when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerLabels">
            <summary>
            Represents the labels used by the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.Default">
            <summary>
            Gets the default labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.French">
            <summary>
            Gets the french labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DialogCloseLabel">
            <summary>
            Gets or sets the label for the close button in a dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ShowDetailsLabel">
            <summary>
            Gets or sets the label for the show details button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SearchPlaceholder">
            <summary>
            Gets or sets the placeholder label for the search text box.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.NewFolderLabel">
            <summary>
            Gets or sets the label for the new folder button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.UploadLabel">
            <summary>
            Gets or sets the label for the upload button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SortByNameLabel">
            <summary>
            Gets or sets the label for the sort by name menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SortByExtensionLabel">
            <summary>
            Gets or sets the label for the sort by extension menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SortBySizeLabel">
            <summary>
            Gets or sets the label for the sort by size menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SortByCreationDate">
            <summary>
            Gets or sets the label for the sort by created date menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SortByModifiedDate">
            <summary>
            Gets or sets the label for the sort by modified date menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DeleteLabel">
            <summary>
            Gets or sets the label for the sort by delete menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DownloadLabel">
            <summary>
            Gets or sets the label for the download button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.RenameLabel">
            <summary>
            Gets or sets the label for the rename button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.SortLabel">
            <summary>
            Gets or sets the label for the sort button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ViewLabel">
            <summary>
            Gets or sets the label for the view button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ListViewLabel">
            <summary>
            Gets or sets the label for the list menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.AscendingLabel">
            <summary>
            Gets or sets the label for the ascending menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DescendingLabel">
            <summary>
            Gets or sets the label for the descending menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.FolderDialogTitle">
            <summary>
            Gets or sets the title for the new folder dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.RenameFolderDialogTitle">
            <summary>
            Gets or sets the title for the rename folder dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.RenameFileDialogTitle">
            <summary>
            Gets or sets the title for the rename file dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.FolderLabel">
            <summary>
            Gets or sets the label for the folder name.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.FolderPlaceholder">
            <summary>
            Gets or sets the placeholder label for the folder name.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.FileLabel">
            <summary>
            Gets or sets the label for the file name.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.FilePlaceholder">
            <summary>
            Gets or sets the placeholder label for the file name.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DeleteDescriptionLabel">
            <summary>
            Gets or sets the description for the delete confirmation dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DialogYesLabel">
            <summary>
            Gets or sets the label for the yes button in a dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DialogNoLabel">
            <summary>
            Gets or sets the label for the no button in a dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DialogOkLabel">
            <summary>
            Gets or sets the label for the OK button in a dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DialogCancelLabel">
            <summary>
            Gets or sets the label for the cancel button in a dialog.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DeleteTitle">
            <summary>
            Gets or sets the delete dialog title.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.UploadingLabel">
            <summary>
            Gets or sets the label for an uploading process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DownloadingLabel">
            <summary>
            Gets or sets the label for a download process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.DeletingLabel">
            <summary>
            Gets or sets the label for a delete process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.MovingLabel">
            <summary>
            Gets or sets the label for a move process.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.PropertiesLabel">
            <summary>
            Gets or sets the label for the properties button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.HierarchicalLabel">
            <summary>
            Gets or sets the label for the hierarchical menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.FlatLabel">
            <summary>
            Gets or sets the label for the flat menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ExceededFileCountMessage">
            <summary>
            Gets or sets the message when the number of files exceeded the maximum allowed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ExceededFileCountTitle">
            <summary>
            Gets or sets the title when the number of files exceeded the maximum allowed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.MoveToLabel">
            <summary>
            Gets or sets the label for the move button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ViewOptionsLabel">
            <summary>
            Gets or sets the label for the options button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.ListWithDetailsLabel">
            <summary>
            Gets or sets the label for the details menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.GridViewMosaicLabel">
            <summary>
            Gets or sets the label for the mosaic menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.GridViewSmallIconsLabel">
            <summary>
            Gets or sets the label for the small icons menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.GridViewMediumIconsLabel">
            <summary>
            Gets or sets the label for the medium menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.GridViewLargeIconsLabel">
            <summary>
            Gets or sets the label for the large icons menu item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerLabels.GridViewVeryLargeIconsLabel">
            <summary>
            Gets or sets the label for the very large icons menu item.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerList`1">
            <summary>
            Represents the list view for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerList`1.InternalStyle">
            <summary>
            Gets the style of the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerList`1.OnRowDoubleClickAsync(Microsoft.FluentUI.AspNetCore.Components.FluentDataGridRow{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Occurs when the row is double clicked.
            </summary>
            <param name="e">Event args associated to the clicked row.</param>
            <returns>Returns a task which perform the double click when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileManagerList`1.GetStyle">
            <summary>
            Gets the style of the list.
            </summary>
            <returns>Returns the style of the list.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerState">
            <summary>
            Represents the state of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerState._sortBy">
            <summary>
            Represents the way the files are sorted by.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerState._sortMode">
            <summary>
            Represents the ascending or descending sort.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerState._view">
            <summary>
            Represents the current view of the file manager.
            </summary>
        </member>
        <member name="E:FluentUI.Blazor.Community.Components.FileManagerState.OnSortUpdated">
            <summary>
            Gets or sets the event to raise when the sort is updated.
            </summary>
        </member>
        <member name="E:FluentUI.Blazor.Community.Components.FileManagerState.OnViewUpdated">
            <summary>
            Gets or sets the event to raise when the view is updated.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerState.SortBy">
            <summary>
            Gets or sets the way the files are sorted.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerState.SortMode">
            <summary>
            Gets the sorted mode of the files (ascending or descending).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileManagerState.View">
            <summary>
            Gets the view of the file manager.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileManagerView">
            <summary>
            Represents the available view for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerView.Desktop">
            <summary>
            The <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> is rendered in desktop mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileManagerView.Mobile">
            <summary>
            The <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> is rendered in mobile mode.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileMoverDialog`1">
            <summary>
            Represents the file mover dialog.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileMoverDialog`1._currentSelectedItem">
            <summary>
            Represents the selected item in the tree.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileMoverDialog`1._items">
            <summary>
            Represents the tree.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileMoverDialog`1.IconCollapsed">
            <summary>
            Represents the collapsed node icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileMoverDialog`1.IconExpanded">
            <summary>
            Represents the expanded node icon.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileMoverDialog`1.Dialog">
            <summary>
            Gets or sets the dialog that this content belongs to.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FileMoverDialog`1.Content">
            <summary>
            Gets or sets the content of the dialog.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileMoverDialog`1.OnCancelAsync">
            <summary>
            Occurs when the dialog is cancelled.
            </summary>
            <returns>Returns a task which cancels the dialog when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileMoverDialog`1.OnCloseAsync">
            <summary>
            Occurs when the dialog is closed.
            </summary>
            <returns>Returns a task which close the dialog when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileMoverDialog`1.BuildTreeView">
            <summary>
            Build the treeview from the <see cref="P:FluentUI.Blazor.Community.Components.FileMoverDialog`1.Content"/> root.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileMoverDialog`1.BuildTreeViewItem(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Boolean)">
            <summary>
            Build the treeviewitem from the <paramref name="entry"/> node.
            </summary>
            <param name="entry">Entry to build as a treeview item.</param>
            <param name="isExpanded">Value indicating if the node is expanded or not.</param>
            <returns>Returns a <see cref="T:Microsoft.FluentUI.AspNetCore.Components.TreeViewItem"/> which represents the <paramref name="entry"/> node.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileMoverDialog`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileSortBy">
            <summary>
            Represents the way to sort the files.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortBy.Name">
            <summary>
            Sort the file by its name.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortBy.Extension">
            <summary>
            Sort the file by its extension.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortBy.Size">
            <summary>
            Sort the file by its size.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortBy.CreatedDate">
            <summary>
            Sort the file by its creation date.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortBy.ModifiedDate">
            <summary>
            Sort the file by its modification date.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileSortMode">
            <summary>
            Represents the sort mode of the files.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortMode.Ascending">
            <summary>
            The files are sorted in ascending order according to its key. 
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileSortMode.Descending">
            <summary>
            The files are sorted in descending order according to its key.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileStructureView">
            <summary>
            Represents the view of the file structure.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileStructureView.Hierarchical">
            <summary>
            The structure is rendered in a hierarchical way.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileStructureView.Flat">
            <summary>
            The structure is rendered in a flat way.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileView">
            <summary>
            Represents the available views for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.List">
            <summary>
            The items are rendered in a list.
            </summary>
            <remarks>Only the name of the file is rendered.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.Details">
            <summary>
            The items are rendered in a list.
            </summary>
            <remarks>Each item is rendered with : Name, Size, Creation date information.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.Mosaic">
            <summary>
            The items are rendered in a mosaic view.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.SmallIcons">
            <summary>
            The items are rendered in a small icons view.
            </summary>
            <remarks>The icons are in 24x24 format</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.MediumIcons">
            <summary>
            The items are rendered in a medium icons view.
            </summary>
            <remarks>The icons are in 72x72 format</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.LargeIcons">
            <summary>
            The items are rendered in a large icons view.
            </summary>
            <remarks>The icons are in 96x96 format</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FileView.VeryLargeIcons">
            <summary>
            The items are rendered in a very large icons view.
            </summary>
            <remarks>The icons are in 128x128 format</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FileZipper">
            <summary>
            Represents a file zipper.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileZipper.GetFileDataAsync(System.String)">
            <summary>
            Gets an array of <see cref="T:System.Byte"/> which represents the data of a file in an asynchronous way.
            </summary>
            <param name="path">The file to open to get the data.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1"/> which contains the array of byte of the file.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileZipper.ZipInternalAsync``1(System.String,System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{``0}})">
            <summary>
            Zip a collection of files.
            </summary>
            <typeparam name="TItem">Type of the image.</typeparam>
            <param name="folder">Destination folder where we transfert the files.</param>
            <param name="entries">Entries to zip.</param>
            <returns>Returns a task which zip the entries.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FileZipper.ZipAsync``1(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{``0}})">
            <summary>
            Zip the entries in an asynchronous way.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <param name="entries">Entries to zip.</param>
            <returns>Returns a <see cref="T:System.Threading.Tasks.Task`1" /> which contains a <see cref="T:FluentUI.Blazor.Community.Components.FileManagerEntry`1"/>
             which contains the zipped file.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1">
            <summary>
            Represents a fluent file manager.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressState">
            <summary>
            Represents the progress state to display the good label.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressState.None">
            <summary>
            No progress.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressState.Uploading">
            <summary>
            Uploading a file.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressState.Downloading">
            <summary>
            Downloading a file.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressState.Deleting">
            <summary>
            Deleting a file.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressState.Moving">
            <summary>
            Moving a file.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._showDetails">
            <summary>
            Represents a value indicating if the details of an entry is shown.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._hasRootChanged">
            <summary>
            Represents a value indicating if the root has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._forceMobileView">
            <summary>
            Represents a value indicating if the mobile view is forced.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._fileManagerView">
            <summary>
            Represents the file manager component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._currentEntry">
            <summary>
            Represents the current selected entry.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._treeViewItems">
            <summary>
            Represents the tree view (only shown in Desktop mode)
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IconCollapsed">
            <summary>
            Represents the collapsed node icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IconExpanded">
            <summary>
            Represents the expanded node icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._currentTreeViewItem">
            <summary>
            Represents the current treeview item.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._currentSelectedItems">
            <summary>
            Represents the selected items.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._searchValue">
            <summary>
            Represents the value to search inside the current node.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._searchEntry">
            <summary>
            Represents the entry which contains all the found entries during a search operation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._progressState">
            <summary>
            Represents the current state of a progress.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._isDisabled">
            <summary>
            Represents a value indicating if the component is disabled or not.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._fileBufferDictionary">
            <summary>
            Represents the buffer dictionary of all files currenlty uploading.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._rootPath">
            <summary>
            Represents the list of all navigation items.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._flattenEntry">
            <summary>
            Represents the flatten entry.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._module">
            <summary>
            Represents the javascript module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.JavascriptFilename">
            <summary>
            Represents the javascript filename to use for interop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._contentTypeProvider">
            <summary>
            Represents the provider to get the content type from a file extension.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._path">
            <summary>
            Represents the path for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar"/> component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFileManager`1._renderLabel">
            <summary>
            Represents the render fragment to use for the label of a button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.State">
            <summary>
            Gets or sets the state of the file manager.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.JSRuntime">
            <summary>
            Gets or sets the javascript runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.DialogService">
            <summary>
            Gets or sets the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.IDialogService"/> instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.Width">
            <summary>
            Gets or sets the width of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.Height">
            <summary>
            Gets or sets the height of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ShowCreateFolderButton">
            <summary>
            Gets or sets a value indicating if the create folder button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ShowUploadButton">
            <summary>
            Gets or sets a value indicating if the upload button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ShowViewButton">
            <summary>
            Gets or sets a value indicating if the view button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ShowSortButton">
            <summary>
            Gets or sets a value indicating if the sort button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ShowPropertiesButton">
            <summary>
            Gets or sets a value indicating if the properties button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ShowDetailsButton">
            <summary>
            Gets or sets a value indicating if the details button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.FileManagerLabels">
            <summary>
            Gets or sets the labels to use for the text of the UI.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.DetailsLabels">
            <summary>
            Gets or sets the labels to use for the details panel.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.FileExtensionTypeLabels">
            <summary>
            Gets or sets the labels to use for the file from its extension.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ColumnLabels">
            <summary>
            Gets or sets the labels to use for the list view.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ProgressPercent">
            <summary>
            Gets or sets the percentage of the progression.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IsBusy">
            <summary>
            Gets or sets a value indicating if the manager is busy or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.View">
            <summary>
            Gets or sets the view of the file manager.
            </summary>
            <remarks>
            By default, the view is desktop.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.Root">
            <summary>
            Gets or sets the root of the file manager.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.Accept">
            <summary>
            Gets or sets the allowed files to be uploaded.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.AcceptFiles">
            <summary>
            Gets or sets the allowed files to be uploaded in an enum way.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.MaximumFileCount">
            <summary>
            Gets or sets the maximum file count that can be uploaded in one time.
            </summary>
            <remarks>Default is 100.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.MaximumFileSize">
            <summary>
            Gets or sets the maximum file size.
            </summary>
            <remarks>Default is 100 MiB</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.BufferSize">
            <summary>
            Gets or sets the size of the buffer.
            </summary>
            <remarks>Default is 10 KiB</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFolderCreated">
            <summary>
            Gets or sets the callback to use when a folder is created.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnRename">
            <summary>
            Gets or sets the callback to use when a file or a folder is renamed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnDelete">
            <summary>
            Gets or sets the callback to use when a file or a folder is deleted.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFileUploaded">
            <summary>
            Gets or sets the callback to use when a file is uploaded.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.ToolbarItems">
            <summary>
            Gets or sets extra buttons on the toolbar.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.FileStructureView">
            <summary>
            Gets or sets the view of the file structure.
            </summary>
            <remarks>Default is <see cref="F:FluentUI.Blazor.Community.Components.FileStructureView.Hierarchical"/>.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.Moved">
            <summary>
            Gets or sets the callback to use when a file or a folder is moved.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.SmartphoneSwitchViewWidth">
            <summary>
            Gets or sets the width of the component when the view is switched to smartphone.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.SmartphoneSwitchViewWidthQuery">
            <summary>
            Gets the smartphone switch view width query.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.AcceptFilter">
            <summary>
            Gets the accept filter to use for the upload input.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.SelectedItems">
            <summary>
            Gets the selected items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IsRenameButtonDisabled">
            <summary>
            Gets a value indicating if the rename button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IsDownloadButtonDisabled">
            <summary>
            Gets a value indicating if the download button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IsDeleteButtonDisabled">
            <summary>
            Gets a value indicating if the delete button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.IsMoveToButtonDisabled">
            <summary>
            Gets a value indicating if the move button is disabled.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.GetEntry">
            <summary>
            Gets the current entry to use depending of the view.
            </summary>
            <returns>Returns the entry to use depending of the view.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnMoveAsync">
            <summary>
            Occurs when the user wants to move a file or a folder into an another folder.
            </summary>
            <returns>Returns a task which moves the file or the folder into the selected folder when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFileCountExceededAsync(System.Int32)">
            <summary>
            Shows an error message when the user selects a too big number of files.
            </summary>
            <param name="maximumFileCount">Maximum number of files the user can take in one upload.</param>
            <returns>Returns a task that show an error dialog message when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.BuildFlatView">
            <summary>
            Build the flat entry.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.BuildFlatViewItem(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Build a flat item.
            </summary>
            <param name="entry">Entry to use to append the <paramref name="item"/>.</param>
            <param name="item">Item to add in the entry.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnChangeSort(FluentUI.Blazor.Community.Components.FileSortBy)">
            <summary>
            Change the sort of the view.
            </summary>
            <param name="sortBy">Sort to use.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnChangeView(FluentUI.Blazor.Community.Components.FileView)">
            <summary>
            Change the view of the file manager.
            </summary>
            <param name="view">View to use.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnSortAscending">
            <summary>
            Sort the entries in ascending order.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnSortDescending">
            <summary>
            Sort the entries in descending order.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFolderCreatedAsync(FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs{`0})">
            <summary>
            Occurs when a folder is created in asynchronous way.
            </summary>
            <param name="e">Event args for the created folder.</param>
            <returns>Returns a task which raised the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFolderCreated"/> event callback when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.UpdateTreeView(FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs{`0})">
            <summary>
            Updates the tree view when a folder is created.
            </summary>
            <param name="e">Event args of the created folder.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.UpdatePathBar(FluentUI.Blazor.Community.Components.CreateFileManagerEntryEventArgs{`0})">
            <summary>
            Updates the path bar when a folder is created.
            </summary>
            <param name="e">Event args of the created folder.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnShowDetailsAsync">
            <summary>
            Occurs when the user clicks on the show details button.
            </summary>
            <returns>Returns a task which show the details of the current selected entries.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnRenameAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Occurs when the user clicks on the rename button.
            </summary>
            <param name="entry">Entry to rename.</param>
            <returns>Returns a task which rename the entry when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.BuildPathRoot">
            <summary>
            Build the complete path root for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnPathChanged(System.String)">
            <summary>
            Occurs when the path is changed.
            </summary>
            <param name="path">Represents the new path.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.BuildTreeView">
            <summary>
            Build a tree view.
            </summary>
            <remarks>The tree view is only build in <see cref="F:FluentUI.Blazor.Community.Components.FileManagerView.Desktop"/></remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.BuildTreeViewItem(FluentUI.Blazor.Community.Components.FileManagerEntry{`0},System.Boolean)">
            <summary>
            Build a <see cref="T:Microsoft.FluentUI.AspNetCore.Components.TreeViewItem"/>.
            </summary>
            <param name="entry">Entry to use to create the item.</param>
            <param name="isExpanded">Value indicating if the node is expanded or not.</param>
            <returns>Returns the created <see cref="T:Microsoft.FluentUI.AspNetCore.Components.TreeViewItem"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnUpdateEntry(FluentUI.Blazor.Community.Components.FileManagerEntryEventArgs{`0})">
            <summary>
            Updates the selected entry.
            </summary>
            <param name="e">The current selected entry.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.FindTreeViewItem(System.Collections.Generic.IEnumerable{Microsoft.FluentUI.AspNetCore.Components.ITreeViewItem},System.String)">
            <summary>
            Finds the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.TreeViewItem"/> specified by <paramref name="id"/> inside the <paramref name="items"/> nodes.
            </summary>
            <param name="items">Items to use for the search.</param>
            <param name="id">Identifier of the item.</param>
            <returns>Returns the item if found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnUpdateCurrentEntry">
            <summary>
            Updates the current entry.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.CleanPath(System.String)">
            <summary>
            Clean the path (removes the last backslash if found)
            </summary>
            <param name="path">Path to clean.</param>
            <returns>Returns the cleaned path.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnCreateFolderAsync">
            <summary>
            Occurs when the user wants to create a folder.
            </summary>
            <returns>Returns a task which creates a folder when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnDownloadSingleAsync(FluentUI.Blazor.Community.Components.FileManagerEntry{`0})">
            <summary>
            Download a single entry as a file.
            </summary>
            <param name="e">Entry to download.</param>
            <returns>Returns a task which download a file when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnDownloadMultiAsync(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Download a multiple entries as a zip file.
            </summary>
            <param name="items">Entries to download.</param>
            <returns>Returns a task which download a zip file when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.DownloadFileAsync(System.String,System.Byte[],System.String)">
            <summary>
            Download a file in an asynchronous way.
            </summary>
            <param name="filename">Name of the file.</param>
            <param name="data">Binary content of the file.</param>
            <param name="extension">Extension of the file.</param>
            <returns>Returns a task which download the file when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnDownloadAsync">
            <summary>
            Occurs when the user clicks the download button.
            </summary>
            <returns>Returns a task which download the selected files when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnDeleteAsync">
            <summary>
            Deletes an entry in an asynchronous way.
            </summary>
            <returns>Returns a task which deletes the entry when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.DeleteFromPathBar(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes the items from the path bar.
            </summary>
            <param name="idCollection">Collection of segments to remove from the pathbar.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.RemoveSelectedItemFromMainEntries(System.String,System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{`0}})">
            <summary>
            Removes the <paramref name="items"/> from the node specified by <paramref name="id"/>.
            </summary>
            <param name="id">Identifier of the node.</param>
            <param name="items">Items to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnSearchEntries">
            <summary>
            Search the entries.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.SetDisabled(System.Boolean)">
            <summary>
            Disable the component.
            </summary>
            <param name="isDisabled">Value indicating if the component is disabled or not.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.SetDisabled(System.Collections.Generic.IEnumerable{Microsoft.FluentUI.AspNetCore.Components.ITreeViewItem},System.Boolean)">
            <summary>
            Disable all the specified <paramref name="items"/>.
            </summary>
            <param name="items">Items to disable.</param>
            <param name="isDisabled">Value indicating if the items are disabled or not.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnProgressChange(Microsoft.FluentUI.AspNetCore.Components.FluentInputFileEventArgs)">
            <summary>
            Occurs when a file is uploading.
            </summary>
            <param name="e">Event args of the current uploading file.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFileUploadedAsync(Microsoft.FluentUI.AspNetCore.Components.FluentInputFileEventArgs)">
            <summary>
            Occurs when a file is uploaded.
            </summary>
            <param name="e">Event args of the uploaded file.</param>
            <returns>Returns a task which raised the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnFileUploaded"/> event callback when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnCompleted(System.Collections.Generic.IEnumerable{Microsoft.FluentUI.AspNetCore.Components.FluentInputFileEventArgs})">
            <summary>
            Occurs when all file have been uploaded.
            </summary>
            <param name="_">Event args of all uploaded files.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.GetProgressLabelFromState">
            <summary>
            Gets the label for the progress part.
            </summary>
            <returns>Returns the label for the progress part.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFileManager`1.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> class.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IDeletable">
            <summary>
            Represents an interface to allow a file to be deleted or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IDeletable.IsDeleteable">
            <summary>
            Gets a value indicating if the file can be deleted or not.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IDownloadable">
            <summary>
            Represents an interface to allow a file to be downloaded or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IDownloadable.IsDownloadAllowed">
            <summary>
            Gets a value indicating if the file can be downloaded or not.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IFileManagerItemsProvider`1">
            <summary>
            Represents the items provider of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IFileManagerItemsProvider`1.GetItemsAsync">
            <summary>
            Gets the items of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFileManager`1"/> in an asynchronous way.
            </summary>
            <returns>Returns a <see cref="T:System.Threading.Tasks.ValueTask`1"/> which contains the items.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IRenamable">
            <summary>
            Represents an interface to allow a file to be renamed or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IRenamable.IsRenamable">
            <summary>
            Gets a value indicating if the file can be renamed or not.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.NoFileEntryData">
            <summary>
            Represents an entry which no data.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.NoFileEntryData.IsDownloadAllowed">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.NoFileEntryData.IsRenamable">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.NoFileEntryData.IsDeleteable">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.UploadFileEventArgs">
            <summary>
            Represents the event args for an uploaded file.
            </summary>
            <param name="Name">Name of the file.</param>
            <param name="Data">Data of the file.</param>
            <param name="Extension">Extension of the file.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.UploadFileEventArgs.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Represents the event args for an uploaded file.
            </summary>
            <param name="Name">Name of the file.</param>
            <param name="Data">Data of the file.</param>
            <param name="Extension">Extension of the file.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.UploadFileEventArgs.Name">
            <summary>Name of the file.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.UploadFileEventArgs.Data">
            <summary>Data of the file.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.UploadFileEventArgs.Extension">
            <summary>Extension of the file.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FloatingPosition">
            <summary>
            Represents the position of the floating button.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.TopLeft">
            <summary>
            The button is placed at the top left based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.TopCenter">
            <summary>
            The button is placed at the top center based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.TopRight">
            <summary>
            The button is placed at the top right based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.MiddleLeft">
            <summary>
            The button is placed at the middle left based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.MiddleCenter">
            <summary>
            The button is placed at the middle center based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.MiddleRight">
            <summary>
            The button is placed at the middle right based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.BottomLeft">
            <summary>
            The button is placed at the bottom left based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.BottomCenter">
            <summary>
            The button is placed at the bottom center based on its relative parent container.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FloatingPosition.BottomRight">
            <summary>
            The button is placed at the bottom right based on its relative parent container.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxFloatingButton">
            <summary>
            Represents a floating button.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFloatingButton._isFixed">
            <summary>
            Represents a value indicating if the floating button is fixed position.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.JavascriptFilename">
            <summary>
            Represents the javascript file to use.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFloatingButton._module">
            <summary>
            Represents the loaded javascript module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxFloatingButton._updateTarget">
            <summary>
            Represents indicating if the target has changed and we need to check if the new target is valid.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFloatingButton"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.InternalStyle">
            <summary>
            Gets the style of the button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.IsVisible">
            <summary>
            Gets or sets if the button is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.Position">
            <summary>
            Gets or sets the position of the floating button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.RelativeContainerId">
            <summary>
            Gets or sets the identifier of the relative container the current button belongs to.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.OnMouseEnter">
            <summary>
            Gets or sets the callback when the mouse enters the button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.OnKeyDown">
            <summary>
            Gets or sets the callback when a key is pressed when the button is focused.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.JSRuntime">
            <summary>
            Gets or sets the javascript runtime to use.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.GetIsFixedAsync">
            <summary>
            Gets if the position of the button is fixed or not.
            </summary>
            <returns>Returns a task which set the position of the button when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxFloatingButton.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GridLayoutBase">
            <summary>
            Represents a base for a grid layout.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GridLayoutBase._items">
            <summary>
            Represents the items inside the layout.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayoutBase.Items">
            <summary>
            Gets the items inside the layout.
            </summary>
        </member>
        <member name="E:FluentUI.Blazor.Community.Components.GridLayoutBase.SaveRequested">
            <summary>
            Event to invoke when a save is requested.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayoutBase.IsDirty">
            <summary>
            Gets or sets a value indicating is dirty or not.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.Get``1(System.String)">
            <summary>
            Gets the item from its key.
            </summary>
            <typeparam name="T">Type of the item.</typeparam>
            <param name="key">Key to find.</param>
            <returns>Returns the item if found, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.Get``1(System.Int32)">
            <summary>
            Gets the item from its index.
            </summary>
            <typeparam name="T">Type of the item.</typeparam>
            <param name="index">Index of the item.</param>
            <returns>Returns the index of the item.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.AddRange(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.GridLayoutBaseItem})">
            <summary>
            Adds a range of <paramref name="items"/> into the layout.
            </summary>
            <param name="items">Items to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.Add``1(System.String,System.Int32)">
            <summary>
            Adds an item into the layout.
            </summary>
            <typeparam name="T">Type of the item.</typeparam>
            <param name="key">Key of the item.</param>
            <param name="index">Index of the item.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.Remove(System.Int32)">
            <summary>
            Removes an item from its index.
            </summary>
            <param name="index">Index to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.RequestSave">
            <summary>
            Request a save.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.GridLayoutBase.Update``1(System.Func{``0,System.String},System.Collections.Generic.IList{``0})">
            <summary>
            Updates the items.
            </summary>
            <typeparam name="TItem">Type of the items.</typeparam>
            <param name="keyFunc">Function to extract a key from an item.</param>
            <param name="items">Items to rearrange.</param>
            <exception cref="T:System.InvalidOperationException">Occurs when <paramref name="keyFunc"/> is
             <see langword="null" />.</exception>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GridLayoutBaseItem">
            <summary>
            Represents an item of a <see cref="T:FluentUI.Blazor.Community.Components.GridLayoutBase"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayoutBaseItem.Index">
            <summary>
            Gets or sets the index of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.GridLayoutBaseItem.Key">
            <summary>
            Gets or sets the key of the item.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxImageGroup">
            <summary>
            Represents a group of images.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxImageGroup._children">
            <summary>
            Represents the images inside this component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxImageGroup._isPopoverOpen">
            <summary>
            Represents a value if the popover is opened.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxImageGroup"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.MaxVisibleItems">
            <summary>
            Gets or sets the number of visible items in the group.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.Size">
            <summary>
            Gets or sets the size of each image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.Shape">
            <summary>
            Gets or sets the shape of each image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.BorderStyle">
            <summary>
            Gets or sets the border style of each image.
            </summary>
            <returns></returns>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.BackgroundStyle">
            <summary>
            Gets or sets the background style of each image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.GroupLayout">
            <summary>
            Gets or sets the layout of the group.
            </summary>
            <remarks>
            By default, the layout is set to <see cref="F:FluentUI.Blazor.Community.Components.ImageGroupLayout.Spread"/>.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroup.VisibleCount">
            <summary>
            Gets the number of visible items.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.Add(FluentUI.Blazor.Community.Components.FluentCxImageGroupItem)">
            <summary>
            Add an image into the group.
            </summary>
            <param name="imageGroupItem">Image to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.Remove(FluentUI.Blazor.Community.Components.FluentCxImageGroupItem)">
            <summary>
            Remove an image from the group.
            </summary>
            <param name="imageGroupItem"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.GetSpreadMarginLeft(FluentUI.Blazor.Community.Components.FluentCxImageGroupItem)">
            <summary>
            Gets the margin left for the spread layout.
            </summary>
            <param name="imageGroupItem">Image where the margin left will be set.</param>
            <returns>Returns the margin left.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.GetStackMarginLeft(FluentUI.Blazor.Community.Components.FluentCxImageGroupItem)">
            <summary>
            Gets the margin left for the stack layout.
            </summary>
            <param name="imageGroupItem">Image where the margin left will be set.</param>
            <returns>Returns the margin left.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.IsInPopover(FluentUI.Blazor.Community.Components.FluentCxImageGroupItem)">
            <summary>
            Gets a value indicating if the current image is inside the popover.
            </summary>
            <param name="imageGroupItem">Image to check if it is inside a popover.</param>
            <returns>Returns <see langword="true" /> if the image is inside a popover, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.GetButtonStyle">
            <summary>
            Gets the style of the popover button.
            </summary>
            <returns>Returns the style of the button.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroup.OnItemParemetersChanged(FluentUI.Blazor.Community.Components.FluentCxImageGroupItem)">
            <summary>
            Occurs when a parameter of a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem"/> changed.
            </summary>
            <param name="imageGroupItem">Image which the parameters have changed.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem">
            <summary>
            Represents an image.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem._hasParameterChanged">
            <summary>
            Represents a value indicating if a parameter has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.Source">
            <summary>
            Gets or sets the source of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.Alt">
            <summary>
            Gets or sets the alt property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.Title">
            <summary>
            Gets or sets the title property.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.Parent">
            <summary>
            Gets the parent of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.InternalStyle">
            <summary>
            Gets the style of the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.GetMarginLeft">
            <summary>
            Gets the margin-left of the component.
            </summary>
            <returns>Returns the margin-left of the component.</returns>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.InternalRenderer">
            <summary>
            Gets or sets the internal renderer for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxImageGroupItem.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ImageGroupLayout">
            <summary>
            Represents the layout of the image group.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageGroupLayout.Spread">
            <summary>
            The images are represented in a spread way in the group.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageGroupLayout.Stack">
            <summary>
            The images are represented in an horizontal stack in the group.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ImageShape">
            <summary>
            Represents the shape of the image.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageShape.Square">
            <summary>
            The image is square.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageShape.RoundSquare">
            <summary>
            The image is round square.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageShape.Circle">
            <summary>
            The image is circle.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ImageShapeExtensions">
            <summary>
            Extensions for the <see cref="T:FluentUI.Blazor.Community.Components.ImageShape"/> enum.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ImageShapeExtensions.ToBorderRadius(FluentUI.Blazor.Community.Components.ImageShape)">
            <summary>
            Converts the <see cref="T:FluentUI.Blazor.Community.Components.ImageShape"/> to a CSS class.
            </summary>
            <param name="shape">The image shape.</param>
            <returns>The CSS class representing the image shape.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ImageSize">
            <summary>
            Represents the sizes options for the image group.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size16">
            <summary>
            Uniform size : 16px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size20">
            <summary>
            Uniform size : 20px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size24">
            <summary>
            Uniform size : 24px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size28">
            <summary>
            Uniform size : 28px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size32">
            <summary>
            Uniform size : 32px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size36">
            <summary>
            Uniform size : 36px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size40">
            <summary>
            Uniform size : 40px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size48">
            <summary>
            Uniform size : 48px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size56">
            <summary>
            Uniform size : 56px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size64">
            <summary>
            Uniform size : 64px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size72">
            <summary>
            Uniform size : 72px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size96">
            <summary>
            Uniform size : 96px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size120">
            <summary>
            Uniform size : 120px.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ImageSize.Size128">
            <summary>
            Uniform size : 128px.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Internal.ChildComponentValueEqualityComparer`1">
            <summary>
            Represents the comparer for a value item of a component.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
            <remarks>The component must implement <see cref="T:FluentUI.Blazor.Community.Components.IItemValue`1"/>.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.ChildComponentValueEqualityComparer`1.Default">
            <summary>
            Gets the default instance of the comparer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.ChildComponentValueEqualityComparer`1.Equals(Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase,Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.ChildComponentValueEqualityComparer`1.GetHashCode(Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1">
            <summary>
            Represents the state of a drop zone.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1.ActiveItem">
            <summary>
            Gets the active item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1.TargetItem">
            <summary>
            Gets the target item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1.ActivePlaceholderId">
            <summary>
            Gets the identifier of the active placeholder.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1.Items">
            <summary>
            Gets the list of items inside the container.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1.RemoveActiveItem">
            <summary>
            Remove the active item from the list of item.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.DropZoneState`1.Reset">
            <summary>
            Reset the drop zone.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1">
            <summary>
            Represents the drop zone component.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1._renderDropZone">
            <summary>
            Represents the fragment to render the drop zone.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1._dragEnter">
            <summary>
            Represents a value indicating if the cursor enters into the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.DropZoneContainer">
            <summary>
            Gets or sets the parent component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.ItemCss">
            <summary>
            Gets or sets the css for the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.IsDragAllowed">
            <summary>
            Gets or sets a value indicating if the component can be dragged.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.IsItemDropAllowed">
            <summary>
            Gets or sets a value indicating if the component can be dropped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.State">
            <summary>
            Gets the state of the parent container.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.Value">
            <summary>
            Gets or sets the value of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.ForceRender">
            <summary>
            Gets or sets a value indicating wether the component will render. 
            </summary>
            <remarks>
            This value is used internally by <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1"/>.
            You mustn't use it.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.AddInContainer">
            <summary>
            Gets or sets a value indicating wether the component will be inserted into the container. 
            </summary>
            <remarks>
            This value is used internally by <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1"/>.
            You mustn't use it.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.Index">
            <summary>
            Gets the index of the current component inside the container.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.Component">
            <summary>
            Gets the render of the current component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.GetItemStyle">
            <summary>
            Gets the style of the item.
            </summary>
            <returns>Returns the style of the item.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.GetItemCss">
            <summary>
            Gets the css of the item.
            </summary>
            <returns>Returns the css of the item.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.GetIsDragTargetDenied">
            <summary>
            Gets the value indicating if the target is not allowed to be dragged.
            </summary>
            <returns>Returns <see langword="true" /> if the target cannot be dragged, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.GetIsDragTarget">
            <summary>
            Gets a value indicating if the target can be dragged.
            </summary>
            <returns>Returns <see langword="true" /> if the target can be dragged, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.GetPlaceholderCss(System.Int32)">
            <summary>
            Gets the css for the placeholder.
            </summary>
            <param name="index">Index of the placeholder.</param>
            <returns>Returns the css of the placeholder.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.OnDragLeave">
            <summary>
            Occurs when the component leaves a drop zone.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.OnDragEndAsync">
            <summary>
            Occurs when the user has finished dragging the component.
            </summary>
            <returns>Returns a task which completes the drag.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.OnDropItemOnPlaceholderAsync(System.Int32)">
            <summary>
            Occurs when the components drops into a valid placeholder.
            </summary>
            <param name="index">Index of the placeholder.</param>
            <returns>Returns a task which process the placeholder when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.OnDragStart">
            <summary>
            Occurs when the drag starts.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.OnDragEnterAsync">
            <summary>
            Occurs when the component enters a valid drop zone.
            </summary>
            <returns>Returns a task which swap the components when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.RenderInternal">
            <summary>
            Force the rendering of the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1">
            <summary>
            Represents a drop zone container.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1._children">
            <summary>
            Represents the children inside the component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1._renderItem">
            <summary>
            Represents the fragment to render an item.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.State">
            <summary>
            Gets or sets the state of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Virtualize">
            <summary>
            Gets or sets if the component is virtualized.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ItemSize">
            <summary>
            Gets or sets the size of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.MaxItems">
            <summary>
            Gets or sets the maximum items which can be dragged.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ItemKey">
            <summary>
            Gets or sets the function to extract a key from an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Layout">
            <summary>
            Gets or sets the layout of the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.InternalCss">
            <summary>
            Gets the css of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.InternalStyle">
            <summary>
            Gets the style of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.CanOverflow">
            <summary>
            Gets or sets a value indicating if the component can overflow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsDropAllowed">
            <summary>
            Gets or sets a function which indicates if a component can be dropped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ItemContent">
            <summary>
            Gets or sets the content of an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsDragAllowed">
            <summary>
            Gets or sets a function which indicates if the component can be dragged.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Immediate">
            <summary>
            Gets or sets a value indicating if the drag and drop is immediate.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.CloneItem">
            <summary>
            Gets or sets a function to clone an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ItemCss">
            <summary>
            Gets or sets a function to set the css of an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsDragEnabled">
            <summary>
            Gets or sets if the drag is enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Items">
            <summary>
            Gets or sets the list of the items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Overflow">
            <summary>
            Gets or sets the event callback to raise when the component overflows.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.DragEnd">
            <summary>
            Gets or sets the event callback to raise when the drag ends.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnItemDropRejected">
            <summary>
            Gets or sets the event callback to raise when the drop is rejected for an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnItemDrop">
            <summary>
            Gets or sets the event callback to raise when an item is dropped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnReplacedItemDrop">
            <summary>
            Gets or sets the event callback to raise when an item is replaced after drop.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.TileGridSettings">
            <summary>
            Gets or sets the settings of the tile grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.PersistenceEnabled">
            <summary>
            Gets or sets if the layout is persisted.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.CheckEquality(`0,`0)">
            <summary>
            Checks equality between two items.
            </summary>
            <param name="left">Left item to compare.</param>
            <param name="right">Right item to compare.</param>
            <returns>Returns <see langword="true" /> if the items are equal, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnDropAsync(Microsoft.AspNetCore.Components.Web.DragEventArgs)">
            <summary>
            Occurs when an item is dropped into the component.
            </summary>
            <param name="e">Event args associated to the drop.</param>
            <returns>Returns a task which manages the drop when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsItemDraggable(`0)">
            <summary>
            Gets a value indicating if an item is draggable or not.
            </summary>
            <param name="item">Item to check.</param>
            <returns>Returns <see langword="true" /> if the item is draggable, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsOverflow">
            <summary>
            Gets if the component overflows.
            </summary>
            <returns>Returns <see langword="true" /> if the component overflows, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsItemDropAllowed(`0)">
            <summary>
            Gets a value indicating if the item is allowed to drop.
            </summary>
            <param name="item">Item to check.</param>
            <returns>Returns <see langword="true" /> if the item is allowed to drop, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IndexOf(`0)">
            <summary>
            Gets the index of the item.
            </summary>
            <param name="item">Item to get the index.</param>
            <returns>Returns the index of the item.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the specified <paramref name="index"/>.
            </summary>
            <param name="index">Index of the item.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the item at the specified index.
            </summary>
            <param name="index">Index of the item.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.IsDropAllowedAsync">
            <summary>
            Gets a value indicating if the drop is allowed.
            </summary>
            <returns>Returns a task which contains <see langword="true"/> if the drop is allowed, <see langword="false" /> otherwise
             when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnItemDropAsync(`0)">
            <summary>
            Drops an item in an asynchronous way.
            </summary>
            <param name="item">Item to drop.</param>
            <returns>Returns a task which drops an item when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnDragEndAsync">
            <summary>
            Finish the drag.
            </summary>
            <returns>Returns a task which completes the drag when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.UpdateItems">
            <summary>
            Updates the items.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Add(Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase)">
            <summary>
            Adds a child into the container.
            </summary>
            <param name="child">Child to add.</param>
            <exception cref="T:System.InvalidOperationException">Occurs when the child is not <see cref="T:FluentUI.Blazor.Community.Components.IItemValue`1"/> and
             when the value of the child is <see langword="null" /></exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Remove(Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase)">
            <summary>
            Removes a child from the container.
            </summary>
            <param name="child">Child to remove.</param>
            <exception cref="T:System.InvalidOperationException">Occurs when the child is not <see cref="T:FluentUI.Blazor.Community.Components.IItemValue`1"/> and
             when the value of the child is <see langword="null" /></exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.SwapAsync(`0,`0)">
            <summary>
            Swap the <paramref name="overItem"/> with the <paramref name="activeItem"/>.
            </summary>
            <param name="overItem">First item to swap.</param>
            <param name="activeItem">Second item to swap.</param>
            <returns>Returns a task which swap the items when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.Refresh">
            <summary>
            Refresh the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.OnDropItemPlaceholderAsync(System.Int32)">
            <summary>
            Drops the item inside a placeholder in an asynchronous way.
            </summary>
            <param name="index">Index of the placeholder.</param>
            <returns>Returns a task which drops the item in the placeholder when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.GetStyle(`0)">
            <summary>
            Gets the style of the <paramref name="value"/>.
            </summary>
            <param name="value">Value to get the style.</param>
            <returns>Returns the style of the item.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ReorderItemsFromLayout">
            <summary>
            Reorders the items using a layout.
            </summary>
            <returns>Returns the ordered items.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.ReorderChildrenFromLayout">
            <summary>
            Reorders the children using a layout.
            </summary>
            <returns>Returns the ordered components.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Internal.TileGridSettings">
            <summary>
            Represents the settings of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.ColumnWidth">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.MinimumColumnWidth">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.Columns">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.RowHeight">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.Width">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.Height">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.MinimumRowHeight">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.GetRows">
            <summary>
            Gets the style of the rows of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.
            </summary>
            <returns>Returns the style of the rows of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.GetColumns">
            <summary>
            Gets the style of the columns of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.
            </summary>
            <returns>Returns the style of the rows of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Internal.TileGridSettings.ToString">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ITileGridSettings">
            <summary>
            Represents the settings for a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridSettings.ColumnWidth">
            <summary>
            Gets the width of the column.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridSettings.MinimumColumnWidth">
            <summary>
            Gets the minimum width of the column.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridSettings.Columns">
            <summary>
            Gets the number of columns.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridSettings.RowHeight">
            <summary>
            Gets the height of the row.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridSettings.Width">
            <summary>
            Gets the width of the tile grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridSettings.Height">
            <summary>
            Gets the height of the tile grid.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer">
            <summary>
            Represents a customizable player component for rendering and controlling animations.
            </summary>
            <remarks>The <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer"/> component allows developers to render animations using a specified
            renderer and provides options to control playback behavior, such as looping, autoplay, and playback speed. The
            component also supports customizable dimensions and accepts a path to the animation file.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer._module">
            <summary>
            Represents a JavaScript module reference that can be used to invoke JavaScript functions.
            </summary>
            <remarks>This field holds a reference to a JavaScript module loaded via an interop mechanism, such as
            Blazor's JavaScript interop. The value is <see langword="null"/> if the module has not been initialized or has
            been disposed.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer._hasPropertyChanged">
            <summary>
            Indicates whether a property value has been modified.   
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer._dotNetRef">
            <summary>
            Represents a reference to a .NET object of type <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer"/>  that can be passed to
            JavaScript interop in Blazor.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer._controls">
            <summary>
            Represents the controls for the Lottie animation player.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer"/> class.
            </summary>
            <remarks>The constructor generates a unique identifier for the player by assigning a new value to the
            <see cref="P:Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase.Id"/> property.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Source">
            <summary>
            Gets or sets the source to be used for the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Loop">
            <summary>
            Gets or sets a value indicating whether the animation should loop.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Autoplay">
            <summary>
            Gets or sets a value indicating whether the animation should start playing automatically.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Speed">
            <summary>
            Gets or sets the speed of the animation playback. The default value is 1, which represents normal speed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Width">
            <summary>
            Gets or sets the width of the player. This can be specified in any valid CSS unit (e.g., "100px", "50%", "10rem").
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Height">
            <summary>
            Gets or sets the height of the player. This can be specified in any valid CSS unit (e.g., "100px", "50%", "10rem").
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Renderer">
            <summary>
            Gets or sets the renderer to be used for rendering the animation. The default value is <see cref="F:FluentUI.Blazor.Community.Components.LottieRenderer.Svg"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnComplete">
            <summary>
            Gets or sets a callback that is invoked when the animation completes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnLoop">
            <summary>
            Gets or sets a callback that is invoked when the animation loops.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnEnterFrame">
            <summary>
            Gets or sets a callback that is invoked when the animation enters a new frame.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Runtime">
            <summary>
            Gets or sets the JavaScript runtime instance used for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.InternalCss">
            <summary>
            Gets the computed CSS classes for the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.InternalStyle">
            <summary>
            Gets the computed inline styles for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.LoadAnimationAsync">
            <summary>
            Loads the animation asynchronously.
            </summary>
            <returns>Returns a task which loads the animation when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnUpdateAnimationAsync">
            <summary>
            Updates the animation if a property has changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Add(FluentUI.Blazor.Community.Components.LottieControls)">
            <summary>
            Adds the specified controls to the player.
            </summary>
            <param name="controls">Controls of the player.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.Remove(FluentUI.Blazor.Community.Components.LottieControls)">
            <summary>
            Removes the controls from the player.
            </summary>
            <param name="controls">Controls of the player to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.PlayAsync">
            <summary>
            Plays the animation.
            </summary>
            <returns>Returns a task wich plays the animation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.PauseAsync">
            <summary>
            Pauses the operation associated with the current instance asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.StopAsync">
            <summary>
            Stops the operation associated with the current instance asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.SetSpeedAsync(System.Double)">
            <summary>
            Asynchronously sets the speed of the object identified by the current instance.
            </summary>
            <param name="speed">The new speed value to set. Must be a valid double representing the desired speed.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.SetDirectionAsync(FluentUI.Blazor.Community.Components.LottieDirection)">
            <summary>
            Asynchronously sets the direction of the specified element.
            </summary>
            <param name="direction">The new direction to apply to the element.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.PlaySegments(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Plays a range of segments within the animation.
            </summary>
            <param name="startSegment">The index of the segment at which playback should start. Must be a non-negative integer.</param>
            <param name="endSegment">The index of the segment at which playback should end. Must be greater than or equal to <paramref
            name="startSegment"/>.</param>
            <param name="forceFlag">A value indicating whether to force playback, overriding any current playback state. Defaults to <see
            langword="false"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.ToggleLoopAsync(System.Boolean)">
            <summary>
            Toggles the loop state of the current instance.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.NotifyCompleteAsync">
            <summary>
            Occurs when the animation completes.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnComplete"/> callback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.NotifyLoopAsync">
            <summary>
            Occurs when a loop completes.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnLoop"/> callback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.NotifyEnterFrameAsync">
            <summary>
            Occurs when entering a new frame.
            </summary>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer.OnEnterFrame"/> callback.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LottieControls">
            <summary>
            Represents the controls for a Lottie animation player.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieControls._isPlaying">
            <summary>
            Indicates whether the animation is currently playing.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieControls._isLooping">
            <summary>
            Indicates whether the animation is set to loop.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieControls._renderLabel">
            <summary>
            Represents the label rendering fragment.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieControls.Parent">
            <summary>
            Gets or sets the parent <see cref="T:FluentUI.Blazor.Community.Components.FluentCxLottiePlayer"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieControls.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieControls.IsMobile">
            <summary>
            Gets or sets a value indicating whether the controls are displayed in a mobile layout.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieControls.Labels">
            <summary>
            Gets or sets the labels used for localization in the controls.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.InvokeAsync(System.Func{System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>
            Invokes the specified asynchronous function and updates the playing state if necessary.
            </summary>
            <param name="func">Func to invoke.</param>
            <param name="isPlaying">Value indicating if the animation is playing.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.PlayAsync">
            <summary>
            Plays the current instance asynchronously, delegating the operation to the parent if one exists.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous play operation. If no parent exists, the task
            completes immediately.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.PauseAsync">
            <summary>
            Pauses the current operation asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous pause operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.StopAsync">
            <summary>
            Asynchronously stops the current operation, delegating the stop request to the parent if one exists.    
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.SetSpeedAsync(System.Double)">
            <summary>
            Asynchronously sets the speed of the current object.
            </summary>
            <param name="speed">The desired speed to set, represented as a double. The value must be within the valid range supported by the
            parent object.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.SetDirectionAsync(FluentUI.Blazor.Community.Components.LottieDirection)">
            <summary>
            Asynchronously sets the direction for the current object.
            </summary>
            <param name="direction">The <see cref="T:FluentUI.Blazor.Community.Components.LottieDirection"/> to set for the object.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.ToggleLoopAsync(System.Boolean)">
            <summary>
            Toggles the loop state of the parent asynchronously.
            </summary>
            <param name="isLooping">Value indicating if the animation loops.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieControls.OnAnimationCompletedAsync">
            <summary>
            Occurs when the animation has completed.
            </summary>
            <returns>Returns a task which stops the player if not looping.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LottieDirection">
            <summary>
            Specifies the possible directions for a Lottie operation.
            </summary>
            <remarks>This enumeration is used to define directional behavior or orientation in the context of a Lottie
            operation.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieDirection.Forward">
            <summary>
            Represents the forward direction.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieDirection.Backward">
            <summary>
            Represents the backward direction.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LottieLabels">
            <summary>
            Represents the labels used in the Lottie component for localization.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Default">
            <summary>
            Gets the default English labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.French">
            <summary>
            Gets the French labels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Pause">
            <summary>
            Gets or sets the label for the "Pause" action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Play">
            <summary>
            Gets or sets the label for the "Play" action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Stop">
            <summary>
            Gets or sets the label for the "Stop" action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Loop">
            <summary>
            Gets or sets the label for the "Loop" action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Speed">
            <summary>
            Gets or sets the label for the "Speed" action.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieLabels.Direction">
            <summary>
            Gets or sets the label for the "Direction" action.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LottieOptions">
            <summary>
            Represents configuration options for a Lottie animation.
            </summary>
            <remarks>This record is used to configure the behavior and rendering of a Lottie animation.  It includes
            options for the animation's file path, playback settings, speed, and rendering type.</remarks>
            <param name="Path">The file path to the Lottie animation. This must be a valid path to the animation file.</param>
            <param name="Loop">A value indicating whether the animation should loop continuously.  The default value is <see langword="true"/>.</param>
            <param name="Autoplay">A value indicating whether the animation should start playing automatically.  The default value is <see
            langword="true"/>.</param>
            <param name="Speed">The playback speed of the animation. A value of 1 represents normal speed.  Values greater than 1 increase the
            speed, while values between 0 and 1 decrease it.  The default value is 1.</param>
            <param name="Renderer">The rendering type for the animation. This determines how the animation is rendered  (e.g., as SVG or Canvas). The
            default value is <see cref="F:FluentUI.Blazor.Community.Components.LottieRenderer.Svg"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieOptions.#ctor(System.String,System.Boolean,System.Boolean,System.Double,FluentUI.Blazor.Community.Components.LottieRenderer)">
            <summary>
            Represents configuration options for a Lottie animation.
            </summary>
            <remarks>This record is used to configure the behavior and rendering of a Lottie animation.  It includes
            options for the animation's file path, playback settings, speed, and rendering type.</remarks>
            <param name="Path">The file path to the Lottie animation. This must be a valid path to the animation file.</param>
            <param name="Loop">A value indicating whether the animation should loop continuously.  The default value is <see langword="true"/>.</param>
            <param name="Autoplay">A value indicating whether the animation should start playing automatically.  The default value is <see
            langword="true"/>.</param>
            <param name="Speed">The playback speed of the animation. A value of 1 represents normal speed.  Values greater than 1 increase the
            speed, while values between 0 and 1 decrease it.  The default value is 1.</param>
            <param name="Renderer">The rendering type for the animation. This determines how the animation is rendered  (e.g., as SVG or Canvas). The
            default value is <see cref="F:FluentUI.Blazor.Community.Components.LottieRenderer.Svg"/>.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieOptions.Path">
            <summary>The file path to the Lottie animation. This must be a valid path to the animation file.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieOptions.Loop">
            <summary>A value indicating whether the animation should loop continuously.  The default value is <see langword="true"/>.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieOptions.Autoplay">
            <summary>A value indicating whether the animation should start playing automatically.  The default value is <see
            langword="true"/>.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieOptions.Speed">
            <summary>The playback speed of the animation. A value of 1 represents normal speed.  Values greater than 1 increase the
            speed, while values between 0 and 1 decrease it.  The default value is 1.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieOptions.Renderer">
            <summary>The rendering type for the animation. This determines how the animation is rendered  (e.g., as SVG or Canvas). The
            default value is <see cref="F:FluentUI.Blazor.Community.Components.LottieRenderer.Svg"/>.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LottieRenderer">
            <summary>
            Specifies the rendering format options for a Lottie animation.
            </summary>
            <remarks>Use this enumeration to select the desired output format when rendering a Lottie animation.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieRenderer.Svg">
            <summary>
            Represents an SVG (Scalable Vector Graphics) element, which is a vector-based image format for defining graphics
            using XML.
            </summary>
            <remarks>This class provides functionality for working with SVG elements, including creating,
            manipulating, and rendering SVG content. SVG is widely used for scalable and resolution-independent graphics in
            web and application development.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieRenderer.Canvas">
            <summary>
            Represents a drawable surface for rendering graphical elements.
            </summary>
            <remarks>The <see cref="F:FluentUI.Blazor.Community.Components.LottieRenderer.Canvas"/> class provides a surface for drawing shapes, images, and other
            graphical content. It can be used in graphical applications to manage and render visual elements.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LottieRenderer.Html">
            <summary>
            Represents an HTML document or fragment, providing methods and properties to manipulate and interact with its
            structure and content.
            </summary>
            <remarks>This class can be used to parse, modify, and generate HTML content. It provides functionality
            for working with elements, attributes, and text nodes within an HTML structure. Use this class to
            programmatically create or manipulate HTML documents.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LottieState">
            <summary>
            Represents the state of a Lottie component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.LottieState.IsRegister">
            <summary>
            Gets a value indicating whether the component is registered.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieState.Register">
            <summary>
            Registers the component.
            </summary>
            <exception cref="T:System.InvalidOperationException">Occurs when the component is already registered.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.LottieState.Unregister">
            <summary>
            Unregisters the component.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxMediaQuery">
            <summary>
            Represents a Media Query detector.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.JavascriptFile">
            <summary>
            Represents the javascript file to manage the media query.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxMediaQuery._module">
            <summary>
            Represents the javascript module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxMediaQuery._hasRender">
            <summary>
            Represents a value indicating if the component was first rendered.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxMediaQuery._disposeQueryModule">
            <summary>
            Represents a value to dispose the module each time the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.Query"/> changes.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxMediaQuery"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.Query">
            <summary>
            Gets or sets the query to manage.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.OnMediaChanged">
            <summary>
            Gets or sets the callback to raise when the media changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.JSRuntime">
            <summary>
            Gets or sets the Javascript runtime.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.OnMediaQueryChangedAsync(System.Boolean)">
            <summary>
            Occurs when the media changes.
            </summary>
            <param name="change">Value indicating if the media has changed.</param>
            <returns>Returns a task which raises the event callback <see cref="P:FluentUI.Blazor.Community.Components.FluentCxMediaQuery.OnMediaChanged"/> when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserversProvider.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxObserversProvider.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IObserver">
            <summary>
            Represents an observer that responds to asynchronous events related to resizing, intersection, and measurement.
            </summary>
            <remarks>This interface defines methods for handling specific asynchronous events, such as changes in size,
            intersection events,  and measurement updates. Implementations of this interface are expected to handle these events
            appropriately and  support asynchronous disposal.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IObserver.Id">
            <summary>
            Gets the unique identifier for the observer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IObserver.OnResizedAsync(System.Int32,System.Int32)">
            <summary>
            Handles the event triggered when the size of a component or window is resized.
            </summary>
            <param name="width">The new width, in pixels, after the resize event.</param>
            <param name="height">The new height, in pixels, after the resize event.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IObserver.OnIntersectAsync(FluentUI.Blazor.Community.Components.IntersectionEventArgs)">
            <summary>
            Handles the intersection event triggered when an observed element intersects with a specified threshold.
            </summary>
            <param name="e">The event arguments containing details about the intersection, such as the target element and intersection
            ratio. Cannot be <see langword="null"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.IObserver.OnMeasuredAsync(System.Int32,System.Int32)">
            <summary>
            Handles the event triggered when a measurement is completed, providing the measured width and height.
            </summary>
            <param name="width">The measured width, in pixels. Must be a non-negative value.</param>
            <param name="height">The measured height, in pixels. Must be a non-negative value.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ObserverService">
            <summary>
            Represents a service for managing observers that monitor changes to elements in the DOM.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObserverService._isInitialized">
            <summary>
            Value indicating whether the service has been initialized.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObserverService._module">
            <summary>
            Reference to the JavaScript module for observer functionality.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ObserverService._providerId">
            <summary>
            Reference ID for the provider associated with this service.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ObserverService.Observers">
            <summary>
            Gets a dictionary of observers managed by the service.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverService.AddObserverAsync(FluentUI.Blazor.Community.Components.IObserver)">
            <summary>
            Adds an observer to the service and initializes it if the service is already initialized.
            </summary>
            <param name="observer">Observer to add into the service.</param>
            <returns>Returns a task which adds the observer into the service when completed.</returns>
            <exception cref="T:System.ArgumentException">Occurs if <see cref="P:FluentUI.Blazor.Community.Components.IObserver.Id"/> is not provided.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverService.RemoveObserverAsync(FluentUI.Blazor.Community.Components.IObserver)">
            <summary>
            Removes an observer to the service and initializes it if the service is already initialized.
            </summary>
            <param name="observer">Observer to remove from the service.</param>
            <returns>Returns a task which removes the observer from the service when completed.</returns>
            <exception cref="T:System.ArgumentException">Occurs if <see cref="P:FluentUI.Blazor.Community.Components.IObserver.Id"/> is not provided.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverService.WaitInitializationCompleted">
            <summary>
            Waits until the service is initialized.
            </summary>
            <returns>Returns a task which waits until the service is initialized.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverService.Initialize(System.String,Microsoft.JSInterop.IJSObjectReference)">
            <summary>
            Initializes the instance with the specified provider ID and JavaScript module reference.
            </summary>
            <param name="id">The unique identifier for the provider. Cannot be null or empty.</param>
            <param name="module">The JavaScript module reference to associate with the instance. Cannot be null.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ObserverService.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxPathBar">
            <summary>
            Represents a path bar.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._homeIcon">
            <summary>
            Represents the home icon.
            </summary>
            <remarks>
            Used when the <see cref="T:FluentUI.Blazor.Community.Components.DeviceInfo"/> is null.
            </remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._desktopIcon">
            <summary>
            Represents the desktop icon.
            </summary>
            <remarks>
            Used when the <see cref="T:FluentUI.Blazor.Community.Components.DeviceInfo"/> is not null and if the device is a desktop.
            </remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._tabletIcon">
            <summary>
            Represents the tablet icon.
            </summary>
            <remarks>
            Used when the <see cref="T:FluentUI.Blazor.Community.Components.DeviceInfo"/> is not null and if the device is a tablet.
            </remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._phoneIcon">
            <summary>
            Represents the desktop icon.
            </summary>
            <remarks>
            Used when the <see cref="T:FluentUI.Blazor.Community.Components.DeviceInfo"/> is not null and if the device is a smartphone.
            </remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar.OverflowButtonWidth">
            <summary>
            Represents the width of the overflow button.
            </summary>
            <remarks>
            This value is fixed because the button has a fixed width of 32px.
            </remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._overflowItems">
            <summary>
            Represents the overflow items.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._visibleItems">
            <summary>
            Represents the visible items.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._allItems">
            <summary>
            Represents all items.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar.JavascriptModule">
            <summary>
            Represents the JavaScript module for the component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._jsModule">
            <summary>
            Represents the JavaScript module reference.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._dotNetRef">
            <summary>
            Represents the dot net object reference.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._hasPathChanged">
            <summary>
            Represents a value indicating if the path has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._cachedSizes">
            <summary>
            Represents the cached values.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._lastContainerWidth">
            <summary>
            Represents the last container width.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._measuredCount">
            <summary>
            Represents the number of elements to measure.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._containerWidth">
            <summary>
            Represents the current container width.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._mutationValue">
            <summary>
            Represents the mutation observer values.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBar._refreshItemsSize">
            <summary>
            Represents a value indicating if the items size should be refreshed. 
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.InternalCss">
            <summary>
            Gets the css class which is used internally.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.JSRuntime">
            <summary>
            Gets or sets the javaScript runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.Root">
            <summary>
            Gets or sets the root of the path, with all possible paths.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.Path">
            <summary>
            Gets or sets the path.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.PathChanged">
            <summary>
            Gets or sets the callback when the path changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.DeviceInfoState">
            <summary>
            Gets or sets the state for the information of the current used device.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.InvalidationThresholdPercentage">
            <summary>
            Gets or sets the percentage threshold to invalidate the path.
            </summary>
            <remarks>This value is between 0.0 and 1.0</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.InvalidationThresholdPixels">
            <summary>
            Gets or sets the pixel threshold to invalidate the path.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.MutationObserverConfig">
            <summary>
            Gets or sets the mutation observer configuration.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnCacheInvalidated">
            <summary>
            Gets or sets the event callback which is invoked when the cache is invalidated.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnPathSelectedAsync">
            <summary>
            Occurs when the path is selected by <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBarItem"/>.
            </summary>
            <returns>Returns a task which changes the path when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.GetHomeIcon">
            <summary>
            Gets the home icon.
            </summary>
            <returns>Returns the home icon.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.UpdatePathAsync(FluentUI.Blazor.Community.Components.IPathBarItem)">
            <summary>
            Updates the path and invokes the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.PathChanged"/> callback.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.InvalidateItemSize(System.String)">
            <summary>
            Invalidates the size of the item with the specified <paramref name="id"/>.
            </summary>
            <param name="id">Identifier of the item.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.ClearItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Clears the cached sizes of the specified <paramref name="values"/>.
            </summary>
            <param name="values">Values to remove from the cached sizes.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.InvalidatePath">
            <summary>
            Invalidate the path and recalculates the visible and overflow items.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnCacheInvalidatedAsync">
            <summary>
            Invalidates the cache and invokes the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnCacheInvalidated"/> callback.
            </summary>
            <returns>Returns a task which invokes the callback when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.RefreshPathBarAsync">
            <summary>
            Refreshes the path bar and recalculates the visible and overflow items.
            </summary>
            <returns>Returns a task which computes the visible and overflow items when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.UpdateCacheSizesAsync(System.Int32)">
            <summary>
            Updates the cache sizes starting from the specified index.
            </summary>
            <param name="startIndex">Index of the starting cache.</param>
            <returns>Returns <see langword="true"/> when the cache is updated,
            <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnResizeAsync(System.Double)">
            <summary>
            Occurs when the component is resized.
            </summary>
            <param name="width">New size of the component.</param>
            <returns>Returns a task which refresh the component.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.OnMutatedAsync">
            <summary>
            Occurs when a mutation has changed.
            </summary>
            <returns>Returns a task which invalidate the cache.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBar.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxPathBarItem">
            <summary>
            Represents a component inside a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBarItem._renderLabelFragment">
            <summary>
            Represents the render fragment for the label.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.Label">
            <summary>
            Gets or sets the label of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.Items">
            <summary>
            Gets or sets the items inside the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.Ancestor">
            <summary>
            Gets or sets the ancestor of this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.ShowLabel">
            <summary>
            Gets or sets a value indicating if the label is visible or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.Icon">
            <summary>
            Gets or sets the icon to show.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.OnTapped">
            <summary>
            Gets or sets the callback when the component is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.InternalClass">
            <summary>
            Gets the internal class for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.OnTappedAsync">
            <summary>
            Occurs when the component is clicked.
            </summary>
            <returns>Returns a task which raises the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItem.OnTapped"/> callback when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu">
            <summary>
            Represents a menu for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBarItem"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu._isMenuOpen">
            <summary>
            Represents the opened state of the menu.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu._chevronRight">
            <summary>
            Represents the chevron right when the menu is not opened.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu._chevronDown">
            <summary>
            Represents the chevron down when the menu is opened.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu.Parent">
            <summary>
            Gets or sets the parent of this menu.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu.Items">
            <summary>
            Gets or sets the items of this menu.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxPathBarItemMenu.OnItemTappedAsync(FluentUI.Blazor.Community.Components.IPathBarItem)">
            <summary>
            Occurs when the menu is selected.
            </summary>
            <param name="item">Represents the selected item.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IPathBarItem">
            <summary>
            Represents an interface for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBarItem"/>
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IPathBarItem.Label">
            <summary>
            Gets the label of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IPathBarItem.Parent">
            <summary>
            Gets the parent of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IPathBarItem.Id">
            <summary>
            Gets the id of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IPathBarItem.Icon">
            <summary>
            Gets the <see cref="T:Microsoft.FluentUI.AspNetCore.Components.Icon"/> of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IPathBarItem.Items">
            <summary>
            Gets the menu items of the item.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.OverflowButton">
            <summary>
            Represents the overflow button for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.OverflowButton._isMenuOpen">
            <summary>
            Represents if the menu is open.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.OverflowButton.Parent">
            <summary>
            Gets or sets the parent of the button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.OverflowButton.Items">
            <summary>
            Gets or sets the items inside the overflow.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.OverflowButton.OnItemTappedAsync(FluentUI.Blazor.Community.Components.IPathBarItem)">
            <summary>
            Occurs when the menu is selected.
            </summary>
            <param name="item">Represents the selected item.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PathBarItem">
            <summary>
            Represents an item for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxPathBar"/> component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PathBarItem._items">
            <summary>
            Represents the children of the current instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItem.Label">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItem.Id">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItem.Icon">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItem.Items">
            <inheritdoc />
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItem.Parent">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PathBarItemBuilder">
            <summary>
            Represents a builder for the <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.PathBarItemBuilder.Prefix">
            <summary>
            Represents the prefix used for the identifiers.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.Remove(FluentUI.Blazor.Community.Components.IPathBarItem,System.String)">
            <summary>
            Removes the item with the specified <paramref name="id"/> from the <paramref name="root"/>.
            </summary>
            <param name="root">Root to use for searching the value to remove.</param>
            <param name="id">Identifier to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.Remove(FluentUI.Blazor.Community.Components.IPathBarItem,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes all the items with the specified <paramref name="idCollection"/> from the <paramref name="root"/>.
            </summary>
            <param name="root">Root to use for searching the values to remove.</param>
            <param name="idCollection">Collection of identifiers to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.From``1(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.FileManagerEntry{``0}})">
            <summary>
            Builds a collection of <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/> from the specified <paramref name="values"/>.
            </summary>
            <typeparam name="TItem">Type of the items.</typeparam>
            <param name="values">Values to use to create the <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/>.</param>
            <returns>Returns the <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/> items.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.Merge(FluentUI.Blazor.Community.Components.IPathBarItem,System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.IPathBarItem})">
            <summary>
            Merge the specified <paramref name="items"/> into the <paramref name="root"/>.
            </summary>
            <param name="root">Root to use to merge items.</param>
            <param name="items">Items to merge.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.Find(System.Collections.Generic.IEnumerable{FluentUI.Blazor.Community.Components.IPathBarItem},System.String,System.Boolean)">
            <summary>
            Finds the item inside <paramref name="items"/> by its <paramref name="id"/>.
            </summary>
            <param name="items">Items to use for search.</param>
            <param name="id">Id to find.</param>
            <param name="removePrefix">Value indicating if the prefix must be removed.</param>
            <returns>Returns the item when found, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.GetAllParts(FluentUI.Blazor.Community.Components.IPathBarItem,System.String[])">
            <summary>
            Gets all the parts from the specified <paramref name="root"/> matching the specified <paramref name="segments"/>.
            </summary>
            <param name="root">Root to use to build the path.</param>
            <param name="segments">Segments which represent the path.</param>
            <returns>Returns the <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/> which represents the parts of the path.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.GetIdentifier(System.String)">
            <summary>
            Gets the identifier of the specified <paramref name="value"/>.
            </summary>
            <param name="value">Identifier of the item.</param>
            <returns>Returns the real identifier of the item.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.UpdateLabel(FluentUI.Blazor.Community.Components.IPathBarItem,System.String,System.String)">
            <summary>
            Updates the label of the item with the specified <paramref name="id"/>.
            </summary>
            <param name="rootPath">Item where to begin the search.</param>
            <param name="id">Identifier of the id.</param>
            <param name="newLabel"></param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemBuilder.GetPath(FluentUI.Blazor.Community.Components.IPathBarItem)">
            <summary>
            Gets the full path of the specified <paramref name="value"/>.
            </summary>
            <param name="value">Last item of the bar.</param>
            <returns>Returns the full path of the specified <paramref name="value" />.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PathBarItemComparer">
            <summary>
            Represents the comparer to compare two instance of <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/> together.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItemComparer.Default">
            <summary>
            Gets the default comparer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemComparer.Compare(FluentUI.Blazor.Community.Components.IPathBarItem,FluentUI.Blazor.Community.Components.IPathBarItem)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer">
            <summary>
            Represents a comparer for <see cref="T:FluentUI.Blazor.Community.Components.IPathBarItem"/> instances.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer"/> class from being created.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer.Default">
            <summary>
            Gets the default instance of the <see cref="T:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer"/>.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer.Equals(FluentUI.Blazor.Community.Components.IPathBarItem,FluentUI.Blazor.Community.Components.IPathBarItem)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.PathBarItemEqualityComparer.GetHashCode(FluentUI.Blazor.Community.Components.IPathBarItem)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxResizer">
            <summary>
            Represents a resizer component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxResizer._module">
            <summary>
            Represents the javascript module instance to use for resizing the component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxResizer.JavaScriptFile">
            <summary>
            Represents the javascript file to use for resizing the component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxResizer._dotNetReferenceResizer">
            <summary>
            Represents the reference of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxResizer"/> inside the javascript functions.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxResizer._resetInitialization">
            <summary>
            Flag indicating if we need to reset the initialization of the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxResizer"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.IsResizeEnabled">
            <summary>
            Gets or set a value indicating if the resize is enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.OnResized">
            <summary>
            Gets or sets an event callback which occurs when a resize operation is performed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.JSRuntime">
            <summary>
            Gets or sets the JSRuntime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.LocalizationDirection">
            <summary>
            Gets or sets the reading direction of the objects in the UI.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.ResizeHandlers">
            <summary>
            Gets the resized handler to use regarding the reading direction.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.SpanGridId">
            <summary>
            Gets or sets the id of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.OnTapped">
            <summary>
            Gets or sets an event callback when the component is tapped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.OnDoubleTapped">
            <summary>
            Gets or sets an event callback when the component is double tapped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.InternalClass">
            <summary>
            Gets the internal class the component use.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxResizer.InternalStyle">
            <summary>
            Gets the internal style the component use.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.OnTappedAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Occurs when the component is tapped.
            </summary>
            <param name="e">Event args which contains information about the mouse.</param>
            <returns>Returns a task which invokes <see cref="P:FluentUI.Blazor.Community.Components.FluentCxResizer.OnTapped"/> when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.OnDoubleTappedAsync(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Occurs when the component is double tapped.
            </summary>
            <param name="e">Event args which contains information about the mouse.</param>
            <returns>Returns a task which invokes <see cref="P:FluentUI.Blazor.Community.Components.FluentCxResizer.OnDoubleTapped"/> when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.Resized(FluentUI.Blazor.Community.Components.ResizedEventArgs)">
            <summary>
            Occurs when the javascript completes the resize.
            </summary>
            <param name="e">Event args which contains the data of the resize.</param>
            <returns>Returns a task which invokes <see cref="P:FluentUI.Blazor.Community.Components.FluentCxResizer.OnResized"/> when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxResizer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResizedEventArgs">
            <summary>
            Represents the event args when a component is resized.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizedEventArgs.Id">
            <summary>
            Gets or sets the identifier of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizedEventArgs.Orientation">
            <summary>
            Gets or sets the orientation of the resized.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizedEventArgs.OriginalSize">
            <summary>
            Gets or sets the original size of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizedEventArgs.NewSize">
            <summary>
            Gets or sets the new size of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizedEventArgs.ColumnSpan">
            <summary>
            Gets or sets the column span of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ResizedEventArgs.RowSpan">
            <summary>
            Gets or sets the row span of the component.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResizerHandler">
            <summary>
            Represents the handler for the resizer component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResizerHandler.Horizontally">
            <summary>
            Resizes the item horizontally.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResizerHandler.Vertically">
            <summary>
            Resizes the item vertically.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResizerHandler.Both">
            <summary>
            Resizes the item vertically and horizontally.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ResizerHelper">
            <summary>
            Represents an helper for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxResizer"/> components.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResizerHelper._ltrResize">
            <summary>
            Represents the resize handler for left to right direction.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.ResizerHelper._rtlResize">
            <summary>
            Represents the resize handlers for the right to left direction.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ResizerHelper.GetFromLocalizationDirection(Microsoft.FluentUI.AspNetCore.Components.LocalizationDirection)">
            <summary>
            Gets the resize handlers from the specified <paramref name="localizationDirection"/>.
            </summary>
            <param name="localizationDirection">Direction used by the app.</param>
            <returns>Returns the <see cref="T:System.Collections.Generic.Dictionary`2"/> of the resize handler to use.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.EraserShape">
            <summary>
            Specifies the shape of an eraser used in drawing or editing operations in the signature component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EraserShape.Circle">
            <summary>
            Represents a geometric circle defined by its radius.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.EraserShape.Square">
            <summary>
            Represents a geometric square with equal-length sides.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.GridDisplayMode">
            <summary>
            Specifies the display mode for a grid, determining how the grid is visually rendered.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GridDisplayMode.None">
            <summary>
            No grid is displayed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GridDisplayMode.Lines">
            <summary>
            A grid with lines is displayed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.GridDisplayMode.Dots">
            <summary>
            A grid with dots is displayed.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LineCap">
            <summary>
            Represents the style of the endpoints of a line.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LineCap.Butt">
            <summary>
            Represents a flat edge at the end of the line.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LineCap.Round">
            <summary>
            Represents a rounded edge at the end of the line.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LineCap.Square">
            <summary>
            Represents a square edge at the end of the line.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.LineJoin">
            <summary>
            Specifies the shape to be used at the join between two connected lines.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LineJoin.Miter">
            <summary>
            Represents a sharp corner or a pointed join between two lines.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LineJoin.Round">
            <summary>
            Represents a rounded join between two lines.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.LineJoin.Bevel">
            <summary>
            Represents a beveled join, which creates a flattened corner between two lines.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureImageFormat">
            <summary>
            Represents the different image formats that can be used when exporting a signature from the Signature component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Bmp">
            <summary>
            Represents the BMP (Bitmap) image format.
            </summary>
            <remarks>The BMP format is a widely used raster graphics image file format that stores bitmap digital
            images. It supports various color depths and compression methods.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Png">
            <summary>
            Represents the Portable Network Graphics (PNG) image format.
            </summary>
            <remarks>PNG is a raster-graphics file format that supports lossless data compression. It is commonly
            used for web graphics and supports transparency.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Jpeg">
            <summary>
            Represents a JPEG image format.
            </summary>
            <remarks>This class or enumeration is used to identify or work with JPEG image files,  which are
            commonly used for storing and transmitting photographic images.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Webp">
            <summary>
            Represents the WebP image format.
            </summary>
            <remarks>WebP is a modern image format that provides superior lossless and lossy compression for
            images on the web. It is designed to reduce image file sizes while maintaining high visual quality.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Gif">
            <summary>
            Represents an animated image in the Graphics Interchange Format (GIF).
            </summary>
            <remarks>This class provides functionality for working with GIF images, including accessing frames,
            metadata, and playback properties. It can be used to load, manipulate, and display GIF animations.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Svg">
            <summary>
            Represents an SVG (Scalable Vector Graphics) element, which is a vector-based image format  for defining
            graphics using XML.
            </summary>
            <remarks>This class provides functionality for working with SVG elements, including creating, 
            manipulating, and rendering SVG content. SVG is widely used for scalable and resolution-independent  graphics in
            web and application development.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Pdf">
            <summary>
            Represents a PDF (Portable Document Format) document, which is a file format used to present and exchange.
            </summary>
            <remarks>PDF documents are widely used for sharing and printing documents while preserving their formatting.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.WatermarkVerticalAlignment">
            <summary>
            Represents the vertical alignment options for the watermark in the signature component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.WatermarkVerticalAlignment.Start">
            <summary>
            The watermark is aligned to the top of the signature area.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.WatermarkVerticalAlignment.Middle">
            <summary>
            The watermark is centered vertically within the signature area.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.WatermarkVerticalAlignment.End">
            <summary>
            The watermark is aligned to the bottom of the signature area.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxSignature">
            <summary>
            Represents a signature component that allows users to draw and manage signatures with various options and features.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSignature._signature">
            <summary>
            Rerpresents the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.DialogService">
            <summary>
            Gets or sets the dialog service for displaying dialogs and panels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.Options">
            <summary>
            Gets or sets the signature options.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.MenuOptions">
            <summary>
            Gets or sets the menu options.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.Labels">
            <summary>
            Gets or sets the labels for the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.IsMobile">
            <summary>
            Gets or sets a value indicating whether the component is being rendered on a mobile device.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.ExportCompleted">
            <summary>
            Gets or sets the event callback that is invoked when the export operation is completed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSignature.SignatureStyle">
            <summary>
            Gets the css for the signature area.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnExportClickedAsync">
            <summary>
            Displays the export settings panel to the user and allows them to configure and confirm export options.
            </summary>
            <remarks>This method asynchronously opens a dialog panel for exporting signatures. The panel includes
            options  for configuring export settings, as well as primary and secondary actions for confirming or canceling 
            the operation. The dialog is aligned to the right side of the screen.</remarks>
            <returns>Returns a task which displays the export settings panel when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnPenSettingsClickedAsync">
            <summary>
            Displays the pen settings panel to the user and allows them to configure and confirm pen options.
            </summary>
            <remarks>This method asynchronously opens a dialog panel for configuring pen options,
            as well as primary and secondary actions for confirming or canceling 
            the operation. The dialog is aligned to the right side of the screen.</remarks>
            <returns>Returns a task which displays the pen settings panel when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnEraserSettingsClickedAsync">
            <summary>
            Displays the eraser settings panel to the user and allows them to configure
             and confirm eraser options.
            </summary>
            <remarks>This method asynchronously opens a dialog panel for configuring eraser options,
            as well as primary and secondary actions for confirming or canceling 
            the operation. The dialog is aligned to the right side of the screen.</remarks>
            <returns>Returns a task which displays the pen settings panel when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnGridSettingsClickedAsync">
            <summary>
            Displays the grid settings panel to the user and allows them to configure
             and confirm grid options.
            </summary>
            <remarks>This method asynchronously opens a dialog panel for configuring grid options,
            as well as primary and secondary actions for confirming or canceling 
            the operation. The dialog is aligned to the right side of the screen.</remarks>
            <returns>Returns a task which displays the grid settings panel when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnWatermarkSettingsClickedAsync">
            <summary>
            Displays the watermark settings panel to the user and allows them to configure
             and confirm watermark options.
            </summary>
            <remarks>This method asynchronously opens a dialog panel for configuring watermark options,
            as well as primary and secondary actions for confirming or canceling 
            the operation. The dialog is aligned to the right side of the screen.</remarks>
            <returns>Returns a task which displays the watermark settings panel when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnUndoClickedAsync">
            <summary>
            Reverts the most recent action performed on the signature, if available.
            </summary>
            <remarks>This method performs an undo operation on the signature if a signature instance is present. 
            If no signature is available, the method does nothing.</remarks>
            <returns>A task that represents the asynchronous undo operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnRedoClickedAsync">
            <summary>
            Handles the redo action by invoking the redo operation on the associated signature, if available.
            </summary>
            <remarks>This method performs the redo operation asynchronously. If no signature is associated, the
            method does nothing.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnPenClickedAsync">
            <summary>
            Handles the event triggered when the pen is clicked, ensuring the signature control exits erase mode.
            </summary>
            <remarks>This method sets the signature control to non-erase mode if the signature control is
            initialized.</remarks>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnEraserClickedAsync">
            <summary>
            Enables erase mode for the signature component asynchronously.
            </summary>
            <remarks>This method sets the signature component to erase mode, allowing the user to erase content. 
            If the signature component is not initialized, the method does nothing.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSignature.OnClearClickedAsync">
            <summary>
            Clears the signature if one is currently present.
            </summary>
            <remarks>This method asynchronously clears the signature data by invoking the <see cref="M:FluentUI.Blazor.Community.Components.Signature.ClearAsync"/>
            method  on the signature object. If no signature is present, the method does nothing.</remarks>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureGridLayer">
            <summary>
            Represents a grid layer component for displaying a grid on a signature component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureGridLayer._gridLayerElement">
            <summary>
            Reference to the grid layer HTML element.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureGridLayer._module">
            <summary>
            Represents the JavaScript module for the grid layer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureGridLayer._width">
            <summary>
            Represents the width of the grid layer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureGridLayer._height">
            <summary>
            Represents the height of the grid layer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureGridLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SignatureGridLayer"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridLayer.JSRuntime">
            <summary>
            Gets or sets the JavaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridLayer.Options">
            <summary>
            Get or sets the grid options for the grid layer.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridLayer.InternalClass">
            <summary>
            Gets the internal CSS class for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureGridLayer.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureGridLayer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureGridLayer.UpdateViewboxAsync(System.Int32,System.Int32)">
            <summary>
            Updates the viewbox of the grid layer based on the provided width and height.
            </summary>
            <param name="width">Width of the component.</param>
            <param name="height">Height of the component.</param>
            <returns>Returns a task which updates the viewbox when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureGridLayer.RefreshAsync">
            <summary>
            Refreshes the grid layer by invoking the JavaScript function to update the grid.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureInkLayer">
            <summary>
            Represents an ink layer component for capturing and displaying user signatures.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureInkLayer._inkLayerElement">
            <summary>
            Reference to the grid layer HTML element.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureInkLayer._module">
            <summary>
            Represents the JavaScript module for the ink layer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureInkLayer._width">
            <summary>
            Represents the width of the ink layer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureInkLayer._height">
            <summary>
            Represents the height of the ink layer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SignatureInkLayer"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureInkLayer.JSRuntime">
            <summary>
            Gets or sets the JavaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureInkLayer.PenOptions">
            <summary>
            Get or sets the pen options for the ink layer.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureInkLayer.EraserOptions">
            <summary>
            Get or sets the eraser options for the ink layer.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureInkLayer.InternalClass">
            <summary>
            Gets the internal CSS class for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.UpdateViewboxAsync(System.Int32,System.Int32)">
            <summary>
            Updates the viewbox of the grid layer based on the provided width and height.
            </summary>
            <param name="width">Width of the component.</param>
            <param name="height">Height of the component.</param>
            <returns>Returns a task which updates the viewbox when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.ClearAsync">
            <summary>
            Clears the current signature from the ink layer.
            </summary>
            <returns>Returns a task which clear the ink layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.UndoAsync">
            <summary>
            Undoes the last action on the ink layer.
            </summary>
            <returns>Returns a task which undo the last action on the ink layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.RedoAsync">
            <summary>
            Redos the last undone action on the ink layer.
            </summary>
            <returns>Returns a task which redo the last action on the ink layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.SetEraseModeAsync(System.Boolean)">
            <summary>
            Sets the erase mode on the ink layer.
            </summary>
            <param name="enabled">Value indicating if the erase mode is enabled.</param>
            <returns>Returns a task which set the erase mode when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureInkLayer.RefreshAsync">
            <summary>
            Refreshes the ink layer with the current pen options.
            </summary>
            <returns>Returns a task which updates the pen options.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureOverlayLayer">
            <summary>
            Represents an overlay layer component for capturing and displaying user signatures.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureOverlayLayer._overlayLayerElement">
            <summary>
            Reference to the grid layer HTML element.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureOverlayLayer._module">
            <summary>
            Represents the JavaScript module for the ink layer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureOverlayLayer._width">
            <summary>
            Represents the width of the ink layer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureOverlayLayer._height">
            <summary>
            Represents the height of the ink layer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SignatureOverlayLayer"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.JSRuntime">
            <summary>
            Gets or sets the JavaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.Options">
            <summary>
            Get or sets the pen options for the ink layer.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.InternalClass">
            <summary>
            Gets the internal CSS class for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.UpdateViewboxAsync(System.Int32,System.Int32)">
            <summary>
            Updates the viewbox of the grid layer based on the provided width and height.
            </summary>
            <param name="width">Width of the component.</param>
            <param name="height">Height of the component.</param>
            <returns>Returns a task which updates the viewbox when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureOverlayLayer.RefreshAsync">
            <summary>
            Refreshes the overlay layer by invoking the JavaScript function to update the overlay with the current options.
            </summary>
            <returns>Returns a task which updates the overlayer when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureGridOptions">
            <summary>
            Represents the grid options for the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.DisplayMode">
            <summary>
            Gets or sets the display mode of the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.CellSize">
            <summary>
            Gets or sets the size of each cell in the grid, in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.Color">
            <summary>
            Gets or sets the color of the grid lines or dots.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.Opacity">
            <summary>
            Gets or sets the opacity of the grid, ranging from 0.0 (fully transparent) to 1.0 (fully opaque).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.BoldEvery">
            <summary>
            Gets or sets how often to bold the grid lines. For example, a value of 5 will bold every 5th line.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.StrokeWidth">
            <summary>
            Gets or sets the width of the grid lines, in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.DashArray">
            <summary>
            Gets or sets the dash array for the grid lines, allowing for dashed or dotted lines.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.ShowAxes">
            <summary>
            Gets or sets a value indicating whether to show the X and Y axes in the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.Margin">
            <summary>
            Gets or sets the margin around the grid, in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridOptions.PointRadius">
            <summary>
            Gets or sets the radius of the points when the display mode is set to dots, in pixels.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureGridOptions.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.MenuOptions">
            <summary>
            Represents the options for displaying the menu in the Signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.IsVisible">
            <summary>
            Gets or sets a value indicating whether the menu is visible.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.ShowExport">
            <summary>
            Gets or sets a value indicating whether the export button is shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.ShowUndo">
            <summary>
            Gets or sets a value indicating whether the undo button is shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.ShowRedo">
            <summary>
            Gets or sets a value indicating whether the redo button is shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.ShowClear">
            <summary>
            Gets or sets a value indicating whether the clear button is shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.ShowEraser">
            <summary>
            Gets or sets a value indicating whether the eraser button is shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.MenuOptions.ShowCustomOptions">
            <summary>
            Gets or sets a value indicating whether the custom options button is shown.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ShadowOptions">
            <summary>
            Represents configuration options for applying a shadow effect.
            </summary>
            <remarks>This class provides properties to control the appearance of a shadow, including its visibility, 
            color, blur radius, and offsets. These options can be used to customize the shadow effect  for visual
            elements.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShadowOptions.Enabled">
            <summary>
            Gets or sets a value indicating whether the shadow effect is enabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShadowOptions.Color">
            <summary>
            Gets or sets the color of the shadow. This can be any valid CSS color value, such as a hex code, RGB, or RGBA.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShadowOptions.Blur">
            <summary>
            Gets or sets the blur radius of the shadow. A higher value results in a more blurred shadow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShadowOptions.OffsetX">
            <summary>
            Gets or sets the horizontal offset of the shadow. Positive values move the shadow to the right, while negative values move it to the left.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ShadowOptions.OffsetY">
            <summary>
            Gets or sets the vertical offset of the shadow. Positive values move the shadow down, while negative values move it up.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ShadowOptions.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureEraserOptions">
            <summary>
            Represents the eraser options for the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.Size">
            <summary>
            Gets or sets the size of the eraser in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.Shape">
            <summary>
            Gets or sets the shape of the eraser. Can be either Circle or Square.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.Opacity">
            <summary>
            Gets or sets the opacity of the eraser, ranging from 0.0 (fully transparent) to 1.0 (fully opaque).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.SoftEdges">
            <summary>
            Gets or sets a value indicating whether the eraser should have soft edges.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.Cursor">
            <summary>
            Gets or sets the cursor style when the eraser is active. This can be any valid CSS cursor value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.CursorCss">
            <summary>
            Gets the CSS representation of the cursor style.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserOptions.PartialErase">
            <summary>
            Gets or sets a value indicating whether the eraser performs a partial erase.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureEraserOptions.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureExportOptions">
            <summary>
            Represents the export options for the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureExportOptions.Format">
            <summary>
            Gets or sets the image format for exporting the signature. Default is PNG.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureExportOptions.Quality">
            <summary>
            Gets or sets the quality of the exported image, ranging from 0 to 100.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureExportOptions.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureOptions">
            <summary>
            Represents the configuration options for a signature component, including settings for the pen, eraser, grid, and
            watermark.
            </summary>
            <remarks>This class provides a collection of customizable options that control the behavior and appearance of
            a signature component. Use the properties to configure specific aspects such as the pen style, eraser functionality,
            grid layout, and watermark display.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOptions.Pen">
            <summary>
            Gets or sets the options for configuring the pen used in the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOptions.Eraser">
            <summary>
            Gets or sets the options for configuring the eraser used in the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOptions.Grid">
            <summary>
            Gets or sets the options for configuring the grid displayed in the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOptions.Watermark">
            <summary>
            Gets or sets the options for configuring the watermark displayed in the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureOptions.Export">
            <summary>
            Gets or sets the options for configuring the export settings of the signature component.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignaturePenOptions">
            <summary>
            Represents the pen options for the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.Color">
            <summary>
            Gets or sets the color of the pen. This can be any valid CSS color value, such as a hex code, RGB, or RGBA.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.BaseWidth">
            <summary>
            Gets or sets the base width of the pen stroke in pixels. This is the default width when pressure sensitivity is not applied.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.DashArray">
            <summary>
            Gets or sets the minimum width of the pen stroke in pixels. This is the thinnest the stroke can be when pressure sensitivity is applied.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.PressureEnabled">
            <summary>
            Gets or sets a value indicating whether pressure sensitivity is enabled. When true, the stroke width will vary based on the pressure applied (if supported by the input device).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.Smoothing">
            <summary>
            Gets or sets a value indicating whether smoothing is applied to the pen strokes. When true, the strokes will be smoothed to reduce jitter and create a more natural appearance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.Opacity">
            <summary>
            Gets or sets the opacity of the pen strokes, ranging from 0.0 (fully transparent) to 1.0 (fully opaque).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.LineCap">
            <summary>
            Gets or sets the shape of the ends of the pen strokes. Can be either Butt, Round, or Square.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.LineJoin">
            <summary>
            Gets or sets the shape of the corners where two pen strokes meet. Can be either Bevel, Round, or Miter.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenOptions.Shadow">
            <summary>
            Gets or sets the shadow options for the pen strokes.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignaturePenOptions.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions">
            <summary>
            Represents the watermark options for the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Text">
            <summary>
            Gets or sets the text to be displayed as the watermark. If both Text and ImageUrl are provided, the image will take precedence.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.ImageUrl">
            <summary>
            Gets or sets the URL of the image to be used as the watermark. If both Text and ImageUrl are provided, the image will take precedence.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Opacity">
            <summary>
            Gets or sets the opacity of the watermark, ranging from 0.0 (fully transparent) to 1.0 (fully opaque).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.FontFamily">
            <summary>
            Gets or sets the font family for the watermark text. This can be any valid CSS font-family value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.FontSize">
            <summary>
            Gets or sets the font size for the watermark text, in pixels.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.FontWeight">
            <summary>
            Gets or sets the font weight for the watermark text. This can be any valid CSS font-weight value, such as "normal", "bold", or a numeric value like "400" or "700".
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Color">
            <summary>
            Gets or sets the color of the watermark text. This can be any valid CSS color value, such as a hex code, RGB, or RGBA.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Rotation">
            <summary>
            Gets or sets the rotation angle of the watermark text or image, in degrees. Positive values rotate clockwise, while negative values rotate counterclockwise.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Position">
            <summary>
            Gets or sets the position of the watermark within the signature area, represented as a Point with X and Y coordinates (in percentage). The default position is centered at (50, 50).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Repeat">
            <summary>
            Gets or sets a value indicating whether the watermark should be repeated across the signature area. If true, the watermark will be tiled; if false, it will appear only once at the specified position.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.TextAlign">
            <summary>
            Gets or sets the vertical alignment of the watermark text. This can be "start", "middle", or "end".
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.LetterSpacing">
            <summary>
            Gets or sets the letter spacing for the watermark text, in pixels.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureWatermarkOptions.Reset">
            <summary>
            Resets all properties to their default values.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureEraserPanel">
            <summary>
            Represents a panel for erasing a signature with configurable content options.
            </summary>
            <remarks>This component allows users to specify the content options for erasing a signature. The <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureEraserPanel.Content"/> property can be used to configure the export settings.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureEraserPanel.Content">
            <summary>
            Gets or sets the content options for erasing a signature.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureExportPanel">
            <summary>
            Represents a panel for exporting a signature with configurable content options.
            </summary>
            <remarks>This component allows users to specify the content options for exporting a signature. The <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureExportPanel.Content"/> property can be used to configure the export settings.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureExportPanel.Content">
            <summary>
            Gets or sets the content options for exporting a signature.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureGridPanel">
            <summary>
            Represents a panel for creating a grid on a signature with configurable content options.
            </summary>
            <remarks>This component allows users to specify the content options for creating a grid on a signature. The <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureGridPanel.Content"/> property can be used to configure the grid settings.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureGridPanel.Content">
            <summary>
            Gets or sets the content options for exporting a signature.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignaturePenPanel">
            <summary>
            Represents a panel for configuring the signature pen settings.
            </summary>
            <remarks>This component allows users to customize the appearance and behavior of the signature pen by setting
            various options through the <see cref="P:FluentUI.Blazor.Community.Components.SignaturePenPanel.Content"/> property.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenPanel.Content">
            <summary>
            Gets or sets the options for configuring the signature pen.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignaturePenPanel.GetFormat(System.String,System.Double)">
            <summary>
            Gets the format string for displaying value in the good format.
            </summary>
            <param name="format">Format of the value.</param>
            <param name="value">Value to format.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureWatermarkPanel">
            <summary>
            Represents a panel for watermarking a signature with configurable content options.
            </summary>
            <remarks>This component allows users to specify the content options for watermarking a signature. The <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureWatermarkPanel.Content"/> property can be used to configure the watermark settings.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureWatermarkPanel.Content">
            <summary>
            Gets or sets the content options for creating a watermark on a signature.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureWatermarkPanel.GetFormat(System.String,System.Double)">
            <summary>
            Gets the format string for displaying value in the good format.
            </summary>
            <param name="format">Format of the value.</param>
            <param name="value">Value to format.</param>
            <returns>Returns the formatted value.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.Signature">
            <summary>
            Represents a signature component that allows users to draw and capture signatures.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Signature._module">
            <summary>
            Represents the JavaScript module reference used for interacting with JavaScript functions.
            </summary>
            <remarks>This field holds a reference to a JavaScript module loaded via the JavaScript interop system.
            It may be <see langword="null"/> if the module has not been initialized or has been disposed.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Signature._gridLayer">
            <summary>
            Represents the grid layer component used for displaying a grid background.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Signature._inkLayer">
            <summary>
            Represents the ink layer component used for capturing and displaying user-drawn signatures.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.Signature._overlayLayer">
            <summary>
            Represents the overlay layer component used for displaying additional overlays on top of the signature.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.Signature"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Signature.JS">
            <summary>
            Gets or sets the JavaScript runtime for interop calls.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Signature.ObserverService">
            <summary>
            Gets or sets the observer service for managing observers.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Signature.Options">
            <summary>
            Gets or sets the signature options for configuring the signature component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.Signature.InternalClass">
            <summary>
            Gets the internal CSS class for the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.ExportSvgAsync">
            <summary>
            Exports the current signature as an SVG string.
            </summary>
            <returns>Returns a task which exports the svg as a string when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.ClearAsync">
            <summary>
            Clears the current signature from the ink layer.
            </summary>
            <returns>Returns a task which clear the signature.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.UndoAsync">
            <summary>
            Undoes the last action on the ink layer.
            </summary>
            <returns>Returns a task which undo the last action on the ink layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.RedoAsync">
            <summary>
            Redos the last undone action on the ink layer.
            </summary>
            <returns>Returns a task which redo the last action on the ink layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.SetEraseModeAsync(System.Boolean)">
            <summary>
            Sets the erase mode on the ink layer.
            </summary>
            <param name="enabled">Value indicating if the erase mode is enabled.</param>
            <returns>Returns a task which set the erase mode when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.RefreshGridAsync">
            <summary>
            Refreshes the grid layer to reflect any changes in options or state.
            </summary>
            <returns>Returns a task which refreshs the grid when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.RefreshInkAsync">
            <summary>
            Refreshes the ink layer to reflect any changes in options or state.
            </summary>
            <returns>Returns a task which refreshs the ink layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.RefreshOverlayAsync">
            <summary>
            Refreshes the overlay layer to reflect any changes in options or state.
            </summary>
            <returns>Returns a task which refreshs the overlay layer when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.OnResizedAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.OnIntersectAsync(FluentUI.Blazor.Community.Components.IntersectionEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.OnMeasuredAsync(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.Signature.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureExporter">
            <summary>
            Exports a signature in the specified format, returning the file name, content type, and binary data.    
            </summary>
            <remarks>The export format is determined by the <see cref="P:FluentUI.Blazor.Community.Components.SignatureExportOptions.Format"/> property: <list
            type="bullet"> <item><description>If the format is <see cref="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Svg"/>, the method returns the
            SVG data as-is.</description></item> <item><description>If the format is <see cref="F:FluentUI.Blazor.Community.Components.SignatureImageFormat.Pdf"/>, the
            SVG is converted to a PDF document.</description></item> <item><description>For other image formats (e.g., PNG,
            JPEG), the SVG is converted to the specified format using the provided quality setting.</description></item>
            </list></remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureExporter.Export(FluentUI.Blazor.Community.Components.SignatureExportOptions,System.String)">
            <summary>
            Exports a signature image in the specified format.
            </summary>
            <remarks>The method supports exporting the signature in various formats, including SVG, PDF, and
            common image formats such as PNG, JPEG, BMP, GIF, TIFF, and WebP. The content type and file extension are
            determined based on the selected format. For SVG format, the method directly returns the input SVG data. For PDF
            and other image formats, the method converts the SVG data using the appropriate conversion logic.</remarks>
            <param name="options">The export options, including the desired image format and quality settings.</param>
            <param name="svg">The SVG representation of the signature to be exported. Cannot be null or empty.</param>
            <returns>A tuple containing the filename, content type, and binary data of the exported signature image. The filename
            includes the appropriate file extension based on the selected format.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureExportEventArgs">
            <summary>
            Provides data for an event that occurs when a signature is exported.
            </summary>
            <remarks>This class contains information about the exported signature, including the file name, content type,
            and binary data.</remarks>
            <param name="FileName">The name of the file to which the signature is exported. This value cannot be null or empty.</param>
            <param name="ContentType">The MIME type of the exported signature file, such as "application/pdf" or "image/png".</param>
            <param name="Data">The binary data of the exported signature. This value cannot be null.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureExportEventArgs.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            Provides data for an event that occurs when a signature is exported.
            </summary>
            <remarks>This class contains information about the exported signature, including the file name, content type,
            and binary data.</remarks>
            <param name="FileName">The name of the file to which the signature is exported. This value cannot be null or empty.</param>
            <param name="ContentType">The MIME type of the exported signature file, such as "application/pdf" or "image/png".</param>
            <param name="Data">The binary data of the exported signature. This value cannot be null.</param>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureExportEventArgs.FileName">
            <summary>The name of the file to which the signature is exported. This value cannot be null or empty.</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureExportEventArgs.ContentType">
            <summary>The MIME type of the exported signature file, such as "application/pdf" or "image/png".</summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureExportEventArgs.Data">
            <summary>The binary data of the exported signature. This value cannot be null.</summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureLabels">
            <summary>
            Represents a collection of localized labels used for UI elements in a signature-related application.
            </summary>
            <remarks>This record provides a set of default labels in English, as well as predefined localized labels for
            other languages, such as French. The labels can be customized by setting the properties to desired values.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Default">
            <summary>
            Gets the default instance of <see cref="T:FluentUI.Blazor.Community.Components.SignatureLabels"/> with labels in English.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.French">
            <summary>
            Gets an instance of <see cref="T:FluentUI.Blazor.Community.Components.SignatureLabels"/> with labels localized in French.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Export">
            <summary>
            Gets or sets the label for the export button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Undo">
            <summary>
            Gets or sets the label for the undo button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Redo">
            <summary>
            Gets or sets the label for the redo button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Clear">
            <summary>
            Gets or sets the label for the clear button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Eraser">
            <summary>
            Gets or sets the label for the eraser button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Pen">
            <summary>
            Gets or sets the label for the pen button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Settings">
            <summary>
            Gets or sets the label for the settings button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.ExportSettings">
            <summary>
            Gets or sets the label for the export settings section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Cancel">
            <summary>
            Gets or sets the label for the cancel button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.PenSettings">
            <summary>
            Gets or sets the label for the pen settings section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserSettings">
            <summary>
            Gets or sets the label for the eraser settings section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridSettings">
            <summary>
            Gets or sets the label for the grid settings section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkSettings">
            <summary>
            Gets or sets the label for the watermark settings section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.Apply">
            <summary>
            Gets or sets the label for the apply.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.ExportFormatLabel">
            <summary>
            Gets or sets the label for the export format selection.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.ExportQualityLabel">
            <summary>
            Gets or sets the label for the export quality selection.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.BackgroundGridColorLabel">
            <summary>
            Gets or sets the label for the background grid color.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridColorLineLabel">
            <summary>
            Gets or sets the label for the grid line color.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridCellSizeLabel">
            <summary>
            Gets or sets the label for the grid cell size.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridOpacityLabel">
            <summary>
            Gets or sets the label for the grid opacity.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.BoldEveryLabel">
            <summary>
            Gets or sets the label for the Nth line bolding option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.StrokeWidthLabel">
            <summary>
            Gets or sets the label for the width of the stroke.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.MarginLabel">
            <summary>
            Gets or sets the label for the margin.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.PointRadiusLabel">
            <summary>
            Gets or sets the label for the point radius.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.ShowAxesLabel">
            <summary>
            Gets or sets the label for the axes visibility option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridDisplayModeLabel">
            <summary>
            Gets or sets the label for the grid display mode option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridDisplayModeNoneLabel">
            <summary>
            Gets or sets the label for the grid display mode "None" option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridDisplayModeLinesLabel">
            <summary>
            Gets or sets the label for the grid display mode "Lines" option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.GridDisplayModeDotsLabel">
            <summary>
            Gets or sets the label for the grid display mode "Dots" option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserShapeLabel">
            <summary>
            Gets or sets the label for the eraser shape option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserShapeCircleLabel">
            <summary>
            Gets or sets the label for the eraser shape "Circle" option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserShapeSquareLabel">
            <summary>
            Gets or sets the label for the eraser shape "Square" option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserSizeLabel">
            <summary>
            Gets or sets the label for the eraser size option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserOpacityLabel">
            <summary>
            Gets or sets the label for the eraser opacity option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserSoftEdgeLabel">
            <summary>
            Gets or sets the label for the eraser soft edges option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.EraserPartialEraseLabel">
            <summary>
            Gets or sets the label for the eraser partial erase option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.PreviewPenLabel">
            <summary>
            Gets or sets the label for the pen preview section.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.PenColorLabel">
            <summary>
            Gets or sets the label for the pen color selection.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.PenOpacityLabel">
            <summary>
            Gets or sets the label for the pen opacity selection.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.PressureEnabledLabel">
            <summary>
            Gets or sets the label for the pressure sensitivity enable option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.SmoothingLabel">
            <summary>
            Gets or sets the label for the smoothing enable option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.ShadowEnabledLabel">
            <summary>
            Gets or sets the label for the shadow enable option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.ShadowColorLabel">
            <summary>
            Gets or sets the label for the shadow color option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkTextLabel">
            <summary>
            Gets or sets the label for the watermark text option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkColorLabel">
            <summary>
            Gets or sets the label for the watermark text color option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkFontSizeLabel">
            <summary>
            Gets or sets the label for the watermark font size option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkOpacityLabel">
            <summary>
            Gets or sets the label for the watermark opacity option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkRotationLabel">
            <summary>
            Gets or sets the label for the watermark rotation option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermarkLetterSpacingLabel">
            <summary>
            Gets or sets the label for the watermark letter spacing option.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureLabels.WatermakRepeatLabel">
            <summary>
            Gets or sets the label for the watermark repeat option.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignatureMenu">
            <summary>
            Represents the menu component for the signature component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureMenu._isMultiSettingsPopoverOpen">
            <summary>
            Value indicating whether the multi-settings popover is open.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureMenu._isPenActive">
            <summary>
            Value indicating whether the pen is active.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SignatureMenu._renderLabel">
            <summary>
            Renders the label for a button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SignatureMenu"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.Options">
            <summary>
            Gets or sets the menu options.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.IsMobile">
            <summary>
            Gets or sets a value indicating whether the device is mobile.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.Labels">
            <summary>
            Gets or sets the labels for the menu buttons.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnUndoClicked">
            <summary>
            Gets or sets the callback for when the undo button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnRedoClicked">
            <summary>
            Gets or sets the callback for when the redo button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnClearClicked">
            <summary>
            Gets or sets the callback for when the clear button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnEraserClicked">
            <summary>
            Gets or sets the callback for when the eraser button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnPenClicked">
            <summary>
            Gets or sets the callback for when the pen button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnExportClicked">
            <summary>
            Gets or sets the callback for when the settings button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnPenSettingsClicked">
            <summary>
            Gets or sets the callback for when the pen settings button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnEraserSettingsClicked">
            <summary>
            Gets or sets the callback for when the eraser settings button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnGridSettingsClicked">
            <summary>
            Gets or sets the callback for when the grid settings button is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnWatermarkSettingsClicked">
            <summary>
            Gets or sets the callback for when the watermark settings button is clicked.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnExportClickedAsync">
            <summary>
            Occurs when the export button is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnPenOrEraserClickedAsync">
            <summary>
            Occurs when the pen button is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnUndoClickedAsync">
            <summary>
            Occurs when the undo button is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnRedoClickedAsync">
            <summary>
            Occurs when the redo button is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnSettingsClicked">
            <summary>
            Occurs when the settings button is clicked.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnGridSettingsClickedAsync">
            <summary>
            Handles the event triggered when the grid settings button is clicked.
            </summary>
            <remarks>This method closes the multi-settings popover and invokes the <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnGridSettingsClicked"/> delegate if it has been assigned. Ensure that the delegate is set if additional
            actions are required when the grid settings button is clicked.</remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnWatermarkSettingsClickedAsync">
            <summary>
            Handles the event triggered when the watermark settings option is clicked.
            </summary>
            <remarks>This method closes the multi-settings popover and invokes the <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnWatermarkSettingsClicked"/> callback  if it has been assigned. Ensure that the callback is properly set
            to handle the event.</remarks>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnPenSettingsClickedAsync">
            <summary>
            Handles the event triggered when the pen settings button is clicked.
            </summary>
            <remarks>This method closes the multi-settings popover and invokes the <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnPenSettingsClicked"/> callback  if it has been assigned. Ensure that the callback is properly set to
            handle the event.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnEraserSettingsClickedAsync">
            <summary>
            Handles the event triggered when the eraser settings button is clicked.
            </summary>
            <remarks>This method closes the multi-settings popover and invokes the <see
            cref="P:FluentUI.Blazor.Community.Components.SignatureMenu.OnEraserSettingsClicked"/> callback if it has been assigned. Ensure that the callback is properly set to
            handle the event.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SignatureMenu.OnClearClickedAsync">
            <summary>
            Occurs when the clear button is clicked.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SignaturePenPreviewer">
            <summary>
            Represents a previewer for the signature pen settings.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SignaturePenPreviewer.Options">
            <summary>
            Gets or sets the options for configuring the signature pen.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial">
            <summary>
            Represents a sleek dial.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._isOpen">
            <summary>
            Value indicating if the dial is open.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._firstRender">
            <summary>
            Represents if it's the first render.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._correctRadialSettings">
            <summary>
            Represents the correct radial settings to position the items on the radial panel.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._preventDefault">
            <summary>
            Value indicating if the click is prevented.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._linearDirectionChanged">
            <summary>
            Value indicating if a direction change in linear mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._popup">
            <summary>
            Represents the popup.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._floatingButton">
            <summary>
            Represents the floating button.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._renderText">
            <summary>
            Represents the fragment to render text.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._module">
            <summary>
            Represents the javascript module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._dotNetObjectReference">
            <summary>
            Represents the reference of the current dot net object.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial.JavascriptFilename">
            <summary>
            Represents the javascript file.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSleekDial._preventDefaultKeys">
            <summary>
            Represents the default keys to not prevent.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.ItemTemplate">
            <summary>
            Gets or sets the item template.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Mode">
            <summary>
            Gets or sets the rendering mode of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Position">
            <summary>
            Gets or sets the position of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Target">
            <summary>
            Gets or sets the target of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Disabled">
            <summary>
            Gets or sets if the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/> is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.CloseIcon">
            <summary>
            Gets or sets the icon to close the popup.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OpenIcon">
            <summary>
            Gets or sets the icon to open the popup.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OpensOnHover">
            <summary>
            Gets or sets if the popup opens on hover.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Text">
            <summary>
            Gets or sets the text of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Direction">
            <summary>
            Gets or sets the linear direction of the items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.ItemRendered">
            <summary>
            Gets or sets the callback when an item is rendered.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.IsVisibleChanged">
            <summary>
            Gets or sets the callback when the visibility has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Opened">
            <summary>
            Gets or sets the callback when the popup is opened.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Closed">
            <summary>
            Gets or sets the callback when the popup is closed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Opening">
            <summary>
            Gets or sets the callback when the popup is opening.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Closing">
            <summary>
            Gets or sets the callback when the popup is closing.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.IsModal">
            <summary>
            Gets or sets a value indicating if the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/> is modal.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.JSRuntime">
            <summary>
            Gets or sets the javascript runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.IsOpen">
            <summary>
            Gets if the popup is open.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.InternalItems">
            <summary>
            Gets the <see cref="T:FluentUI.Blazor.Community.Components.SleekDialItem"/> inside this instance of <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Viewer">
            <summary>
            Gets or sets the viewer of the dial.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.FocusedIndex">
            <summary>
            Gets or sets the focused index.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.RadialSettings">
            <summary>
            Gets or sets the settings of the radial menu.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.AnimationSettings">
            <summary>
            Gets or sets the settings of the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.StayOpen">
            <summary>
            Gets or sets a value indicating if the dial stay open when an item is clicked.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.HideMode">
            <summary>
            Gets or sets the hide mode of the dial.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.FloatingButtonId">
            <summary>
            Gets the identifier of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFloatingButton"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.InternalClass">
            <summary>
            Gets the internal css.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.CorrectRadialSettings">
            <summary>
            Represents the correct radial settings after correction inside the popup.
            </summary>
        </member>
        <member name="E:FluentUI.Blazor.Community.Components.FluentCxSleekDial.RadialSettingsChanged">
            <summary>
            Event raised when a radial settings has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.IsVisible">
            <summary>
            Gets a value indicating if the dial is visible.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OnClickAsync">
            <summary>
            Occurs on a click on the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxFloatingButton"/>.
            </summary>
            <returns>Returns a task which show or hide the dial when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.ShowOrHidePopupAsync(System.Boolean)">
            <summary>
            Shows or hides the dial in an asynchronous way.
            </summary>
            <param name="isOpen">Value indicating if the dial is open or hide.</param>
            <returns>Returns a task which hides or shows the dial when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.ShowOrHidePopupInternalAsync(System.Boolean,System.Boolean)">
            <summary>
            Shows or hides the dial in an asynchronous way.
            </summary>
            <param name="isOpen">Value indicating if the dial is open or hide.</param>
            <param name="stayOpen">Value indicating if the dial stay open when the item is clicked.</param>
            <returns>Returns a task which shows or hides the popup when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OnKeyDownHandlerAsync(Microsoft.FluentUI.AspNetCore.Components.FluentKeyCodeEventArgs)">
            <summary>
            Occurs when a key is tapped.
            </summary>
            <param name="e">Event args associated to the method.</param>
            <returns>Returns a task which handles the pressed key when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.UpdatePopupPositionAsync">
            <summary>
            Update the position of the popup in an asynchronous way.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OnAnimationCompletedAsync(System.Boolean)">
            <summary>
            Occurs when an animation is completed.
            </summary>
            <param name="isOpen">Value indicating if the dial is shown or hidden.</param>
            <returns>Return a task which rerender the component when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.AddChild(FluentUI.Blazor.Community.Components.SleekDialItem)">
            <summary>
            Adds a child into the component.
            </summary>
            <param name="value">Item to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.RemoveChild(FluentUI.Blazor.Community.Components.SleekDialItem)">
            <summary>
            Removes a child from the component.
            </summary>
            <param name="value">Item to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OnCreatedAsync(FluentUI.Blazor.Community.Components.SleekDialItem)">
            <summary>
            Occurs when an item is created.
            </summary>
            <param name="value">Represents the created item.</param>
            <returns>Returns a task which invokes the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSleekDial.ItemRendered"/> callback.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.FocusAsync">
            <summary>
            Focus the selected index.
            </summary>
            <returns>Returns a task which focus the selected element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.OnAfterRender(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSleekDial.Refresh">
            <summary>
            Refreshes the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialAnimation">
            <summary>
            Represents the available animations for opening and closing the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialAnimation.None">
            <summary>
            None animation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialAnimation.Fade">
            <summary>
            Fade animation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialAnimation.FadeZoom">
            <summary>
            Fade and zoom animation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialAnimation.Zoom">
            <summary>
            Zoom animation.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialAnimationSettings">
            <summary>
            Represents the settings for an animation. 
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialAnimationSettings.Duration">
            <summary>
            Gets or sets the duration of the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialAnimationSettings.Delay">
            <summary>
            Gets or sets the delay of the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialAnimationSettings.Animation">
            <summary>
            Gets or sets the animation to play.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialHideMode">
            <summary>
            Represents the hide mode for a SleekDial component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialHideMode.None">
            <summary>
            SleekDial is always visible.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialHideMode.WhenEmpty">
            <summary>
            SleekDial is hidden when there are no items to display.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialHideMode.WhenNoVisible">
            <summary>
            SleekDial is hidden when there are no visible items to display.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialHideMode.WhenEmptyOrNoVisible">
            <summary>
            SleekDial is hidden when there are no items or no visible items to display.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialItem">
            <summary>
            Represents the item of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialItem._isVisibleChanged">
            <summary>
            Represents a value if the <see cref="P:FluentUI.Blazor.Community.Components.SleekDialItem.IsVisible"/> property has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Parent">
            <summary>
            Gets or sets the parent of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Disabled">
            <summary>
            Gets or sets if the item is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Icon">
            <summary>
            Gets or sets the icon of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Text">
            <summary>
            Gets or sets the text of the item.
            </summary>
            <remarks>In <see cref="F:FluentUI.Blazor.Community.Components.SleekDialMode.Radial"/>, the text isn't rendered.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Title">
            <summary>
            Gets or sets the title of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.OnClick">
            <summary>
            Gets or sets the callback to raise on a click on the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.IsVisible">
            <summary>
            Gets or sets if the item is visible.
            </summary>
            <remarks>
            The value is <see langword="true"/> by default.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.IsVisibleChanged">
            <summary>
            Gets or sets the callback to raise when the <see cref="P:FluentUI.Blazor.Community.Components.SleekDialItem.IsVisible"/> property changes.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Index">
            <summary>
            Gets the index of the item inside the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItem.Angle">
            <summary>
            Gets or sets the angle of the item.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItem.OnClickAsync">
            <summary>
            Occurs when the item is clicked.
            </summary>
            <returns>Returns a task which raise the <see cref="P:FluentUI.Blazor.Community.Components.SleekDialItem.OnClick"/> callback when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItem.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItem.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItem.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItem.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItem.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialItemView">
            <summary>
            Reprensents the renderer of a <see cref="T:FluentUI.Blazor.Community.Components.SleekDialItem"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialItemView._renderText">
            <summary>
            Represents the render fragment to render the text.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItemView.Index">
            <summary>
            Gets or sets the index of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItemView.Parent">
            <summary>
            Gets or sets the parent of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItemView.Item">
            <summary>
            Gets or sets the item to render.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItemView.InternalClass">
            <summary>
            Gets the css of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItemView.InternalStyle">
            <summary>
            Gets the style of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialItemView.InternalButtonStyle">
            <summary>
            Gets the style of the button.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItemView.UpdateAdditionalAttributes">
            <summary>
            Update the additional attributes.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItemView.OnClickAsync">
            <summary>
            Occurs when the item is clicked.
            </summary>
            <returns>Returns a task which invoke the <see cref="P:FluentUI.Blazor.Community.Components.SleekDialItem.OnClick"/> callback when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItemView.GetAngle">
            <summary>
            Gets the angle of the item.
            </summary>
            <returns>Returns the angle of the item in degrees.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItemView.OnRadialSettingsChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when a settings changed.
            </summary>
            <param name="sender">Object which invokes the method.</param>
            <param name="e">Event assoc</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItemView.OnInitialized">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialItemView.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialLinearDirection">
            <summary>
            Represents the direction of the items of a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialLinearDirection.Default">
            <summary>
            Default direction from the position of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialLinearDirection.Up">
            <summary>
            Direction to the up.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialLinearDirection.Down">
            <summary>
            Direction to the down.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialLinearDirection.Left">
            <summary>
            Direction to the left.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialLinearDirection.Right">
            <summary>
            Direction to the right.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialMode">
            <summary>
            Represents the rendering mode of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialMode.Linear">
            <summary>
            The items are rendered in a linear way.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialMode.Radial">
            <summary>
            The items are rendered in a radial way.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialPopup">
            <summary>
            Represents the popup of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial" /> component.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementMove">
            <summary>
            Direction of the movement.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementMove.Up">
            <summary>
            Move to the up.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementMove.Down">
            <summary>
            Move to the down.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementMove.Left">
            <summary>
            Move to the left.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementMove.Right">
            <summary>
            Move to the right.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions">
            <summary>
            Represents the options for a linear menu.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.IsVertical">
            <summary>
            Gets or sets a value indicating if the popup is vertical.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.IsTop">
            <summary>
            Gets or sets a value indicating if the floating button is set to the top.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.IsLeft">
            <summary>
            Gets or sets a value indicating if the floating button is set to the left.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.IsCenter">
            <summary>
            Gets or sets a value indicating if the floating button is set to the center.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.IsMiddle">
            <summary>
            Gets or sets a value indicating if the floating button is set to the middle.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.IsFixed">
            <summary>
            Gets or sets a value indicating if the floating button is fixed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.LinearPositionOptions.Direction">
            <summary>
            Gets or sets a value indicating if the direction of the popup.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions">
            <summary>
            Represents the options for a radial menu.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsTop">
            <summary>
            Gets or sets a value indicating if the floating button is set to the top.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsBottom">
            <summary>
            Gets or sets a value indicating if the floating button is set to the bottom.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsLeft">
            <summary>
            Gets or sets a value indicating if the floating button is set to the left.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsCenter">
            <summary>
            Gets or sets a value indicating if the floating button is set to the center.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsMiddle">
            <summary>
            Gets or sets a value indicating if the floating button is set to the middle.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsFixed">
            <summary>
            Gets or sets a value indicating if the floating button is fixed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionOptions.IsRight">
            <summary>
            Gets or sets a value indicating if the floating button is set to the right.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._module">
            <summary>
            Represents the javascript module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup.JavascriptFilename">
            <summary>
            Represents the javascript file to load.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._linearPositionOptions">
            <summary>
            Represents the options for the linear menu.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._radialPositionOptions">
            <summary>
            Represents the options for the radial menu.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._popupReference">
            <summary>
            Represents the reference of the popup.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._isLinear">
            <summary>
            Represents a value indicating if the menu is linear.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._xOffset">
            <summary>
            Represents the X offset of the popup.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._yOffset">
            <summary>
            Represents the Y offset of the popup.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._width">
            <summary>
            Represents the width of the popup.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialPopup._height">
            <summary>
            Represents the height of the popup.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SleekDialPopup"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.JSRuntime">
            <summary>
            Gets or sets the javascript runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.IsOpen">
            <summary>
            Gets or sets a value indicating if the dial is opened or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.Parent">
            <summary>
            Gets or sets the parent of the <see cref="T:FluentUI.Blazor.Community.Components.SleekDialPopup"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.OnAnimationCompleted">
            <summary>
            Gets or sets the callback when the animation is completed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.InternalCss">
            <summary>
            Gets the css of the popup.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.InternalStyle">
            <summary>
            Gets the internal style of the popup.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialPopup.GlobalState">
            <summary>
            Gets or sets the global state.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.OnOverlayCloseAsync">
            <summary>
            Occurs when the overlay is closed.
            </summary>
            <returns>Returns a task which closes the popup when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.HandleKeyAsync(Microsoft.FluentUI.AspNetCore.Components.FluentKeyCodeEventArgs)">
            <summary>
            Focus the current element.
            </summary>
            <param name="e">Event args associated to the component.</param>
            <returns>Returns a task which focus the element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusFirstElementAsync">
            <summary>
            Focus the first element.
            </summary>
            <returns>Returns a task which focus the first element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusLastElementAsync">
            <summary>
            Focus the last element.
            </summary>
            <returns>Returns a task which focus the last element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusPreviousElementAsync">
            <summary>
            Focus the previous element.
            </summary>
            <returns>Returns a task which focus the previous element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementAsync(FluentUI.Blazor.Community.Components.SleekDialPopup.FocusElementMove)">
            <summary>
            Focus the element.
            </summary>
            <param name="value">Direction of the focus.</param>
            <returns>Returns a task which focus the element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.FocusNextElementAsync">
            <summary>
            Focus the next element.
            </summary>
            <returns>Returns a task which focus the next element when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.InvokeScriptAsync(System.String,System.Object[])">
            <summary>
            Invokes the specified script.
            </summary>
            <param name="method">Method to invoke.</param>
            <param name="args">Argument associated to the method.</param>
            <returns>Returns a task which invokes the script when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.OnKeyDownHandlerAsync(Microsoft.FluentUI.AspNetCore.Components.FluentKeyCodeEventArgs)">
            <summary>
            Occurs on a keydown.
            </summary>
            <param name="e">Event associated to the method.</param>
            <returns>Returns a task which handles the key when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.UpdatePositionAsync">
            <summary>
            Updates the position of the popup.
            </summary>
            <returns>Returns a task which update the position of the popup.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.UpdateOptions">
            <summary>
            Update the options of the menu.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.GetRadialSettings">
            <summary>
            Gets the settings of the radial menu.
            </summary>
            <returns>Returns the settings of the radial menu.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.CheckAngleRange(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.SleekDialRadialSettings,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check the angle to place the items correctly.
            </summary>
            <param name="startAngle">Start angle in degrees.</param>
            <param name="endAngle">End angle in degrees.</param>
            <param name="settings">Settings of the radial menu.</param>
            <param name="isClock">Value indicating if the menu is clockwise.</param>
            <param name="minAngle">Minimum angle allowed.</param>
            <param name="maxAngle">Maximum angle allowed.</param>
            <param name="reverse">Value indicating if the angle are reversed.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.CheckAngle(System.Int32,System.Boolean,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Check the current angle.
            </summary>
            <param name="value">Angle to check.</param>
            <param name="isClock">Value indicating if the menu is clockwise or counterclockwise.</param>
            <param name="minAngle">Minimum angle allowed.</param>
            <param name="maxAngle">Maximum angle allowed.</param>
            <param name="reverse">Value indicating if the angle is reversed or not.</param>
            <returns>Returns the allowed angle.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.AnimateOpenAsync(FluentUI.Blazor.Community.Components.SleekDialAnimationSettings)">
            <summary>
            Starts the opening animation.
            </summary>
            <param name="animationSettings">Settings of the animation.</param>
            <returns>Returns a task which starts the opening animation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.AnimateCloseAsync(FluentUI.Blazor.Community.Components.SleekDialAnimationSettings)">
            <summary>
            Starts the closing animation.
            </summary>
            <param name="animationSettings">Settings of the animation.</param>
            <returns>Returns a task which starts the closing animation.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.OnAnimationCompletedAsync(System.Boolean)">
            <summary>
            Occurs when the animation is completed.
            </summary>
            <param name="isOpen">Value indicating if the dial is opened or closed.</param>
            <returns>Returns a task which invokes <see cref="P:FluentUI.Blazor.Community.Components.SleekDialPopup.OnAnimationCompleted"/> when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialPopup.RadialPositionUpdated(System.Drawing.RectangleF)">
            <summary>
            Occurs when the position of the radial menu is updated.
            </summary>
            <param name="rectangle">Rectangle which contains the position of the radial menu.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialRadialDirection">
            <summary>
            Represents the direction of the items when the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/> is set to radial mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialRadialDirection.Clockwise">
            <summary>
            The items are rendered in clockwise mode.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SleekDialRadialDirection.Counterclockwise">
            <summary>
            The items are rendered in counterclockwise mode.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialRadialSettings">
            <summary>
            Represents the settings for the radial mode.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialRadialSettings.StartAngle">
            <summary>
            Gets or sets the start angle of the radial arc.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialRadialSettings.EndAngle">
            <summary>
            Gets or sets the end angle of the radial arc.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialRadialSettings.Offset">
            <summary>
            Gets or sets the offset of the items on the arc.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialRadialSettings.Direction">
            <summary>
            Gets or sets the direction of the items.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SleekDialView">
            <summary>
            Represents the viewer of a <see cref="T:FluentUI.Blazor.Community.Components.SleekDialItem"/> collection.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SleekDialView.Parent">
            <summary>
            Represents the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSleekDial"/> component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialView.Refresh">
            <summary>
            Refreshes the component state.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SleekDialView.OnInitialized">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.DotIndicator`1">
            <summary>
            Represents a dot indicator for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DotIndicator`1.AriaLabel">
            <summary>
            Gets the aria-label.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DotIndicator`1.Index">
            <summary>
            Gets or sets the index of the dot.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DotIndicator`1.CurrentSlideshowIndex">
            <summary>
            Gets or sets the slide show index.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DotIndicator`1.Orientation">
            <summary>
            Gets or sets the orientation of the dot.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DotIndicator`1.Parent">
            <summary>
            Gets the parent component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.DotIndicator`1.Css">
            <summary>
            Gets the css of the indicator.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.DotIndicator`1.MoveToIndexAsync">
            <summary>
            Occurs when the dot is clicked.
            </summary>
            <returns>Returns the task which moves to the dot index when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1">
            <summary>
            Represents a slide show component.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._chevronLeft">
            <summary>
            Represents the left chevron icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._chevronRight">
            <summary>
            Represents the right chevron icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._chevronUp">
            <summary>
            Represents the up chevron icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._chevronDown">
            <summary>
            Represents the down chevron icon.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._slides">
            <summary>
            Represents the slides to render.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._images">
            <summary>
            Represents the images.
            </summary>
            <remarks>When orientation or ImageRatio changes, we need to update the image size.</remarks>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._renderIndicatorItems">
            <summary>
            Represents the fragment to render the dots.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._timer">
            <summary>
            Represents the timer.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._currentIndexChanged">
            <summary>
            Represents a value indicating if the current index has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._autoPlayChanged">
            <summary>
            Represents a value indicating if the autoplay has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._intervalChanged">
            <summary>
            Represents a value indicating if the interval has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._elementWidthResized">
            <summary>
            Represents a value indicating if the element was resized on the width.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._elementHeightResized">
            <summary>
            Represents a value indicating if the element was resized on the height.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._isAspectRatioChanged">
            <summary>
            Represents a value indicating if the aspect ratio has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._dotnetReference">
            <summary>
            Represents the reference of the component.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._module">
            <summary>
            Represents the module.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.JavascriptFileName">
            <summary>
            Represents the name of the javascript filename.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._showContent">
            <summary>
            Value indicating if the content is shown.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._resizedWidth">
            <summary>
            Represents the resized width.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._resizedHeight">
            <summary>
            Represents the resized height.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._isIndicatorPositionChanged">
            <summary>
            Represents a value indicating if the position of the indicator has changed. 
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._isOrientationChanged">
            <summary>
            Represents a value indicating if the orientation has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._isTouchEnabledChanged">
            <summary>
            Represents a value indicating if the touch enabled has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._isLoopingModeChanged">
            <summary>
            Represents a value indicating if the looping mode has changed.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1._showIndicatorChanged">
            <summary>
            Represents a value indicating if the show indicator has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ShowControls">
            <summary>
            Gets or sets a value indicating that the controls are shown.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ChildContent">
            <summary>
            Gets or sets the render fragment for the child content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ShowIndicators">
            <summary>
            Gets or sets a value indicating that the indicators are shown.
            </summary>
            <remarks>
            When <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.LoopMode"/> is set to <see cref="F:FluentUI.Blazor.Community.Components.SlideshowLoopingMode.Infinite"/>, the indicators are not shown.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Items">
            <summary>
            Gets or sets the items to render.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ItemTemplate">
            <summary>
            Gets or sets the item template for rendering the items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Autoplay">
            <summary>
            Gets or sets a value indicating that the slide show is autoplay.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.AutoplayInterval">
            <summary>
            Gets or sets the interval between items.
            </summary>
            <remarks>If an item has its <see cref="!:SlideshowImage&lt;TItem&gt;.Interval"/> set, it will override
             the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.AutoplayInterval"/>.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.SlideDuration">
            <summary>
            Gets or sets a the duration of the animation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Width">
            <summary>
            Gets or sets the width of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Height">
            <summary>
            Gets or sets the height of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Index">
            <summary>
            Gets or sets the index of the item to show.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IndexChanged">
            <summary>
            Gets or sets the callback to raise when the index has changed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.LoopMode">
            <summary>
            Gets or sets a value indicating that the slide show loops after reaching the last item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.PreviousLabel">
            <summary>
            Gets or sets the label for previous button tooltip.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.NextLabel">
            <summary>
            Gets or sets the label for next button tooltip.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ItemFunc">
            <summary>
            Gets or sets the function to retrieve the identifier of an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IndicatorPosition">
            <summary>
            Gets or sets the position of the indicator.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IndicatorTemplate">
            <summary>
            Gets or sets the template for an indicator item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Orientation">
            <summary>
            Gets or sets the orientation of the slide show.
            </summary>
            <remarks>If the indicator is visible, the position of it override this value.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IsTouchEnabled">
            <summary>
            Gets or sets if the touch is enabled, allow the user to use its fingers to swipe between slides.
            </summary>
            <remarks>If <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Autoplay"/> is <see langword="true" /> and <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IsTouchEnabled"/>
             is <see langword="true" />, <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Autoplay"/> will be desactivated.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Count">
            <summary>
            Gets the number of items.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IsPreviousDisabled">
            <summary>
            Gets a value indicating if the previous button is disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IsNextDisabled">
            <summary>
            Gets a value indicating if the next button disabled.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Css">
            <summary>
            Gets or sets the css for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.InternalOrientation">
            <summary>
            Gets the orientation of the indicators.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.InternalStyle">
            <summary>
            Gets the internal style for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.InternalContainerCss">
            <summary>
            Gets the css for the internal container of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1" />.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.InternalIndicatorsCss">
            <summary>
            Gets the css for the indicators of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1" />.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.PreviousButtonStyle">
            <summary>
            Gets the style of the previous button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.NextButtonStyle">
            <summary>
            Gets the style of the previous button.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Runtime">
            <summary>
            Gets or sets the javascript runtime.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ImageAspectRatio">
            <summary>
            Gets or sets a value indicating if the image keeps the aspect ratio.
            </summary>
            <remarks>Works only if the item contains an img div.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.PreviousIcon">
            <summary>
            Gets or sets the previous icon.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.NextIcon">
            <summary>
            Gets or sets the next icon.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.PreviousHorizontalStyle">
            <summary>
            Gets the style for previous button on horizontal orientation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.PreviousVerticalStyle">
            <summary>
            Gets the style for previous button on vertical orientation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.NextHorizontalStyle">
            <summary>
            Gets the style for next button on horizontal orientation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.NextVerticalStyle">
            <summary>
            Gets the style for next button on vertical orientation.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.DeviceInfoState">
            <summary>
            Gets or sets the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.DeviceInfoState"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnImagesResizeCompleted">
            <summary>
            Gets or sets the callback to raise when a resizing operation is completed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.TouchThreshold">
            <summary>
            Gets or sets the minimum distance in pixels that the user should swipe to move the slide.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.StopAutoplayWhenTouchEnabled">
            <summary>
            Gets or sets a value indicating if the autoplay stops when the touch is enabled.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.GetInternalOrientation">
            <summary>
            Gets the internal orientation.
            </summary>
            <returns>Returns the orientation from the indicator position if <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ShowIndicators"/>
             is set to <see langword="true" />, or use the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Orientation"/> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.StartTimer">
            <summary>
            Starts the timer.
            </summary>
            <remarks>The timer starts if the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Autoplay" /> is set to <see langword="true" />.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.StopTimer">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnTimerTick(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Occurs when the timer ticks.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event args of the timer.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IsCurrent(System.Int32)">
            <summary>
            Checks if the <paramref name="index"/> is equals to the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Index"/>.
            </summary>
            <param name="index">Index to check.</param>
            <returns>Returns <see langword="true"/> if the <paramref name="index"/> is equal to <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Index"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.GetAriaHiddenValue(FluentUI.Blazor.Community.Components.SlideshowItem{`0})">
            <summary>
            Gets the aria-hidden value.
            </summary>
            <param name="item">Hidden item.</param>
            <returns>Returns the aria-hidden value.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnMoveNextAsync">
            <summary>
            Move to the next slide.
            </summary>
            <returns>Returns a task which moves to the next slide when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnMovePreviousAsync">
            <summary>
            Move to the previous slide.
            </summary>
            <returns>Returns a task which moves to the previous slide when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.MoveToIndexAsync(System.Int32)">
            <summary>
            Move the slide to the specified <paramref name="index"/>.
            </summary>
            <param name="index">Index of the slide.</param>
            <returns>Returns a task which moves the slide to the current index.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.GetAriaHiddenValue(System.Int32)">
            <summary>
            Gets the aria-hidden value.
            </summary>
            <param name="index">Index to check.</param>
            <returns>Returns <see langword="true"/> if the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Index"/> is equal to <paramref name="index"/>,
             <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnKeyDownAsync(Microsoft.FluentUI.AspNetCore.Components.FluentKeyCodeEventArgs)">
            <summary>
            Occurs when a key of the keyboard is down.
            </summary>
            <param name="e">Event args of the keyboard.</param>
            <returns>Returns a task which moves the slide when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Remove(FluentUI.Blazor.Community.Components.SlideshowItem{`0})">
            <summary>
            Removes the <paramref name="value"/> from the component.
            </summary>
            <param name="value">Value to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Add(FluentUI.Blazor.Community.Components.SlideshowItem{`0})">
            <summary>
            Adds the <paramref name="value"/> from the component.
            </summary>
            <param name="value">Value to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Contains(FluentUI.Blazor.Community.Components.SlideshowItem{`0})">
            <summary>
            Check if the <paramref name="value"/> is inside the component.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns <see langword="true" /> if the item is inside the component, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Contains(FluentUI.Blazor.Community.Components.SlideshowImage{`0})">
            <summary>
            Check if the <paramref name="value"/> is inside the component.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns <see langword="true" /> if the item is inside the component, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnAspectRatioChangedAsync">
            <summary>
            Occurs when the aspect ratio has changed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnEnableOrDisableTouchAsync">
            <summary>
            Occurs when touch is enabled or disabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnOrientationChanged(System.Object,FluentUI.Blazor.Community.Components.DeviceOrientation)">
            <summary>
            Occurs when the orientation changed.
            </summary>
            <param name="sender">Object which invokes the method.</param>
            <param name="e">Args of the method.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Add(FluentUI.Blazor.Community.Components.SlideshowImage{`0})">
            <summary>
            Adds an image into the list of images.
            </summary>
            <param name="value">Image to add.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Remove(FluentUI.Blazor.Community.Components.SlideshowImage{`0})">
            <summary>
            Removes an image from the list of images.
            </summary>
            <param name="value">Image to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnLoopingModeChangedAsync(System.Boolean)">
            <summary>
            Occurs when the looping mode has changed.
            </summary>
            <returns>Returns a task which changes the looping mode when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.SetIndexAsync(System.Int32)">
            <summary>
            Sets the <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Index"/> to <paramref name="index"/>.
            </summary>
            <param name="index">Index of the slide to slow.</param>
            <returns>Returns a task which set the index to the <paramref name="index"/> and
             raise <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.IndexChanged"/> when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnParametersSetAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.SetParentSize(System.Int32,System.Int32)">
            <summary>
            Occurs when <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Width"/> or <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Height"/> are not provided.
            </summary>
            <param name="width">Width of the parent.</param>
            <param name="height">Height of the parent.</param>
            <remarks>When <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Width"/> or <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Height"/> are not provided, we took the size from
             its parent.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnAutoSizeCompletedAsync">
            <summary>
            Occurs when all images have been resized.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnFillSizeCompletedAsync(System.Int32,System.Int32)">
            <summary>
            Occurs when all images have been resized to fill the container.
            </summary>
            <param name="width">Width of the container.</param>
            <param name="height">Height of the container.</param>
            <returns>Returns a task which set the container size when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.ResizeObserverEvent(FluentUI.Blazor.Community.Components.SlideshowResize)">
            <summary>
            Occurs when the component is resized.
            </summary>
            <param name="value">Value of the new size of the component and is the value are fixed.</param>
            <returns>The new size of the component.</returns>
            <remarks>
            If <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Width"/> or <see cref="P:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.Height"/> are provided, these values are considered fixed,
             so even if the component container became greater than the component size, the component
             won't be greater than the fixed value.
            </remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1.OnTouchSwipeAsync(FluentUI.Blazor.Community.Components.SlideshowSwipeDirection)">
            <summary>
            Occurs when the user swipe the slide.
            </summary>
            <param name="direction">Direction of the slide.</param>
            <returns>Returns a task wich moves the slide according to the <paramref name="direction"/>
             when completed.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowCaption">
            <summary>
            Represents a caption for a <see cref="T:FluentUI.Blazor.Community.Components.SlideshowItem`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaption.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowCaption.Css">
            <summary>
            Gets the css classes to use.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowImage`1">
            <summary>
            Represents the image inside a <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlideshowImage`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SlideshowImage`1"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowImage`1.Parent">
            <summary>
            Gets or sets the parent of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowImage`1.Source">
            <summary>
            Gets or sets the source of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowImage`1.Alt">
            <summary>
            Gets or sets the alternate text of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowImage`1.Title">
            <summary>
            Gets or sets the title of the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowImage`1.IsLazy">
            <summary>
            Gets or sets a value indicating whether the image should be loaded lazily.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowImage`1.FetchPriorityHigh">
            <summary>
            Gets or sets a value indicating whether the image has high fetch priority.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlideshowImage`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlideshowImage`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowImageRatio">
            <summary>
            Represents the available ratios for images in the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1" />.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowImageRatio.Auto">
            <summary>
            If the image natural dimensions are greater than the container dimensions,
             the image is shrinked, and the aspect ratio is maintened.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowImageRatio.Fill">
            <summary>
            The image fill the container.
            </summary>
            <remarks>When the dimensions of the container are not set, the width of the container is set to 100%,
             after that, the first image in the slideshow, when stretched, gives the height of the container,
             and the other images will take that height.</remarks>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowIndicatorPosition">
            <summary>
            Gets or sets the position of the indicator.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowIndicatorPosition.Top">
            <summary>
            The indicator is on the top of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowIndicatorPosition.Bottom">
            <summary>
            The indicator is on the bottom of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowIndicatorPosition.Left">
            <summary>
            The indicator is on the left of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowIndicatorPosition.Right">
            <summary>
            The indicator is on the right of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowItem`1">
            <summary>
            Represents an item for the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxSlideshow`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlideshowItem`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.SlideshowItem`1"/> class.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowItem`1.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowItem`1.AriaLabel">
            <summary>
            Gets or sets the aria label of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowItem`1.Parent">
            <summary>
            Gets or sets the parent of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowItem`1.Interval">
            <summary>
            Gets or sets the interval to show the image.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowItem`1.Css">
            <summary>
            Gets the css of the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlideshowItem`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.SlideshowItem`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowLoopingMode">
            <summary>
            Represents the looping mode of a slideshow.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowLoopingMode.None">
            <summary>
            No looping.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowLoopingMode.Rewind">
            <summary>
            The slideshow will loop back to the start after reaching the end.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowLoopingMode.Infinite">
            <summary>
            The slideshow will loop by pushing the first slide at the end of the last slide,
             to create a smooth and infinity loop.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowResize">
            <summary>
            Represents the size of the slideshow when it was resized from the browser.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowResize.FixedWidth">
            <summary>
            Gets or sets a value indicating whether the width is fixed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowResize.FixedHeight">
            <summary>
            Gets or sets a value indicating whether the height is fixed.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowResize.Width">
            <summary>
            Gets or sets the width of the slideshow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.SlideshowResize.Height">
            <summary>
            Gets or sets the height of the slideshow.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.SlideshowSwipeDirection">
            <summary>
            Represents the direction in which slides are swapped in a slideshow.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowSwipeDirection.Next">
            <summary>
            Move to the next slide.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.SlideshowSwipeDirection.Previous">
            <summary>
            Move to the previous slide.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1">
            <summary>
            Represents a Tile Grid component.
            </summary>
            <typeparam name="TItem">Type of the component.</typeparam>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1._layout">
            <summary>
            Represents the layout of the tile grid.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.JavascriptFile">
            <summary>
            Represents the javascript file to use to load and to store the layout.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1._module">
            <summary>
            Represents the reference of the javascript object. 
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1._layoutLoaded">
            <summary>
            Represents a value indicating if the layout was already loaded.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.GridSettings">
            <summary>
            Gets the settings for the tile grid.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1._dropContainer">
            <summary>
            Gets the <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZoneContainer`1"/> component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.CanOverflow">
            <summary>
            Gets or sets a value indicating if the component can overflow.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.Immediate">
            <summary>
            Gets or sets a value indicating if the drap and drop is immediate. 
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.CloneItem">
            <summary>
            Gets or sets a function to clone an item of the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.CanReorder">
            <summary>
            Gets or sets a value indicating if the component can reorder its item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.CanResize">
            <summary>
            Gets or sets a value indicating if the component can resize its item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.IsDragAllowed">
            <summary>
            Gets or sets a function which allows an item can be dragged or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.IsDropAllowed">
            <summary>
            Gets or sets a function which allows the item can be dropped or not.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.Items">
            <summary>
            Gets or sets the items to render.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.ChildContent">
            <summary>
            Gets or sets the child content.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.ItemContent">
            <summary>
            Gets or sets the template for the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.ItemCss">
            <summary>
            Gets or sets the css for an item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.ColumnWidth">
            <summary>
            Gets or sets the width of the column.
            </summary>
            <remarks>Default width is 1fr.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.MinimumColumnWidth">
            <summary>
            Gets or sets the minimum width of the column.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.MinimumRowHeight">
            <summary>
            Gets or sets the minimum height of the row.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.Columns">
            <summary>
            Gets or sets the number of columns of the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.RowHeight">
            <summary>
            Gets or sets the height of the row.
            </summary>
            <remarks>
            Default height is 1fr.
            </remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.Width">
            <summary>
            Gets or sets the width of the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.Height">
            <summary>
            Gets or sets the height of the grid.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.PersistenceEnabled">
            <summary>
            Gets or sets a value indicating if the layout will be stored in the local storage of the app or not.
            </summary>
            <remarks>
            When this value is set to <see langword="true" />, the <see cref="P:Microsoft.FluentUI.AspNetCore.Components.FluentComponentBase.Id"/> property must be set
             and mustn't change.</remarks>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.ItemKey">
            <summary>
            Gets or sets the function to extract a key from an item.
            </summary>
            <remarks>This function is only used if <see cref="P:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.PersistenceEnabled"/> is set to <see langword="true" />.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.OnSaveRequested(System.Object,System.EventArgs)">
            <summary>
            Occurs when a save is requested.
            </summary>
            <param name="sender">Object who invokes the method.</param>
            <param name="e">Event args associated to this event.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.AddLayoutItem(FluentUI.Blazor.Community.Components.FluentCxTileGridItem{`0},System.Nullable{System.Int32})">
            <summary>
            Adds a layout item.
            </summary>
            <param name="value">Item to add.</param>
            <param name="index">Index of the item.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.RemoveLayoutItem(System.Nullable{System.Int32})">
            <summary>
            Remove a layout item.
            </summary>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.UpdateLayoutAsync(FluentUI.Blazor.Community.Components.FluentCxTileGridItem{`0})">
            <summary>
            Update the layout in an asynchronous way.
            </summary>
            <param name="value">Item to update.</param>
            <returns></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.SaveLayoutAsync">
            <summary>
            Save the layout in an asynchronous way.
            </summary>
            <returns>Returns a task which saves the layout when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.OnAfterRenderAsync(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder)">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1.Dispose">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1">
            <summary>
            Represents a Tile Grid item.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.Value">
            <summary>
            Gets or sets the value of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.ChildContent">
            <summary>
            Gets or sets the content of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.Component">
            <summary>
            Gets the render component. (when used inside other components) 
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.RowSpan">
            <summary>
            Gets or sets the row span of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.ColumnSpan">
            <summary>
            Gets or sets the column span of the component.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.OnTapped">
            <summary>
            Event callback occurs when the component is tapped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.OnDoubleTapped">
            <summary>
            Event callback occurs when the component is double tapped.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.Parent">
            <summary>
            Gets or sets the parent of the component.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.OnResizedAsync(FluentUI.Blazor.Community.Components.ResizedEventArgs)">
            <summary>
            Occurs when the tile is resized in an asynchronous way.
            </summary>
            <param name="e">Event args which contains the new size of the tile.</param>
            <returns>Returns a task which resizes the tile when completed.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.OnInitializedAsync">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1.SetSpan(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IDropZoneComponent`1">
            <summary>
            Represents an interface for the <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1"/> component.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IDropZoneComponent`1.Id">
            <summary>
            Gets the identifier of the drop zone.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IDropZoneComponent`1.Component">
            <summary>
            Gets the component to render inside the drop zone.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.IItemValue`1">
            <summary>
            Represents a value for an item.
            </summary>
            <typeparam name="TItem">Type of the value.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.IItemValue`1.Value">
            <summary>
            Gets the value of the item.
            </summary>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.ITileGridItemDropZoneComponent`1">
            <summary>
            Represents the interface for a <see cref="T:FluentUI.Blazor.Community.Components.Internal.FluentCxDropZone`1"/> which contains a
             <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>.
            </summary>
            <typeparam name="TItem">Type of the item.</typeparam>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridItemDropZoneComponent`1.ColumnSpan">
            <summary>
            Gets the column span of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.ITileGridItemDropZoneComponent`1.RowSpan">
            <summary>
            Gets the row span of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGridItem`1"/>.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.ITileGridItemDropZoneComponent`1.SetSpan(System.Int32,System.Int32)">
            <summary>
            Sets the span of the item.
            </summary>
            <param name="columnSpan">Column span of the item.</param>
            <param name="rowSpan">Row span of the item.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TileGridLayout">
            <summary>
            Represents the layout of the <see cref="T:FluentUI.Blazor.Community.Components.FluentCxTileGrid`1"/>
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.TileGridLayout.UpdateSpan(System.String,System.Int32,System.Int32)">
            <summary>
            Updates the span of the item.
            </summary>
            <param name="key">Key of the item.</param>
            <param name="columnSpan">Column span of the item.</param>
            <param name="rowSpan">Row span of the item.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Components.TileGridLayoutItem">
            <summary>
            Represents an item for the <see cref="T:FluentUI.Blazor.Community.Components.TileGridLayout"/>.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TileGridLayoutItem.ColumnSpan">
            <summary>
            Gets or sets the column span of the item.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Components.TileGridLayoutItem.RowSpan">
            <summary>
            Gets or sets the row span of the item.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottieProvider.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:FluentUI.Blazor.Community.Components.FluentCxLottieProvider.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:FluentUI.Blazor.Community.Animations.AnimationEngine">
            <summary>
            Represents the core engine responsible for managing and updating animated elements and groups.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine._maxDisplayedItems">
            <summary>
            Represents the maximum number of items to be displayed in the animation.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine._previousElements">
            <summary>
            Represents the previous state of animated elements to compute differences during animation frames.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine._elements">
            <summary>
            Represents the currently registered animated elements.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine._groups">
            <summary>
            Represents the currently registered animation groups.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine._layoutStrategy">
            <summary>
            Represents the layout strategy used to arrange animated elements.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Animations.AnimationEngine.jsonAnimatedElements">
            <summary>
            A thread-safe queue that stores instances of <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement"/>.
            </summary>
            <remarks>This queue is used to manage <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement"/> objects in a concurrent
            environment,  ensuring safe access and modification across multiple threads.</remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.Register(FluentUI.Blazor.Community.Components.AnimatedElement)">
            <summary>
            Registers an animated element for tracking and ensures it is added to the collection.
            </summary>
            <remarks>If the specified element is already registered, the method does nothing.  Otherwise, the
            element is added to the internal collection, and a clone of the element is stored for future
            reference.</remarks>
            <param name="item">The animated element to register. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.RegisterGroup(FluentUI.Blazor.Community.Components.AnimatedElementGroup)">
            <summary>
            Registers an animation group and stores a snapshot of its animated elements.
            </summary>
            <remarks>This method adds the specified animation group to the internal collection of groups. 
            Additionally, it creates and stores a snapshot of the current state of each animated element  within the group,
            keyed by their unique identifier.</remarks>
            <param name="group">The animation group to register. Must not be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.SetLayout(FluentUI.Blazor.Community.Components.ILayoutStrategy)">
            <summary>
            Sets the layout strategy to be used for arranging items.
            </summary>
            <param name="layoutStrategy">The layout strategy to apply. If <see langword="null"/>, a default grid layout is used.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.Unregister(FluentUI.Blazor.Community.Components.AnimatedElement)">
            <summary>
            Unregisters the specified animated element, removing it from the collection of tracked elements.
            </summary>
            <param name="item">The animated element to unregister. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.UnregisterGroup(FluentUI.Blazor.Community.Components.AnimatedElementGroup)">
            <summary>
            Unregisters the specified animation group, removing it and its associated animated elements from the internal
            collections.
            </summary>
            <remarks>This method removes the animation group from the internal collection of groups and also
            removes all animated elements associated with the group from the internal tracking collection.</remarks>
            <param name="group">The animation group to unregister. This parameter cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.Update">
            <summary>
            Updates the state of animated elements and returns a list of the updated elements.
            </summary>
            <remarks>This method processes both grouped and non-grouped animated elements, updating their state
            based on the current time.</remarks>
            <returns>A list of <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement"/> objects representing the updated animated elements.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.UpdateGroupElements(System.DateTime,System.Collections.Concurrent.ConcurrentQueue{FluentUI.Blazor.Community.Components.JsonAnimatedElement})">
            <summary>
            Updates the elements of all groups by applying the layout strategy and calculating the differences between the
            current and previous states.
            </summary>
            <remarks>This method processes all groups in parallel. For each group, it applies the layout strategy
            and computes the differences between the current state and the previous state. The calculated differences are
            added to the provided <paramref name="jsonAnimatedElements"/> queue.</remarks>
            <param name="now">The current timestamp used to calculate differences in the group elements.</param>
            <param name="jsonAnimatedElements">A thread-safe queue to which the method enqueues the calculated differences as <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement"/>
            objects.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.UpdateNoGroupElements(System.DateTime,System.Collections.Concurrent.ConcurrentQueue{FluentUI.Blazor.Community.Components.JsonAnimatedElement})">
            <summary>
            Updates the state of elements that are not part of a group and enqueues their changes into the specified queue
            if any differences are detected.
            </summary>
            <remarks>This method applies the layout strategy to the elements, updates their state based on the
            current time, and calculates the differences between their current and previous states. If differences are
            found, the changes are serialized into a <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement" /> object and added to the
            queue.</remarks>
            <param name="now">The current timestamp used to update the elements.</param>
            <param name="queue">A thread-safe queue to which the updated elements, represented as <see cref="T:FluentUI.Blazor.Community.Components.JsonAnimatedElement" />, are enqueued
            if changes are detected.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.ApplyStartTime(System.DateTime)">
            <summary>
            Applies the specified start time to the layout strategy and all groups within the collection.
            </summary>
            <param name="now">The start time to apply, typically representing the current date and time.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.SetMaxDisplayedItems(System.Int32)">
            <summary>
            Sets the maximum number of items to be displayed.
            </summary>
            <remarks>This method updates the internal limit on the number of items that can be displayed at once.
            Ensure that the value provided is within the acceptable range for your application.</remarks>
            <param name="maxDisplayedItems">The maximum number of items to display. Must be a non-negative integer.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.Animations.AnimationEngine.GetAll">
            <summary>
            Returns a distinct list of all registered animated element IDs, including those within groups.
            </summary>
            <returns></returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.ByteSize">
            <summary>
            Provides binary (IEC) unit constants, properties, and methods for the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> struct.
            </summary>
            <summary>
            Represents a size in bytes and provides methods for formatting, conversion, and comparison.
            </summary>
            <summary>
            Provides operator overloads and comparison logic for the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> struct.
            </summary>
            <summary>
            Provides decimal (SI) unit constants, properties, and methods for the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> struct.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInKibiByte">
            <summary>
            The number of bytes in one kibibyte (KiB). 1 KiB = 1,024 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInMebiByte">
            <summary>
            The number of bytes in one mebibyte (MiB). 1 MiB = 1,024 KiB = 1,048,576 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInGibiByte">
            <summary>
            The number of bytes in one gibibyte (GiB). 1 GiB = 1,024 MiB = 1,073,741,824 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInTebiByte">
            <summary>
            The number of bytes in one tebibyte (TiB). 1 TiB = 1,024 GiB = 1,099,511,627,776 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInPebiByte">
            <summary>
            The number of bytes in one pebibyte (PiB). 1 PiB = 1,024 TiB = 1,125,899,906,842,624 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInExabiByte">
            <summary>
            The number of bytes in one exbibyte (EiB). 1 EiB = 1,024 PiB = 1,152,921,504,606,846,976 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.KibiByteSymbol">
            <summary>
            The symbol for kibibyte (KiB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.MebiByteSymbol">
            <summary>
            The symbol for mebibyte (MiB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.GibiByteSymbol">
            <summary>
            The symbol for gibibyte (GiB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.TebiByteSymbol">
            <summary>
            The symbol for tebibyte (TiB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.PebiByteSymbol">
            <summary>
            The symbol for pebibyte (PiB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.ExabiByteSymbol">
            <summary>
            The symbol for exbibyte (EiB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.KibiBytes">
            <summary>
            Gets the value in kibibytes (KiB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.MebiBytes">
            <summary>
            Gets the value in mebibytes (MiB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.GibiBytes">
            <summary>
            Gets the value in gibibytes (GiB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.TebiBytes">
            <summary>
            Gets the value in tebibytes (TiB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.PebiBytes">
            <summary>
            Gets the value in pebibytes (PiB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.ExabiBytes">
            <summary>
            Gets the value in exbibytes (EiB).
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromKibiBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of kibibytes (KiB).
            </summary>
            <param name="value">The number of kibibytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromMebiBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of mebibytes (MiB).
            </summary>
            <param name="value">The number of mebibytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromGibiBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of gibibytes (GiB).
            </summary>
            <param name="value">The number of gibibytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromTebiBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of tebibytes (TiB).
            </summary>
            <param name="value">The number of tebibytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromPebiBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of pebibytes (PiB).
            </summary>
            <param name="value">The number of pebibytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromExabiBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of exbibytes (EiB).
            </summary>
            <param name="value">The number of exbibytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddKibiBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of kibibytes (KiB) to this instance.
            </summary>
            <param name="value">The number of kibibytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddMebiBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of mebibytes (MiB) to this instance.
            </summary>
            <param name="value">The number of mebibytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddGibiBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of gibibytes (GiB) to this instance.
            </summary>
            <param name="value">The number of gibibytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddTebiBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of tebibytes (TiB) to this instance.
            </summary>
            <param name="value">The number of tebibytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddPebiBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of pebibytes (PiB) to this instance.
            </summary>
            <param name="value">The number of pebibytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddExabiBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of exbibytes (EiB) to this instance.
            </summary>
            <param name="value">The number of exbibytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.ToBinaryString">
            <summary>
            Returns a string representation of the value using binary units (IEC), formatted with the current culture.
            </summary>
            <returns>A string representation in binary units (e.g., "1.5 GiB").</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.ToBinaryString(System.IFormatProvider)">
            <summary>
            Returns a string representation of the value using binary units (IEC), formatted with the specified format provider.
            </summary>
            <param name="formatProvider">The format provider to use.</param>
            <returns>A string representation in binary units (e.g., "1.5 GiB").</returns>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BitsInByte">
            <summary>
            The number of bits in one byte. Always 8.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BitSymbol">
            <summary>
            The symbol for a bit ("b").
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.ByteSymbol">
            <summary>
            The symbol for a byte ("B").
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.Bits">
            <summary>
            Gets the total number of bits represented by this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.Bytes">
            <summary>
            Gets the total number of bytes represented by this instance.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.LargestWholeNumberBinarySymbol">
            <summary>
            Gets the largest whole number binary unit symbol (IEC) that is less than or equal to the value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.LargestWholeNumberDecimalSymbol">
            <summary>
            Gets the largest whole number decimal unit symbol (SI) that is less than or equal to the value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.LargestWholeNumberBinaryValue">
            <summary>
            Gets the value in the largest whole number binary unit (IEC) that is less than or equal to the value.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.LargestWholeNumberDecimalValue">
            <summary>
            Gets the value in the largest whole number decimal unit (SI) that is less than or equal to the value.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> struct from a number of bits.
            </summary>
            <param name="bits">The number of bits.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> struct from a number of bytes.
            </summary>
            <param name="bytes">The number of bytes.</param>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromBits(System.Int64)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of bits.
            </summary>
            <param name="value">The number of bits.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of bytes.
            </summary>
            <param name="value">The number of bytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.ToString">
            <summary>
            Returns a string representation of the value using the default format and current culture.
            </summary>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.ToString(System.String)">
            <summary>
            Returns a string representation of the value using the specified format and current culture.
            </summary>
            <param name="format">The format string.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a string representation of the value using the specified format and format provider.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">The format provider.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.ToString(System.String,System.IFormatProvider,System.Boolean)">
            <summary>
            Returns a string representation of the value using the specified format, format provider, and unit system.
            </summary>
            <param name="format">The format string.</param>
            <param name="provider">The format provider.</param>
            <param name="useBinaryByte">If true, uses binary (IEC) units; otherwise, uses decimal (SI) units.</param>
            <returns>A string representation of the value.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.
            </summary>
            <param name="value">The object to compare with the current instance.</param>
            <returns><c>true</c> if the specified object is a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> and has the same value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Equals(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether the specified <see cref="T:FluentUI.Blazor.Community.ByteSize"/> is equal to the current instance.
            </summary>
            <param name="value">The <see cref="T:FluentUI.Blazor.Community.ByteSize"/> to compare.</param>
            <returns><c>true</c> if both instances represent the same number of bits; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.CompareTo(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Compares the current instance with another <see cref="T:FluentUI.Blazor.Community.ByteSize"/> and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order.
            </summary>
            <param name="other">A <see cref="T:FluentUI.Blazor.Community.ByteSize"/> to compare with this instance.</param>
            <returns>
            A value less than zero if this instance is less than <paramref name="other"/>; zero if equal; greater than zero if this instance is greater.
            </returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Add(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> that is the sum of this instance and the specified <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.
            </summary>
            <param name="bs">The <see cref="T:FluentUI.Blazor.Community.ByteSize"/> to add.</param>
            <returns>The sum as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddBits(System.Int64)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of bits to this instance.
            </summary>
            <param name="value">The number of bits to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of bytes to this instance.
            </summary>
            <param name="value">The number of bytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Subtract(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> that is the difference between this instance and the specified <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.
            </summary>
            <param name="bs">The <see cref="T:FluentUI.Blazor.Community.ByteSize"/> to subtract.</param>
            <returns>The difference as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Addition(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Adds two <see cref="T:FluentUI.Blazor.Community.ByteSize"/> values.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Increment(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Increments the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by one byte.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_UnaryNegation(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Negates the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> value.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Subtraction(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Subtracts one <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from another.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Decrement(FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Decrements the <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by one byte.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Multiply(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Multiplies two <see cref="T:FluentUI.Blazor.Community.ByteSize"/> values.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Division(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Divides one <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by another.
            </summary>
            <exception cref="T:System.DivideByZeroException">Thrown when <paramref name="b"/> is zero.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Equality(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether two <see cref="T:FluentUI.Blazor.Community.ByteSize"/> values are equal.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_Inequality(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether two <see cref="T:FluentUI.Blazor.Community.ByteSize"/> values are not equal.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_LessThan(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether one <see cref="T:FluentUI.Blazor.Community.ByteSize"/> is less than another.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_LessThanOrEqual(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether one <see cref="T:FluentUI.Blazor.Community.ByteSize"/> is less than or equal to another.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_GreaterThan(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether one <see cref="T:FluentUI.Blazor.Community.ByteSize"/> is greater than another.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.op_GreaterThanOrEqual(FluentUI.Blazor.Community.ByteSize,FluentUI.Blazor.Community.ByteSize)">
            <summary>
            Determines whether one <see cref="T:FluentUI.Blazor.Community.ByteSize"/> is greater than or equal to another.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Parse(System.String)">
            <summary>
            Parses the specified string representation of a byte size using the current culture.
            </summary>
            <param name="s">The string to parse (e.g., "1.5 MB", "2 GiB", "1024 B").</param>
            <returns>A <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance representing the parsed value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="s"/> is null or whitespace.</exception>
            <exception cref="T:System.FormatException">Thrown if the string is not in a valid format or contains an unsupported unit.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Parse(System.String,System.IFormatProvider)">
            <summary>
            Parses the specified string representation of a byte size using the provided format provider.
            </summary>
            <param name="s">The string to parse (e.g., "1.5 MB", "2 GiB", "1024 B").</param>
            <param name="formatProvider">The format provider to use for parsing numbers.</param>
            <returns>A <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance representing the parsed value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="s"/> is null or whitespace.</exception>
            <exception cref="T:System.FormatException">Thrown if the string is not in a valid format or contains an unsupported unit.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Parses the specified string representation of a byte size using the provided number styles and format provider.
            </summary>
            <param name="value">The string to parse (e.g., "1.5 MB", "2 GiB", "1024 B").</param>
            <param name="numberStyles">The number styles to use for parsing the numeric part.</param>
            <param name="formatProvider">The format provider to use for parsing numbers.</param>
            <returns>A <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance representing the parsed value.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="value"/> is null or whitespace.</exception>
            <exception cref="T:System.FormatException">Thrown if the string is not in a valid format or contains an unsupported unit.</exception>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.TryParse(System.String,FluentUI.Blazor.Community.ByteSize@)">
            <summary>
            Tries to parse the specified string representation of a byte size using the current culture.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="result">When this method returns, contains the parsed <see cref="T:FluentUI.Blazor.Community.ByteSize"/> value if parsing succeeded, or the default value if parsing failed.</param>
            <returns><c>true</c> if parsing succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,FluentUI.Blazor.Community.ByteSize@)">
            <summary>
            Tries to parse the specified string representation of a byte size using the provided number styles and format provider.
            </summary>
            <param name="s">The string to parse.</param>
            <param name="numberStyles">The number styles to use for parsing the numeric part.</param>
            <param name="formatProvider">The format provider to use for parsing numbers.</param>
            <param name="result">When this method returns, contains the parsed <see cref="T:FluentUI.Blazor.Community.ByteSize"/> value if parsing succeeded, or the default value if parsing failed.</param>
            <returns><c>true</c> if parsing succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInKiloByte">
            <summary>
            The number of bytes in one kilobyte (KB). 1 KB = 1,000 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInMegaByte">
            <summary>
            The number of bytes in one megabyte (MB). 1 MB = 1,000,000 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInGigaByte">
            <summary>
            The number of bytes in one gigabyte (GB). 1 GB = 1,000,000,000 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInTeraByte">
            <summary>
            The number of bytes in one terabyte (TB). 1 TB = 1,000,000,000,000 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInPetaByte">
            <summary>
            The number of bytes in one petabyte (PB). 1 PB = 1,000,000,000,000,000 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.BytesInExaByte">
            <summary>
            The number of bytes in one exabyte (EB). 1 EB = 1,000,000,000,000,000,000 bytes.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.KiloByteSymbol">
            <summary>
            The symbol for kilobyte (KB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.MegaByteSymbol">
            <summary>
            The symbol for megabyte (MB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.GigaByteSymbol">
            <summary>
            The symbol for gigabyte (GB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.TeraByteSymbol">
            <summary>
            The symbol for terabyte (TB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.PetaByteSymbol">
            <summary>
            The symbol for petabyte (PB).
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.ByteSize.ExaByteSymbol">
            <summary>
            The symbol for exabyte (EB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.KiloBytes">
            <summary>
            Gets the value in kilobytes (KB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.MegaBytes">
            <summary>
            Gets the value in megabytes (MB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.GigaBytes">
            <summary>
            Gets the value in gigabytes (GB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.TeraBytes">
            <summary>
            Gets the value in terabytes (TB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.PetaBytes">
            <summary>
            Gets the value in petabytes (PB).
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.ByteSize.ExaBytes">
            <summary>
            Gets the value in exabytes (EB).
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromKiloBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of kilobytes (KB).
            </summary>
            <param name="value">The number of kilobytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromMegaBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of megabytes (MB).
            </summary>
            <param name="value">The number of megabytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromGigaBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of gigabytes (GB).
            </summary>
            <param name="value">The number of gigabytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromTeraBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of terabytes (TB).
            </summary>
            <param name="value">The number of terabytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromPetaBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of petabytes (PB).
            </summary>
            <param name="value">The number of petabytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.FromExaBytes(System.Double)">
            <summary>
            Creates a <see cref="T:FluentUI.Blazor.Community.ByteSize"/> from the specified number of exabytes (EB).
            </summary>
            <param name="value">The number of exabytes.</param>
            <returns>A new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> instance.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddKiloBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of kilobytes (KB) to this instance.
            </summary>
            <param name="value">The number of kilobytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddMegaBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of megabytes (MB) to this instance.
            </summary>
            <param name="value">The number of megabytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddGigaBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of gigabytes (GB) to this instance.
            </summary>
            <param name="value">The number of gigabytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddTeraBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of terabytes (TB) to this instance.
            </summary>
            <param name="value">The number of terabytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddPetaBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of petabytes (PB) to this instance.
            </summary>
            <param name="value">The number of petabytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSize.AddExaBytes(System.Double)">
            <summary>
            Returns a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/> by adding the specified number of exabytes (EB) to this instance.
            </summary>
            <param name="value">The number of exabytes to add.</param>
            <returns>The result as a new <see cref="T:FluentUI.Blazor.Community.ByteSize"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSizeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSizeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSizeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:FluentUI.Blazor.Community.ByteSizeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:FluentUI.Blazor.Community.Extensions.ParameterViewExtensions">
            <summary>
            Represents extensions for <see cref="T:Microsoft.AspNetCore.Components.ParameterView"/> struct.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Extensions.ParameterViewExtensions.HasValueChanged``1(Microsoft.AspNetCore.Components.ParameterView,System.String,``0)">
            <summary>
            Gets a value indicating if the <paramref name="parameterName"/> has changed.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="parameterView">Collection of parameters to use.</param>
            <param name="parameterName">Name of the parameter to check.</param>
            <param name="value">Value of the parameter.</param>
            <returns>Returns <see langword="true" /> the value of the parameter has changed, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Extensions.ParameterViewExtensions.HasValueChanged(Microsoft.AspNetCore.Components.ParameterView,System.String,System.String,System.StringComparison)">
            <summary>
            Gets a value indicating if the <paramref name="parameterName"/> has changed.
            </summary>
            <param name="parameterView">Collection of parameters to use.</param>
            <param name="parameterName">Name of the parameter to check.</param>
            <param name="value">Value of the parameter.</param>
            <param name="stringComparison">Type of comparison to use.</param>
            <returns>Returns <see langword="true" /> the value of the parameter has changed, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Extensions.RenderTreeBuilderExtensions">
            <summary>
            Represents the extensions for the <see cref="T:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder"/> class.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Extensions.RenderTreeBuilderExtensions.AddChildContent(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder,System.Int32,Microsoft.AspNetCore.Components.RenderFragment)">
            <summary>
            Adds a child content into the <paramref name="renderTreeBuilder"/> by passing a <see cref="T:Microsoft.AspNetCore.Components.RenderFragment"/> delegate.
            </summary>
            <param name="renderTreeBuilder">RenderTreeBuilder to use.</param>
            <param name="sequence">Number of the sequence.</param>
            <param name="renderFragment">RenderFragment which represents the child content.</param>
        </member>
        <member name="T:FluentUI.Blazor.Community.Extensions.ServiceCollectionExtensions">
            <summary>
            Represents the extensions for the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> instance.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Extensions.ServiceCollectionExtensions.AddFluentCxUIComponents(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add common services required by the FluentCx UI Web Components for Blazor library.
            </summary>
            <param name="services">Service collection.</param>
            <returns>Returns the collection of services.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.ColorUtils">
            <summary>
            Provides utility methods for working with colors, including conversions between color formats, validation of color
            values, and generation of color gradients and palettes.
            </summary>
            <remarks>This class includes methods for validating and normalizing hexadecimal color codes, converting
            between RGB, HSL, and hexadecimal formats, and generating color gradients and palettes based on various strategies.
            It is designed to simplify common color manipulation tasks in applications that work with color data. <para> The
            methods in this class are static and thread-safe, making it suitable for use in multi-threaded environments.
            </para></remarks>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.IsValidHex(System.String)">
            <summary>
            Determines whether the specified string represents a valid hexadecimal color code.
            </summary>
            <remarks>A valid hexadecimal color code consists of either 3 or 6 hexadecimal digits, optionally
            prefixed with a '#' character. The method ignores leading and trailing whitespace.</remarks>
            <param name="hex">The string to validate. This can optionally include a leading '#' character.</param>
            <returns><see langword="true"/> if the string is a valid hexadecimal color code with 3 or 6 digits; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.IsValidHexOrCssName(System.String)">
            <summary>
            Determines whether the specified string represents a valid hexadecimal color code  or a recognized CSS color
            name.
            </summary>
            <remarks>A valid hexadecimal color code must start with a '#' character followed by 3 or 6 
            hexadecimal digits. Recognized CSS color names are determined by the  <c>CssColorNamesUtils</c>
            utility.</remarks>
            <param name="value">The string to validate. This can be a hexadecimal color code  (e.g., "#FFFFFF") or a CSS color name (e.g.,
            "red").</param>
            <returns><see langword="true"/> if the string is a valid hexadecimal color code or a recognized  CSS color name;
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.NormalizeToHex(System.String)">
            <summary>
            Normalizes a color value to its hexadecimal representation.
            </summary>
            <remarks>This method trims whitespace from the input and attempts to interpret it as a valid
            hexadecimal color code or a CSS color name. If the input is already a valid hexadecimal color code, it is
            normalized to the standard format. If the input is a recognized CSS color name, it is converted to its
            corresponding hexadecimal value.</remarks>
            <param name="value">The input color value, which can be a hexadecimal color code, a CSS color name, or a string to be normalized.</param>
            <returns>A normalized hexadecimal color code in the format "#RRGGBB". If the input is null, empty, or invalid, the method
            returns "#000000".</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.NormalizeHex(System.String)">
            <summary>
            Normalizes a hexadecimal color code to a standard format.
            </summary>
            <remarks>If the input is in short form (e.g., "#123"), it will be expanded to long form (e.g.,
            "#112233"). The method ensures the returned value always starts with a "#" and is in uppercase.</remarks>
            <param name="hex">The hexadecimal color code to normalize. This can be in short form (e.g., "#123"), long form (e.g., "#112233"),
            or null/whitespace.</param>
            <returns>A normalized hexadecimal color code in uppercase long form (e.g., "#112233").  Returns "#000000" if <paramref
            name="hex"/> is null, empty, or consists only of whitespace.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.HexToRgb(System.String)">
            <summary>
            Converts a hexadecimal color code to its RGB components.
            </summary>
            <remarks>The method normalizes the input hexadecimal string by removing the '#' character before
            parsing.</remarks>
            <param name="hex">A string representing the hexadecimal color code. The string must start with a '#' character followed by six
            hexadecimal digits (e.g., "#FF5733").</param>
            <returns>A tuple containing the red, green, and blue components of the color, each as an integer in the range 0 to 255.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.HexToRgbString(System.String)">
            <summary>
            Converts a hexadecimal color code to its RGB string representation.
            </summary>
            <param name="hex">The hexadecimal color code, starting with a '#' character, followed by 6 or 3 hexadecimal digits.</param>
            <returns>A string representing the RGB values in the format "R,G,B", where R, G, and B are integers between 0 and 255.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.RgbToHex(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts RGB color values to a hexadecimal color code.
            </summary>
            <param name="r">The red component of the color, ranging from 0 to 255.</param>
            <param name="g">The green component of the color, ranging from 0 to 255.</param>
            <param name="b">The blue component of the color, ranging from 0 to 255.</param>
            <returns>A string representing the hexadecimal color code, prefixed with '#'.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.HexToHsl(System.String)">
            <summary>
            Converts a hexadecimal color code to its equivalent HSL (Hue, Saturation, Lightness) representation.
            </summary>
            <remarks>The input hexadecimal color code must be in the format "#RRGGBB" or "#RRGGBBAA". If the alpha
            channel is included, it is ignored in the conversion.</remarks>
            <param name="hex">The hexadecimal color code, starting with a '#' character, followed by 6 or 8 hexadecimal digits.</param>
            <returns>A tuple containing the HSL representation of the color: <list type="bullet"> <item><description><c>H</c>: The
            hue, in degrees, ranging from 0 to 360.</description></item> <item><description><c>S</c>: The saturation, as a
            percentage, ranging from 0 to 1.</description></item> <item><description><c>L</c>: The lightness, as a
            percentage, ranging from 0 to 1.</description></item> </list></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.HslToHex(System.Double,System.Double,System.Double)">
            <summary>
            Converts a color from HSL (Hue, Saturation, Lightness) format to its hexadecimal color representation.
            </summary>
            <remarks>The method internally converts the HSL values to RGB and then formats the RGB values as a
            hexadecimal string.</remarks>
            <param name="h">The hue of the color, specified as a value between 0 and 360 degrees.</param>
            <param name="s">The saturation of the color, specified as a value between 0.0 and 1.0.</param>
            <param name="l">The lightness of the color, specified as a value between 0.0 and 1.0.</param>
            <returns>A string representing the color in hexadecimal format, prefixed with a '#' character.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.RgbToHsl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts an RGB color value to its equivalent HSL (Hue, Saturation, Lightness) representation.
            </summary>
            <remarks>The method normalizes the hue to ensure it is always within the range 0 to 360 degrees.
            Saturation and lightness values are clamped to the range 0 to 1.</remarks>
            <param name="r">The red component of the color, in the range 0 to 255.</param>
            <param name="g">The green component of the color, in the range 0 to 255.</param>
            <param name="b">The blue component of the color, in the range 0 to 255.</param>
            <returns>A tuple containing the HSL representation of the color: <list type="bullet"> <item><description><c>H</c> (Hue):
            The hue of the color, in degrees, in the range 0 to 360.</description></item> <item><description><c>S</c>
            (Saturation): The saturation of the color, in the range 0 to 1.</description></item> <item><description><c>L</c>
            (Lightness): The lightness of the color, in the range 0 to 1.</description></item> </list></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.HslToRgb(System.Double,System.Double,System.Double)">
            <summary>
            Converts a color from HSL (Hue, Saturation, Lightness) color space to RGB (Red, Green, Blue) color space.
            </summary>
            <remarks>This method normalizes the hue value to ensure it falls within the valid range [0, 360] and
            clamps the saturation and lightness values to the range [0, 1]. The resulting RGB values are calculated based on
            the HSL-to-RGB conversion formula and are clamped to the range [0, 255].</remarks>
            <param name="h">The hue of the color, in degrees. Must be in the range [0, 360].</param>
            <param name="s">The saturation of the color, as a value between 0 and 1. Must be in the range [0, 1].</param>
            <param name="l">The lightness of the color, as a value between 0 and 1. Must be in the range [0, 1].</param>
            <returns>A tuple containing the RGB representation of the color: <list type="bullet"> <item><description><c>R</c>: The
            red component, as an integer in the range [0, 255].</description></item> <item><description><c>G</c>: The green
            component, as an integer in the range [0, 255].</description></item> <item><description><c>B</c>: The blue
            component, as an integer in the range [0, 255].</description></item> </list></returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.GenerateRandomHex(System.Int32)">
            <summary>
            Generates a list of unique random hexadecimal color codes.
            </summary>
            <remarks>The method ensures that all generated color codes are unique and case-insensitive. The format
            of each color code is a six-digit hexadecimal value prefixed with a hash symbol (#), representing RGB
            values.</remarks>
            <param name="count">The number of unique hexadecimal color codes to generate. Must be a non-negative integer.</param>
            <returns>A list of strings, where each string is a unique hexadecimal color code in the format "#RRGGBB".</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.GenerateGradient(System.String,System.Int32,FluentUI.Blazor.Community.Components.GradientStrategy,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <summary>
            Generates a gradient of colors based on the specified base color, number of steps, and gradient strategy.
            </summary>
            <remarks>The gradient generation strategy determines how the colors are interpolated: <list
            type="bullet"> <item> <description><see cref="F:FluentUI.Blazor.Community.Components.GradientStrategy.Shades"/>: Adjusts the lightness of the base
            color to create darker or lighter shades.</description> </item> <item> <description><see
            cref="F:FluentUI.Blazor.Community.Components.GradientStrategy.Tints"/>: Adjusts both saturation and lightness to create tints of the base
            color.</description> </item> <item> <description><see cref="F:FluentUI.Blazor.Community.Components.GradientStrategy.Saturation"/>: Adjusts the
            saturation of the base color while keeping lightness constant.</description> </item> <item> <description><see
            cref="F:FluentUI.Blazor.Community.Components.GradientStrategy.HueShift"/>: Shifts the hue of the base color to create a range of colors around the
            color wheel.</description> </item> </list> If the <paramref name="opts"/> parameter specifies <see
            cref="P:FluentUI.Blazor.Community.Components.GenerationOptions.Reverse"/> as <see langword="true"/>, the resulting gradient will be reversed.</remarks>
            <param name="baseHex">The base color in hexadecimal format (e.g., "#FF5733").</param>
            <param name="steps">The number of colors to generate in the gradient. Must be greater than zero.</param>
            <param name="strategy">The strategy used to generate the gradient, such as shades, tints, saturation, or hue shift.</param>
            <param name="opts">Optional configuration for gradient generation, including lightness, saturation, and reversal options. If null,
            default options are used.</param>
            <returns>A list of hexadecimal color strings representing the generated gradient. The list will contain distinct colors,
            and its order may be reversed based on the specified options.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.GenerateCustomGradient(System.String,System.String,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <summary>
            Generates a gradient of colors between two specified hex color values.
            </summary>
            <remarks>The gradient is generated by interpolating the HSL (Hue, Saturation, Lightness) values of the
            start and end colors. The interpolation can be customized using the <paramref name="opts"/> parameter.</remarks>
            <param name="startHex">The starting color of the gradient, represented as a hex string (e.g., "#FF0000").</param>
            <param name="endHex">The ending color of the gradient, represented as a hex string (e.g., "#0000FF").</param>
            <param name="steps">The number of colors to generate in the gradient. Must be greater than zero.</param>
            <param name="opts">Optional configuration for gradient generation, such as saturation and lightness constraints,  and whether to
            reverse the gradient. If null, default options are used.</param>
            <returns>A list of hex color strings representing the gradient. The list contains <paramref name="steps"/> colors, 
            starting with <paramref name="startHex"/> and ending with <paramref name="endHex"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.GenerateScheme(System.String,FluentUI.Blazor.Community.Components.ColorPaletteMode,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <summary>
            Generates a color scheme based on the specified base color, palette mode, and number of steps.
            </summary>
            <remarks>The generated color scheme varies depending on the specified <paramref name="mode"/>: <list
            type="bullet"> <item> <term>Complementary</term> <description>Generates a scheme with complementary colors split
            evenly across the specified steps.</description> </item> <item> <term>Analogous</term> <description>Generates a
            scheme with colors adjacent to the base color on the color wheel.</description> </item> <item>
            <term>Triadic</term> <description>Generates a scheme with three evenly spaced colors on the color
            wheel.</description> </item> <item> <term>SplitComplementary</term> <description>Generates a scheme with colors
            split from the complementary color.</description> </item> <item> <term>Monochrome</term> <description>Generates
            a scheme with shades of the base color.</description> </item> <item> <term>Warm</term> <description>Generates a
            scheme with warm colors (e.g., reds and yellows).</description> </item> <item> <term>Cool</term>
            <description>Generates a scheme with cool colors (e.g., blues and cyans).</description> </item> <item>
            <term>Pastel</term> <description>Generates a scheme with soft, light colors.</description> </item> <item>
            <term>Neon</term> <description>Generates a scheme with bright, vibrant colors.</description> </item> <item>
            <term>Greyscale</term> <description>Generates a scheme with shades of grey.</description> </item> <item>
            <term>AccessibilitySafe</term> <description>Generates a predefined scheme of colors optimized for
            accessibility.</description> </item> </list> The method ensures that the returned list contains distinct colors,
            ignoring case.</remarks>
            <param name="baseHex">The base color in hexadecimal format (e.g., "#FF5733").</param>
            <param name="mode">The <see cref="T:FluentUI.Blazor.Community.Components.ColorPaletteMode"/> that determines the type of color scheme to generate.</param>
            <param name="steps">The number of colors to include in the generated scheme. Must be greater than zero.</param>
            <param name="opts">Optional configuration for color generation, such as gradient strategy or blending options. If null, default
            options are used.</param>
            <returns>A list of hexadecimal color strings representing the generated color scheme. The list will contain distinct
            colors.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.InterpolateEasingValue(System.Int32,System.Int32,FluentUI.Blazor.Community.Components.GenerationOptions)">
            <summary>
            Calculates the interpolated value based on the current step, total steps, and easing options.
            </summary>
            <remarks>The method supports multiple easing functions, including exponential and sine-based easing.
            If <paramref name="steps"/> is 1, the method returns 1.0 regardless of the easing function.</remarks>
            <param name="i">The current step index, where 0 represents the first step.</param>
            <param name="steps">The total number of steps. Must be greater than 0.</param>
            <param name="opts">The options specifying the easing function to apply.</param>
            <returns>A double representing the interpolated value, adjusted according to the specified easing function.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linearly interpolates between two values based on a weighting factor.
            </summary>
            <param name="a">The starting value of the interpolation.</param>
            <param name="b">The ending value of the interpolation.</param>
            <param name="t">The interpolation factor, where 0.0 returns <paramref name="a"/> and 1.0 returns <paramref name="b"/>. Values
            outside the range [0.0, 1.0] will result in extrapolation.</param>
            <returns>The interpolated value, calculated as a weighted average of <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.ShortestHueLerp(System.Double,System.Double,System.Double)">
            <summary>
            Interpolates between two hue values along the shortest path on the color wheel.
            </summary>
            <remarks>This method ensures that the interpolation follows the shortest path on the hue circle,
            accounting for the circular nature of hue values. The result is always normalized to the range [0,
            360).</remarks>
            <param name="h1">The starting hue, in degrees, where 0 ≤ <paramref name="h1"/> &lt; 360.</param>
            <param name="h2">The ending hue, in degrees, where 0 ≤ <paramref name="h2"/> &lt; 360.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.  A value of 0.0 returns <paramref
            name="h1"/>, and a value of 1.0 returns <paramref name="h2"/>.</param>
            <returns>The interpolated hue, in degrees, normalized to the range [0, 360).</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.Clamp01(System.Double)">
            <summary>
            Clamps the specified value to the range [0.0, 1.0].
            </summary>
            <param name="value">The value to clamp.</param>
            <returns>The clamped value, which will be between 0.0 and 1.0, inclusive.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.Clamp255(System.Int32)">
            <summary>
            Clamps the specified integer value to the range of 0 to 255, inclusive.
            </summary>
            <param name="value">The integer value to clamp.</param>
            <returns>The clamped value, which will be 0 if <paramref name="value"/> is less than 0,  255 if <paramref name="value"/> is
            greater than 255, or <paramref name="value"/> itself if it is within the range.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ColorUtils.NormalizeHue(System.Double)">
            <summary>
            Normalizes a hue value to ensure it falls within the range of 0 to 360 degrees.
            </summary>
            <param name="h">The hue value, in degrees, which may be any real number.</param>
            <returns>The normalized hue value, in the range [0, 360).</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.CssColorNamesUtils">
            <summary>
            Retrieves hex values for standard CSS color names.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Helpers.CssColorNamesUtils.DefaultHex">
            <summary>
            Default hex value used when no color name is provided.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Helpers.CssColorNamesUtils._map">
            <summary>
            Represents a mapping of standard CSS color names to their corresponding hex values.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.CssColorNamesUtils.TryGetHex(System.String,System.String@)">
            <summary>
            Tries to get the hex value for a given CSS color name.
            </summary>
            <param name="name">Name of the CSS color.</param>
            <param name="hex">Hex value of the color.</param>
            <returns>Returns <see langword="true" /> if the value was found,
            <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.ImagePalette">
            <summary>
            Retrieves the dominant colors from an image using SkiaSharp.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.ImagePalette.ExtractColorsFromImage(System.IO.Stream,System.Int32)">
            <summary>
            Extracts the most frequent colors from an image stream.
            </summary>
            <param name="imageStream">Stream of the image.</param>
            <param name="count">Number of color to take.</param>
            <returns>Returns the list of the most frequent colors extracted from the image.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.MathHelper">
            <summary>
            Represents a helper class for mathematical conversions and calculations.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Helpers.MathHelper.Radians">
            <summary>
            Represents the conversion factor from degrees to radians.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Helpers.MathHelper.Degrees">
            <summary>
            Represents the conversion factor from radians to degrees.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Helpers.MathHelper.TwoPi">
            <summary>
            Represents the value of 2π (two times pi).
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.MathHelper.ToRadians(System.Double)">
            <summary>
            Converts an angle from degrees to radians.
            </summary>
            <param name="degrees">The angle in degrees to be converted.</param>
            <returns>The equivalent angle in radians.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.MathHelper.ToDegrees(System.Double)">
            <summary>
            Converts an angle from radians to degrees.
            </summary>
            <param name="radians">The angle in radians to convert.</param>
            <returns>The equivalent angle in degrees.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.PathHelper">
            <summary>
            Represents a helper class for path operations.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.PathHelper.GetSegments(System.String)">
            <summary>
            Gets the segments of the specified path.
            </summary>
            <param name="path">Path to segment.</param>
            <returns>Returns an array of <see cref="T:System.String"/> which represent the segments of the path.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.RunningWasmHelper">
            <summary>
            Helper class to determine if the application is running in a WebAssembly environment.
            </summary>
        </member>
        <member name="P:FluentUI.Blazor.Community.Helpers.RunningWasmHelper.IsWasm">
            <summary>
            Gets a value indicating whether the application is running in a WebAssembly environment.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.SvgConverter.ConvertToImage(System.String,FluentUI.Blazor.Community.Components.SignatureImageFormat,System.Int32)">
            <summary>
            Converts an SVG string to an image in the specified format and quality.
            </summary>
            <remarks>The method uses SkiaSharp to render the SVG content and encode it into the specified image
            format. The output image will have a transparent background if the SVG does not specify a background
            color.</remarks>
            <param name="svg">The SVG content as a string. This value cannot be <see langword="null"/> or empty.</param>
            <param name="format">The desired image format, such as PNG or JPEG.</param>
            <param name="quality">The quality of the output image, ranging from 0 to 100. Higher values indicate better quality.</param>
            <returns>A byte array representing the image data in the specified format.</returns>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.SvgConverter.ConvertToPdf(System.String)">
            <summary>
            Converts an SVG string to a PDF document represented as a byte array.
            </summary>
            <remarks>This method uses SkiaSharp to render the SVG content and generate a PDF document.  The
            dimensions of the PDF page are determined by the bounds of the SVG content.</remarks>
            <param name="svg">The SVG content as a string. This must be a valid SVG document.</param>
            <returns>A byte array containing the PDF representation of the provided SVG content.</returns>
        </member>
        <member name="T:FluentUI.Blazor.Community.Helpers.UnitFormatHelper">
            <summary>
            Represents a helper class for formatting CSS unit values.
            </summary>
        </member>
        <member name="F:FluentUI.Blazor.Community.Helpers.UnitFormatHelper.pattern">
            <summary>
            Represents a regex pattern to match valid CSS unit values.
            </summary>
        </member>
        <member name="M:FluentUI.Blazor.Community.Helpers.UnitFormatHelper.Format``1(``0)">
            <summary>
            Formats the specified value as a CSS unit string.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">Value to format.</param>
            <returns>Returns the formatted value as a CSS unit string.</returns>
        </member>
    </members>
</doc>
