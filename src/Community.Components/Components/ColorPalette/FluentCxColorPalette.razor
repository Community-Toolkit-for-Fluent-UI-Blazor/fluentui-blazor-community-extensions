@namespace FluentUI.Blazor.Community.Components
@inherits FluentComponentBase

<FluentKeyCode Anchor="@($"palette-grid-{Id}")" StopPropagation PreventDefault OnKeyDown="@OnGridKeyDownAsync" />

<div id="@Id" class="color-palette"@attributes="AdditionalAttributes">
    <div class="palette-header">
        <div class="left-tools">
            @if (ShowHarmonyPicker)
            {
                <FluentSelect TOption="string"
                              @bind-Value="HarmonyModeString"
                              Label="Harmonie"
                              AriaLabel="Harmonie"
                              Class="harmony-select">
                    @foreach (var value in HarmonyModes)
                    {
                        <FluentOption Value="@value">@value</FluentOption>
                    }
                </FluentSelect>
            }

            @if (Presets?.Count > 0)
            {
                <FluentSelect TOption="string"
                              @bind-Value="SelectedPreset"
                              Class="preset-select"
                              AriaLabel="Preset"
                              Label="Presets">
                    @foreach (var kv in Presets)
                    {
                        <FluentOption Value="@kv.Key">@kv.Key</FluentOption>
                    }
                </FluentSelect>
            }
        </div>

        <div class="right-tools">
            <FluentBadge Appearance="Appearance.Accent">@_colors.Count</FluentBadge>
            <span class="grid-info">@Columns × @ComputedRows</span>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <FluentMessageBar Intent="MessageIntent.Error" Class="messagebox-error">
            @_errorMessage
        </FluentMessageBar>
    }

    <div class="palette-grid"
         dir="@(GlobalState.Dir.ToAttributeValue())"
         role="grid"
         id="palette-grid-@(Id)"
         aria-multiselectable="@(MultiSelect ? "true" : "false")"
         aria-activedescendant="@($"palette-item-{Id}-{_focusIndex}")"
         style="@($"grid-template-columns: repeat({Columns}, {ItemSize}px); max-height:{MaxHeight}px;")">

        @foreach (var color in _colors)
        {
            var currentColor = color;
            var index = _colors.IndexOf(color);
            var isFocused = index == _focusIndex;
            var isSelected = MultiSelect ? SelectedColorsSet.Contains(color) : string.Equals(SelectedColor, color, StringComparison.OrdinalIgnoreCase);
            var isAnimated = index == _focusIndex;

            <ColorPaletteItem Color="@color"
                              Size="@ItemSize"
                              IsFocused="@isFocused"
                              IsSelected="@isSelected"
                              IsAnimated=@isAnimated
                              OnClick="() => ToggleSelectAsync(currentColor, index)"
                              OnReady="@(c => _buttonsRef[index] = c.Element)" />   
        }
    </div>

    @if (ShowPreview)
    {
        <div class="preview">
            @if (MultiSelect)
            {
                <div class="preview-list">
                    @foreach (var selectedColor in SelectedColors)
                    {
                        <div class="preview-item" style="--preview-item-color: @selectedColor">
                            <span>@selectedColor</span>
                        </div>
                    }
                </div>
            }
            else if (!string.IsNullOrEmpty(SelectedColor))
            {
                <div class="preview-single" style="--preview-item-color: @SelectedColor">
                    <span>@SelectedColor</span>
                </div>
            }
        </div>
    }
</div>
