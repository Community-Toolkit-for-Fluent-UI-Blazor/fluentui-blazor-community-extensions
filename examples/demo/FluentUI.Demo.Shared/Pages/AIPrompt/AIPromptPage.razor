@page "/aiprompt"

<h1>AI Prompt</h1>

<p>
    The AI Prompt uses AzureOpenAI with the gpt-4.1 model.
    The user can customize the endpoint, the model and the accesskey in the appsettings.json file or in secured json file.

    At this time, FluentCxAIPrompt can only be used with : AzureOpenAI

    You need to add this line in Program.cs to make it work :

    builder.Services.AddAzureOpenAI();

    In the config file, use that :

    * For AzureOpenAI :

    <pre>
        <code>
        {
            "AI": {
                "Azure": {
                    "Endpoint": "enpoint-url",
                    "Credentials": "secret-key",
                    "Model": "model-name"
                }
            }
        }
        </code>
    </pre>
</p>

<FluentCxAIPrompt Menus="@_menus"
                  OnResponseGenerated="OnResponseGenerated"
                  OnMenuSelected="OnHandleMenuSelectedAsync"
                  @ref=_aiPrompt/>


<h2 id="documentation">Documentation</h2>
<ApiDocumentation Component="typeof(FluentCxAIPrompt)" />
@code {
    private readonly List<AIPromptMenu> _menus = [];
    private string? prompt;
    private FluentCxAIPrompt? _aiPrompt;

    public AIPromptPage()
    {
        var menu1 = new AIPromptMenu()
            {
                Id = "1",
                Label = "Change formality",
            };

        menu1.AddRange(
        new AIPromptMenu()
        {
            Id = "2",
            Label = "Casual"
        },
        new AIPromptMenu()
        {
            Id = "3",
            Label = "Neutral"
        },
        new AIPromptMenu()
        {
            Id = "4",
            Label = "Formal"
        });

        _menus.Add(menu1);

        var menu2 = new AIPromptMenu()
        {
            Id = "5",
            Label = "Change length",
        };

        menu2.AddRange(
            new AIPromptMenu()
            {
                Id = "6",
                Label = "Simplify"
            },
            new AIPromptMenu()
            {
                Id = "7",
                Label = "Expand"
            }
        );

        _menus.Add(menu2);
    }

    private void OnResponseGenerated(AIPromptResult e)
    {
        prompt = e.Result?.Text;
    }

    private async Task OnHandleMenuSelectedAsync(AIPromptMenuEventArgs e)
    {
        int id = int.Parse(e.Command!.Id!);
        string command = string.Empty;

        if(id >=2 && id <= 4)
        {
            command = $"Change Formality of the following text to {e.Command.Label}: {prompt}";
        }
        else if(id == 6 || id == 7)
        {
            command = $"{e.Command.Label} the following text : {prompt}";
        }

        if (_aiPrompt is not null)
        {
            await _aiPrompt.GetResponseAsync(command);
        }
    }
}
