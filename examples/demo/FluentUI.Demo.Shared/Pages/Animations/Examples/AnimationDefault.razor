@using Microsoft.FluentUI.AspNetCore.Components.Extensions
<div style="width:100%; height: 500px">
    <FluentStack>
        <FluentStack Orientation="Orientation.Vertical">
            <FluentSelect Items="@_layouts"
                          TOption="string"
                          Label="Layout"
                          AriaLabel="Layout"
                          Height="250px"
                          @bind-SelectedOption=_selectedLayout />

            @if (_selectedLayout == nameof(BindStackLayout))
            {
                <FluentSlider Label="@GetSpacingLabel()"
                              @bind-Value=_spacing
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="10"
                              Max="50"
                              Step="5"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSwitch Label="Reversed"
                              @bind-Value=_reversed
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Style="margin-right: 20px" />

                <FluentSlider @bind-Value=_variantOpacity
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Style="width: 200px; margin-right: 20px"
                              Min="0.05"
                              Max="1"
                              Step="0.05"
                              Label="Variant opacity" />
            }

            @if (_selectedLayout == nameof(CascadeLayout))
            {
                <FluentSlider Label="@GetOffsetXLabel()"
                              @bind-Value=_offsetX
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="50"
                              Step="5"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetOffsetYLabel()"
                              @bind-Value=_offsetY
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="50"
                              Step="5"
                              Style="width: 200px; margin-right: 20px" />
            }

            @if (_selectedLayout == nameof(ChaosLayout) ||
                 _selectedLayout == nameof(FanLayout))
            {
                <FluentSlider Label="@GetSpreadLabel()"
                              @bind-Value=_spread
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="400"
                              Step="20"
                              Style="width: 200px; margin-right: 20px" />
            }

            @if(_selectedLayout == nameof(FanLayout))
            {
                <FluentSlider Label="@GetRadiusLabel()"
                          @bind-Value=_radius
                          @bind-Value:after="OnUpdateRequestedAsync"
                          Min="100"
                          Max="300"
                          Step="10"
                          Style="width: 200px; margin-right: 20px" />                
            }

            @if(_selectedLayout == nameof(FloatLayout))
            {
                <FluentSlider Label="@GetDriftRangeLabel()"
                              @bind-Value=_driftRange
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="400"
                              Step="20"
                              Style="width: 200px; margin-right: 20px" />
            }

            @if (_selectedLayout == nameof(GalaxyLayout))
            {
                <FluentSlider Label="@GetArmsLabel()"
                              @bind-Value=_arms
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="5"
                              Step="1"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetRotationPerTurnLabel()"
                              @bind-Value=_rotationPerTurn
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="5"
                              Step="1"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetSpreadLabel()"
                              @bind-Value=_spread
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="2"
                              Step="0.1"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetTurnsLabel()"
                              @bind-Value=_turns
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="5"
                              Step="1"
                              Style="width: 200px; margin-right: 20px" />
            }

            @if (_selectedLayout == nameof(GridLayout) ||
                _selectedLayout == nameof(SnakeLayout))
            {
                <FluentSlider Label="@GetColumnsLabel()"
                          @bind-Value=_columns
                          @bind-Value:after="OnUpdateRequestedAsync"
                          Min="1"
                          Max="5"
                          Step="1"
                          Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetCellWidthLabel()"
                              @bind-Value=_cellWidth
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="100"
                              Max="300"
                              Step="50"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetCellHeightLabel()"
                              @bind-Value=_cellHeight
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="100"
                              Max="300"
                              Step="50"
                              Style="width: 200px; margin-right: 20px" />                
            }

            @if (_selectedLayout == nameof(MagnetLayout))
            {
                 <FluentSlider Label="@GetMagnetXLabel()"
                          @bind-Value=_magnetX
                          @bind-Value:after="OnUpdateRequestedAsync"
                          Min="0"
                          Max="200"
                          Step="10"
                          Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetMagnetYLabel()"
                              @bind-Value=_magnetY
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="200"
                              Step="10"
                              Style="width: 200px; margin-right: 20px" />                
            }

            @if(_selectedLayout == nameof(OrbitLayout))
            {
                <FluentSlider Label="@GetRadiusLabel()"
                              @bind-Value=_radius
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="100"
                              Max="300"
                              Step="10"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetCenterXLabel()"
                              @bind-Value=_centerX
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="50"
                              Step="1"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetCenterYLabel()"
                              @bind-Value=_centerY
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="50"
                              Step="1"
                              Style="width: 200px; margin-right: 20px" />                
            }

            @if (_selectedLayout == nameof(PinLayout))
            {
                <FluentSlider Label="@GetPinXLabel()"
                              @bind-Value=_pinX
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="5"
                              Step="1"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetPinYLabel()"
                              @bind-Value=_pinY
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="5"
                              Step="1"
                              Style="width: 200px; margin-right: 20px" />
            }

            @if(_selectedLayout == nameof(PulseLayout))
            {
                <FluentSlider Label="@GetBaseScaleLabel()"
                              @bind-Value=_baseScale
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="5"
                              Step="1"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetPulseScaleLabel()"
                              @bind-Value=_pulseScale
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="5"
                              Step="1"
                              Style="width: 200px; margin-right: 20px" />                
            }

            @if (_selectedLayout == nameof(SpiralLayout))
            {
                <FluentSlider Label="@GetAngleStepLabel()"
                              @bind-Value=_angleStep
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="90"
                              Step="10"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetRadiusStepLabel()"
                              @bind-Value=_radiusStep
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="90"
                              Step="10"
                              Style="width: 200px; margin-right: 20px" />                
            }

            @if (_selectedLayout == nameof(SpiralGalaxyLayout))
            {
                <FluentSlider Label="@GetSpiralFactorLabel()"
                              @bind-Value=_spiralFactor
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="2"
                              Step="0.1"
                              Style="width: 200px; margin-right: 20px" />                
            }

            @if (_selectedLayout == nameof(StackLayout))
            {
                <FluentSlider Label="@GetSpacingLabel()"
                              @bind-Value=_spacing
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="50"
                              Step="5"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSelect Label="Orientation"
                              TOption="Orientation"
                              Items="@(Enum.GetValues<Orientation>())"
                              OptionText="@(e => e.ToAttributeValue())"
                              @bind-SelectedOption=_orientation
                              @bind-SelectedOption:after="OnUpdateRequestedAsync"
                              Style="width: 200px; margin-right: 20px" />
            }

            @if (_selectedLayout == nameof(VortexLayout))
            {
                <FluentSlider Label="@GetAngleStepLabel()"
                              @bind-Value=_angleStep
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="90"
                              Step="10"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetRadiusStepLabel()"
                              @bind-Value=_radiusStep
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="90"
                              Step="10"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetRotationSpeedLabel()"
                              @bind-Value=_rotationSpeed
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="360"
                              Step="1"
                              Style="width: 200px; margin-right: 20px" />                
            }

            @if (_selectedLayout == nameof(WaveLayout))
            {
                <FluentSlider Label="@GetAmplitudeLabel()"
                              @bind-Value=_amplitude
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="50"
                              Step="5"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetFrequencyLabel()"
                              @bind-Value=_frequency
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="1"
                              Max="10"
                              Step="1"
                              Style="width: 200px; margin-right: 20px" />                
            }

            @if (_selectedLayout == nameof(ZigZagLayout))
            {
                <FluentSlider Label="@GetStepXLabel()"
                              @bind-Value=_stepX
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="50"
                              Step="5"
                              Style="width: 200px; margin-right: 20px" />

                <FluentSlider Label="@GetStepYLabel()"
                              @bind-Value=_stepY
                              @bind-Value:after="OnUpdateRequestedAsync"
                              Min="0"
                              Max="50"
                              Step="5"
                              Style="width: 200px; margin-right: 20px" />
            }

            <FluentSlider Label="@GetDurationLabel()"
                          @bind-Value=_duration
                          @bind-Value:after="OnUpdateRequestedAsync"
                          Min="500"
                          Max="2000"
                          Step="100"
                          Style="width: 200px; margin-right: 20px" />

            <FluentSelect Label="Easing Function"
                          TOption="EasingFunction"
                          Items="@(Enum.GetValues<EasingFunction>())"
                          OptionText="@(e => e.ToAttributeValue())"
                          @bind-SelectedOption=_easingFunction
                          @bind-SelectedOption:after="OnUpdateRequestedAsync"
                          Style="width: 200px; margin-right: 20px">
            </FluentSelect>

            <FluentSelect @bind-SelectedOption=_easingMode
                          TOption="EasingMode"
                          Items="@(Enum.GetValues<EasingMode>())"
                          Label="Easing mode"
                          @bind-SelectedOption:after="OnUpdateRequestedAsync"
                          Style="width: 200px; margin-right: 20px" />                
        </FluentStack>

        <FluentStack Style="height: 100%"
                     HorizontalAlignment="HorizontalAlignment.Center"
                     VerticalAlignment="VerticalAlignment.Center">
            <FluentCxAnimation OnLayoutChanged=OnLayoutChanged
                               @ref=_animation>
                <ChildContent>
                    <AnimationItem Width="100" Height="100">
                        <img width="100" height="100" style="border-radius: 8px" src="./_content/FluentUI.Demo.Shared/slideshowimages/1.jpg" />
                    </AnimationItem>

                    <AnimationItem Width="100" Height="100">
                        <img width="100" height="100" style="border-radius: 8px" src="./_content/FluentUI.Demo.Shared/slideshowimages/2.jpg" />
                    </AnimationItem>

                    <AnimationItem Width="100" Height="100">
                        <img width="100" height="100" style="border-radius: 8px" src="./_content/FluentUI.Demo.Shared/slideshowimages/3.jpg" />
                    </AnimationItem>
                </ChildContent>

               <Layout>
                    @switch (_selectedLayout)
                    {
                        case nameof(BindStackLayout):
                            <BindStackLayout Spacing=_spacing
                                             Duration="@TimeSpan.FromMilliseconds(_duration)"
                                             EasingFunction="@_easingFunction"
                                             EasingMode="@_easingMode"
                                             Reversed=@_reversed
                                             VariantOpacity="@_variantOpacity" />
                            break;

                        case nameof(CascadeLayout):
                            <CascadeLayout OffsetXStep=_offsetX
                                           OffsetYStep=_offsetY
                                           Duration="@TimeSpan.FromMilliseconds(_duration)"
                                           EasingFunction="@_easingFunction"
                                           EasingMode="@_easingMode" />
                            break;

                        case nameof(ChaosLayout):
                            <ChaosLayout Spread=@_spread
                                         Duration="@TimeSpan.FromMilliseconds(_duration)"
                                         EasingFunction="@_easingFunction"
                                         EasingMode="@_easingMode" />
                            break;

                        case nameof(FanLayout):
                            <FanLayout AngleSpread=@_spread
                                       Radius=@_radius
                                       Duration="@TimeSpan.FromMilliseconds(_duration)"
                                       EasingFunction="@_easingFunction"
                                       EasingMode="@_easingMode" />
                            break;

                        case nameof(FloatLayout):
                            <FloatLayout DriftRange=@_driftRange
                                         Duration="@TimeSpan.FromMilliseconds(_duration)"
                                         EasingFunction="@_easingFunction"
                                         EasingMode="@_easingMode" />
                            break;

                        case nameof(FlowerLayout):
                            <FlowerLayout Duration="@TimeSpan.FromMilliseconds(_duration)"
                                          EasingFunction="@_easingFunction"
                                          EasingMode="@_easingMode" />
                            break;

                        case nameof(GoldenSpiralLayout):
                            <GoldenSpiralLayout Duration="@TimeSpan.FromMilliseconds(_duration)"
                                                EasingFunction="@_easingFunction"
                                                EasingMode="@_easingMode" />
                            break;

                        case nameof(GridLayout):
                            <GridLayout CellHeight=@_cellHeight
                                        CellWidth=@_cellWidth
                                        Columns=@_columns
                                        Duration="@TimeSpan.FromMilliseconds(_duration)"
                                        EasingFunction="@_easingFunction"
                                        EasingMode="@_easingMode" />
                            break;

                        case nameof(GalaxyLayout):
                            <GalaxyLayout Arms=@_arms
                                          RotationPerTurn=@_rotationPerTurn
                                          Spread=@_spread
                                          Turns=@_turns
                                          Duration="@TimeSpan.FromMilliseconds(_duration)"
                                          EasingFunction="@_easingFunction"
                                          EasingMode="@_easingMode" />
                            break;

                        case nameof(HeartLayout):
                            <HeartLayout Duration="@TimeSpan.FromMilliseconds(_duration)"
                                         EasingFunction="@_easingFunction"
                                         EasingMode="@_easingMode" />
                            break;

                        case nameof(HelixLayout):
                            <HelixLayout Duration="@TimeSpan.FromMilliseconds(_duration)"
                                         EasingFunction="@_easingFunction"
                                         EasingMode="@_easingMode" />
                            break;

                        case nameof(MagnetLayout):
                            <MagnetLayout MagnetX="@_magnetX"
                                          MagnetY="@_magnetY"
                                          Duration="@TimeSpan.FromMilliseconds(_duration)"
                                          EasingFunction="@_easingFunction"
                                          EasingMode="@_easingMode" />
                            break;

                        case nameof(MorphingLayout):
                            <MorphingLayout Duration="@TimeSpan.FromMilliseconds(_duration)"
                                            EasingFunction="@_easingFunction"
                                            EasingMode="@_easingMode">
                                <BindStackLayout />
                                <OrbitLayout Radius="100" />
                                <WaveLayout />
                                <StackedRotatingLayout />
                            </MorphingLayout>
                            break;

                        case nameof(OrbitLayout):
                            <OrbitLayout Radius=@_radius
                                         CenterX="@_centerX"
                                         CenterY="@_centerY"
                                         Duration="@TimeSpan.FromMilliseconds(_duration)"
                                         EasingFunction="@_easingFunction"
                                         EasingMode="@_easingMode" />
                            break;

                        case nameof(PinLayout):
                            <PinLayout PinX=@_pinX
                                       PinY=@_pinY
                                       Duration="@TimeSpan.FromMilliseconds(_duration)"
                                       EasingFunction="@_easingFunction"
                                       EasingMode="@_easingMode" />
                            break;

                        case nameof(PulseLayout):
                            <PulseLayout BaseScale=@_baseScale
                                         PulseScale=@_pulseScale
                                         Duration="@TimeSpan.FromMilliseconds(_duration)"
                                         EasingFunction="@_easingFunction"
                                         EasingMode="@_easingMode" />
                            break;

                        case nameof(SnakeLayout):
                            <SnakeLayout Duration="@TimeSpan.FromMilliseconds(_duration)"
                                         EasingFunction="@_easingFunction"
                                         EasingMode="@_easingMode"
                                         CellHeight="@_cellHeight"
                                         CellWidth="@_cellWidth"
                                         Columns="@_columns" />
                            break;

                        case nameof(SpiralLayout):
                            <SpiralLayout Duration="@TimeSpan.FromMilliseconds(_duration)"
                                          EasingFunction="@_easingFunction"
                                          EasingMode="@_easingMode" />
                            break;

                        case nameof(SpiralGalaxyLayout):
                            <SpiralGalaxyLayout SpiralFactor=@_spiralFactor
                                                Duration="@TimeSpan.FromMilliseconds(_duration)"
                                                EasingFunction="@_easingFunction"
                                                EasingMode="@_easingMode" />
                            break;

                        case nameof(StackedRotatingLayout):
                            <StackedRotatingLayout Duration="@TimeSpan.FromMilliseconds(_duration)"
                                                   EasingFunction="@_easingFunction"
                                                   EasingMode="@_easingMode" />
                            break;

                        case nameof(StackLayout):
                            <StackLayout Spacing=@_spacing
                                         Orientation=@_orientation
                                         Duration="@TimeSpan.FromMilliseconds(_duration)"
                                         EasingFunction="@_easingFunction"
                                         EasingMode="@_easingMode" />
                            break;

                        case nameof(SunburstLayout):
                            <SunburstLayout Duration="@TimeSpan.FromMilliseconds(_duration)"
                                            EasingFunction="@_easingFunction"
                                            EasingMode="@_easingMode" />
                            break;

                        case nameof(VortexLayout):
                            <VortexLayout Duration="@TimeSpan.FromMilliseconds(_duration)"
                                          EasingFunction="@_easingFunction"
                                          AngleStep=@_angleStep
                                          RadiusStep=@_radiusStep
                                          RotationSpeed=@_rotationSpeed
                                          EasingMode="@_easingMode" />
                            break;

                        case nameof(WaveLayout):
                            <WaveLayout Amplitude=@_amplitude
                                        Frequency=@_frequency
                                        Duration="@TimeSpan.FromMilliseconds(_duration)"
                                        EasingFunction="@_easingFunction"
                                        EasingMode="@_easingMode" />
                            break;

                        case nameof(ZigZagLayout):
                            <ZigZagLayout StepX=@_stepX
                                          StepY=@_stepY
                                          Duration="@TimeSpan.FromMilliseconds(_duration)"
                                          EasingFunction="@_easingFunction"
                                          EasingMode="@_easingMode" />
                            break;
                    }
               </Layout>
            </FluentCxAnimation>
        </FluentStack>
    </FluentStack>
</div>

@code {
    private static readonly string[] _layouts = new[]
    {
        nameof(BindStackLayout),
        nameof(CascadeLayout),
        nameof(ChaosLayout),
        nameof(FanLayout),
        nameof(FloatLayout),
        nameof(FlowerLayout),
        nameof(GridLayout),
        nameof(GalaxyLayout),
        nameof(GoldenSpiralLayout),
        nameof(HeartLayout),
        nameof(HelixLayout),
        nameof(MagnetLayout),
        nameof(MorphingLayout),
        nameof(OrbitLayout),
        nameof(PinLayout),
        nameof(PulseLayout),
        nameof(SnakeLayout),
        nameof(SpiralGalaxyLayout),
        nameof(SpiralLayout),
        nameof(StackedRotatingLayout),
        nameof(StackLayout),
        nameof(SunburstLayout),
        nameof(VortexLayout),
        nameof(WaveLayout),
        nameof(ZigZagLayout)
    };

    private string? _selectedLayout;

    private FluentCxAnimation? _animation;
    private int _cellHeight = 100;
    private int _cellWidth = 100;
    private int _columns = 3;
    private int _duration = 500;
    private EasingFunction _easingFunction = EasingFunction.Linear;
    private EasingMode _easingMode = EasingMode.In;
    private bool _reversed;
    private double _variantOpacity = 0.05;
    private int _spacing = 10;
    private bool _repeat;
    private int _offsetX = 10;
    private int _offsetY = 10;
    private double _spread = 10;
    private int _radius = 100;
    private int _driftRange = 10;
    private int _rotationPerTurn = 1;
    private int _arms = 1;
    private int _turns = 3;
    private int _magnetX = 10;
    private int _magnetY = 10;
    private int _centerX = 100;
    private int _centerY = 100;
    private int _pinX = 100;
    private int _pinY = 100;
    private double _baseScale = 1;
    private double _pulseScale = 0.3;
    private double _angleStep = 30;
    private double _radiusStep = 10;
    private double _spiralFactor = 1;
    private Orientation _orientation = Orientation.Horizontal;
    private double _rotationSpeed = 90;
    private double _amplitude = 20;
    private double _frequency = 1;
    private int _stepX = 10;
    private int _stepY = 10;

    private string GetStepXLabel() => $"Step X: {_stepX}";

    private string GetStepYLabel() => $"Step Y: {_stepY}";

    private string GetAmplitudeLabel() => $"Amplitude: {_amplitude}";

    private string GetFrequencyLabel() => $"Frequency: {_frequency}";

    private string GetRotationSpeedLabel() => $"Rotation Speed: {_rotationSpeed}°";

    private string GetSpiralFactorLabel() => $"Spiral Factor: {_spiralFactor}";

    private string GetAngleStepLabel() => $"Angle Step: {_angleStep}";

    private string GetRadiusStepLabel() => $"Radius Step: {_radiusStep}";

    private string GetBaseScaleLabel() => $"Base Scale: {_baseScale}";

    private string GetPulseScaleLabel() => $"Pulse Scale: {_pulseScale}";

    private string GetPinXLabel() => $"Pin X: {_pinX}";

    private string GetPinYLabel() => $"Pin Y: {_pinY}";

    private string GetCenterXLabel() => $"CenterX: {_centerX}px";

    private string GetCenterYLabel() => $"CenterY: {_centerY}px";

    private string GetMagnetXLabel() => $"Magnet X: {_magnetX}px";

    private string GetMagnetYLabel() => $"Magnet Y: {_magnetY}px";

    private string GetRadiusLabel() => $"Radius: {_radius}px";

    private string GetSpreadLabel() => $"Spread: {_spread}px";

    private string GetOffsetXLabel() => $"Offset X: {_offsetX}px";

    private string GetOffsetYLabel() => $"Offset Y: {_offsetY}px";

    private string GetDurationLabel() => $"Duration: {_duration}ms";

    private string GetColumnsLabel() => $"Columns: {_columns}";

    private string GetCellWidthLabel() => $"Cell width: {_cellWidth}";

    private string GetCellHeightLabel() => $"Cell height: {_cellHeight}";

    private string GetSpacingLabel() => $"Spacing: {_spacing}px";

    private string GetDriftRangeLabel() => $"Drift Range: {_driftRange}px";

    private string GetArmsLabel() => $"Arms: {_arms}";

    private string GetTurnsLabel() => $"Turns: {_turns}";

    private string GetRotationPerTurnLabel() => $"Rotation per turn: {_rotationPerTurn}";

    private async Task OnUpdateRequestedAsync()
    {
        if (_animation is not null)
        {
            await _animation.StopAsync();
            await _animation.StartAsync();
        }
    }

    private async Task OnLayoutChanged()
    {
        if (_animation is not null)
        {
            await _animation.StopAsync();
            await _animation.StartAsync();
        }
    }
}
