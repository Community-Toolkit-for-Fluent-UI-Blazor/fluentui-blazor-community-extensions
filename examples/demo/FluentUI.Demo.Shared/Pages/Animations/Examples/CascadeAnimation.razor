@using Microsoft.FluentUI.AspNetCore.Components.Extensions
<div style="width:100%; height: 500px">
    <FluentStack>
        <FluentStack Orientation=Orientation.Vertical Style="margin-bottom: 20px">
            <FluentSlider Label="@GetOffsetXLabel()"
                          @bind-Value=_offsetX
                          @bind-Value:after="OnUpdateRequestedAsync"
                          Min="0"
                          Max="50"
                          Step="5"
                          Style="width: 200px; margin-right: 20px" />

            <FluentSlider Label="@GetOffsetYLabel()"
                          @bind-Value=_offsetY
                          @bind-Value:after="OnUpdateRequestedAsync"
                          Min="0"
                          Max="50"
                          Step="5"
                          Style="width: 200px; margin-right: 20px" />

            <FluentSlider Label="@GetDurationLabel()"
                          @bind-Value=_duration
                          @bind-Value:after="OnUpdateRequestedAsync"
                          Min="500"
                          Max="2000"
                          Step="100"
                          Style="width: 200px; margin-right: 20px" />

            <FluentSelect Label="Easing Function"
                          TOption="EasingFunction"
                          Items="@(Enum.GetValues<EasingFunction>())"
                          OptionText="@(e => e.ToAttributeValue())"
                          @bind-SelectedOption=_easingFunction
                          @bind-SelectedOption:after="OnUpdateRequestedAsync"
                          Style="width: 200px; margin-right: 20px">
            </FluentSelect>

            <FluentSelect @bind-SelectedOption=_easingMode
                          TOption="EasingMode"
                          Items="@(Enum.GetValues<EasingMode>())"
                          Label="Easing mode"
                          @bind-SelectedOption:after="OnUpdateRequestedAsync"
                          Style="width: 200px; margin-right: 20px" />
        </FluentStack>

        <FluentCxAnimation @ref=_animation>
            <ChildContent>
                <AnimationItem Width="100" Height="100">
                    <img width="100" height="100" style="border-radius: 8px" src="./_content/FluentUI.Demo.Shared/slideshowimages/1.jpg" />
                </AnimationItem>

                <AnimationItem Width="100" Height="100">
                    <img width="100" height="100" style="border-radius: 8px" src="./_content/FluentUI.Demo.Shared/slideshowimages/2.jpg" />
                </AnimationItem>

                <AnimationItem Width="100" Height="100">
                    <img width="100" height="100" style="border-radius: 8px" src="./_content/FluentUI.Demo.Shared/slideshowimages/3.jpg" />
                </AnimationItem>
            </ChildContent>

            <Layout>
                <CascadeLayout OffsetXStep="_offsetX"
                               OffsetYStep="_offsetY"   
                                 Duration="@TimeSpan.FromMilliseconds(_duration)"
                                 EasingFunction="@_easingFunction"
                                 EasingMode="@_easingMode" />
            </Layout>
        </FluentCxAnimation>
    </FluentStack>
</div>

@code {
    private FluentCxAnimation _animation;
    private int _offsetX = 10;
    private int _offsetY = 10;
    private int _duration = 500;
    private EasingFunction _easingFunction = EasingFunction.Linear;
    private EasingMode _easingMode = EasingMode.In;

    private string GetOffsetXLabel() => $"Offset X: {_offsetX}px";

    private string GetOffsetYLabel() => $"Offset Y: {_offsetY}px";

    private string GetDurationLabel() => $"Duration: {_duration}ms";

    private async Task OnUpdateRequestedAsync()
    {
        if (_animation is not null)
        {
            await _animation.StopAsync();
            await _animation.StartAsync();
        }
    }
}
