@inject IToastService ToastService

<div id="relative-container" style="height: 750px;">
    <FluentGrid>
        <FluentGridItem xs="3"
                        sm="3"
                        lg="3"
                        xl="3"
                        xxl="3">
            <FluentSelect Label="View" @bind-Value=_view TOption="string">
                <FluentOption Value="Default" Selected>Default</FluentOption>
                <FluentOption Value="Small">Small</FluentOption>
            </FluentSelect>
        </FluentGridItem>

        <FluentGridItem xs="3"
                        sm="3"
                        lg="3"
                        xl="3"
                        xxl="3">
            <FluentSelect Label="Choices" @bind-Value=_capabilities TOption="string">
                <FluentOption Value="AcceptOnly" Selected>Accept only</FluentOption>
                <FluentOption Value="AcceptDeny">Accept & deny</FluentOption>
                <FluentOption Value="AcceptDenyManage">Accept, deny & manage cookies</FluentOption>
            </FluentSelect>
        </FluentGridItem>

        <FluentGridItem xs="3"
                        sm="3"
                        lg="3"
                        xl="3"
                        xxl="3">
            <FluentSelect Label="Open cookie button visibility" @bind-Value=_openConsentVisibility TOption="string">
                <FluentOption Value="@OpenCookieVisibility.Always.ToString()" Selected>Always</FluentOption>
                <FluentOption Value="@OpenCookieVisibility.Never.ToString()">Never</FluentOption>
                <FluentOption Value="@OpenCookieVisibility.WhenFirstHidden.ToString()">When first hidden</FluentOption>
            </FluentSelect>
        </FluentGridItem>

        <FluentGridItem xs="3"
                        sm="3"
                        lg="3"
                        xl="3"
                        xxl="3">
            <FluentSelect Label="Open cookie button position" @bind-Value=_openConsentPosition TOption="string">
                <FluentOption Value="@FloatingPosition.TopLeft.ToString()">Top left</FluentOption>
                <FluentOption Value="@FloatingPosition.TopCenter.ToString()">Top center</FluentOption>
                <FluentOption Value="@FloatingPosition.TopRight.ToString()">Top right</FluentOption>
                <FluentOption Value="@FloatingPosition.MiddleLeft.ToString()">Middle left</FluentOption>
                <FluentOption Value="@FloatingPosition.MiddleCenter.ToString()">Middle center</FluentOption>
                <FluentOption Value="@FloatingPosition.MiddleRight.ToString()">Middle right</FluentOption>
                <FluentOption Value="@FloatingPosition.BottomLeft.ToString()" Selected>Bottom left</FluentOption>
                <FluentOption Value="@FloatingPosition.BottomCenter.ToString()">Bottom center</FluentOption>
                <FluentOption Value="@FloatingPosition.BottomRight.ToString()">Bottom right</FluentOption>
            </FluentSelect>
        </FluentGridItem>

        <FluentGridItem xs="3"
                        sm="3"
                        lg="3"
                        xl="3"
                        xxl="3">
            <FluentTextField Label="Privacy statement url" @bind-Value=_privacyStatementUrl Immediate />
        </FluentGridItem>

        <FluentGridItem xs="3"
                        sm="3"
                        lg="3"
                        xl="3"
                        xxl="3">
            <FluentTextField Label="Third-party Cookie url" @bind-Value=_thirdPartyCookieUrl Immediate />
        </FluentGridItem>

        <FluentGridItem xs="3"
                        sm="3"
                        lg="3"
                        xl="3"
                        xxl="3">
            <FluentButton OnClick=OnDeleteCookieAsync Appearance="Appearance.Neutral">
                Delete cookies
            </FluentButton>
        </FluentGridItem>
    </FluentGrid>

    <FluentCxCookie View="@(Enum.Parse<CookieView>(_view))"
                    Choices="@(Enum.Parse<CookieChoices>(_capabilities))"
                    OpenConsentVisibility="@(Enum.Parse<OpenCookieVisibility>(_openConsentVisibility))"
                    OpenButtonPosition="@(Enum.Parse<FloatingPosition>(_openConsentPosition))"
                    PrivacyStatementUrl="@_privacyStatementUrl"
                    ThirdPartyCookiesUrl="@_thirdPartyCookieUrl"
                    Items="@GetItems()"
                    Modal=false
                    RelativeContainerId="relative-container"
                    OnInitActiveCookie="@OnInitCookie"
                    @ref=_fluentCxCookie />
</div>

@code {
    private string _view = "Default";
    private string _capabilities = "AcceptOnly";
    private string? _privacyStatementUrl;
    private string? _thirdPartyCookieUrl;
    private FluentCxCookie? _fluentCxCookie;
    private string _openConsentVisibility = OpenCookieVisibility.Always.ToString();
    private string _openConsentPosition = FloatingPosition.BottomLeft.ToString();

    private IEnumerable<CookieItem> GetItems()
    {
        return new[]
        {
            new CookieItem()
            {
                Name = "Advertising",
                Title = "Advertising targeting",
                Description = "These cookies allow us to offer you personalized advertisements based on your interests, browsing, and online behavior. They are used to limit the number of times the same advertisement is shown, measure the effectiveness of advertising campaigns, and show you more relevant ads on this site and elsewhere on the web."
            },

            new CookieItem()
            {
                Name = "Performance",
                Title = "Performance",
                Description = "These cookies are essential for measuring and improving the performance of our application. They collect anonymous data on how you use the site — such as loading times, errors encountered, or the most used features. With this information, we can optimize the stability, speed, and efficiency of our service, in order to provide you with a smooth and reliable experience."
            }
        };
    }

    private void OnInitCookie(string activeCookieName)
    {
        ToastService.ShowToast(
            ToastIntent.Info,
            $"This cookie is active and need to be managed on your side : {activeCookieName}");
    }

    private async Task OnDeleteCookieAsync()
    {
        if (_fluentCxCookie is not null)
        {
            await _fluentCxCookie.DeleteCookieAsync();
            ToastService.ShowToast(ToastIntent.Success, "All cookies have been deleted.");
            await InvokeAsync(StateHasChanged);
        }
    }
}
